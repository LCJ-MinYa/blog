<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[aliyun-oss]]></title>
    <url>%2Fblog%2F2022%2F04%2F15%2FJS%2Faliyun-oss%2F</url>
    <content type="text"><![CDATA[断点续传1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465/* aliOssUpload.js简单封装文件 * 需要自定义字段,folderPath、bucket、options * options中需要传递requestApi(请求服务器获得sts凭证) */import OSS from 'ali-oss';import Cookie from 'js-cookie';const isProd = process.env.VUE_APP_CURRENTMODE === 'prod';export default class AliOssUpload &#123; /** oss实例 */ client = null; /** 上传文件夹自定义路径 */ folderPath = '/test/'; /** 上传阿里云配置 */ options = &#123; /** bucket 所在的区域，默认 oss-cn-hangzhou */ region: 'oss-cn-chengdu', /** 通过控制台创建的bucket */ bucket: isProd ? 'prodBucketName' : 'bucketName', /** (secure: true) 则使用 HTTPS， (secure: false) 则使用 HTTP */ secure: true, /** 是否使用阿里云内网访问，默认false。比如通过ECS访问OSS，则设置为true，采用internal的endpoint可节约费用 */ internal: false, // endpoint: 'oss-cn-chengdu-internal.aliyuncs.com', &#125;; constructor(options = &#123;&#125;) &#123; this.options = &#123; ...this.options, ...options &#125;; &#125; getStsToken(forceUpdate = false) &#123; return new Promise((resolve, reject) =&gt; &#123; /** 通过阿里云控制台创建的access key */ const accessKeyId = Cookie.get('accessKeyId'); /** 通过阿里云控制台创建的access secret */ const accessKeySecret = Cookie.get('accessKeySecret'); /** 使用临时授权方式token */ const stsToken = Cookie.get('stsToken'); console.log(this.options); if (accessKeyId &amp;&amp; accessKeySecret &amp;&amp; stsToken &amp;&amp; !forceUpdate) &#123; this.client = new OSS(&#123; ...this.options, accessKeyId, accessKeySecret, stsToken &#125;); resolve(this.client); &#125; else &#123; this.options .requestApi() .then((result = &#123;&#125;) =&gt; &#123; Cookie.set('accessKeyId', result.accessKeyId, &#123; expires: 0.5 &#125;); Cookie.set('accessKeySecret', result.accessKeySecret, &#123; expires: 0.5 &#125;); Cookie.set('stsToken', result.securityToken, &#123; expires: 0.5 &#125;); this.client = new OSS(&#123; ...this.options, ...result, stsToken: result.securityToken &#125;); resolve(this.client); &#125;) .catch((err) =&gt; &#123; console.log(err, '获取stsToken失败'); reject(err); &#125;); &#125; &#125;); &#125; resumeBreakpointUpload(filename, file, options = &#123;&#125;) &#123; return this.client.multipartUpload(`$&#123;this.folderPath&#125;$&#123;filename&#125;`, file, options); &#125;&#125; sts到期自动更新思路 1.此为网上看到的资料觉得在理，备份下]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>阿里云oss</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode]]></title>
    <url>%2Fblog%2F2021%2F09%2F17%2FIDE%2Fvscode%E5%85%A8%E5%B1%80%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[前置依赖插件 koroFileHeader 在vscode中用于生成文件头部注释和函数注释的插件 Prettier 格式化 Turbo Console Log 快速生成console.log Vetur vue工具 全局配置123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657&#123; "editor.tabSize": 4, "editor.detectIndentation": false, "editor.formatOnSave": true, "git.ignoreMissingGitWarning": true, "window.zoomLevel": 1, "workbench.tree.indent": 20, "workbench.colorTheme": "Monokai", "explorer.confirmDragAndDrop": false, "editor.fontSize": 16, "explorer.confirmDelete": false, "update.mode": "none", "prettier.semi": true, //prettier全局使用分号 "prettier.singleQuote": true, //prettier全局使用单引号 "prettier.printWidth": 50, //prettier全局超过50才换行 "[javascript]": &#123; "editor.defaultFormatter": "esbenp.prettier-vscode" //js文件保存时使用prettier格式化 &#125;, "[markdown]": &#123; "editor.formatOnSave": false //markdown文件保存时使用不格式化 &#125;, "[vue]": &#123; "editor.tabSize": 4, "editor.defaultFormatter": "octref.vetur" &#125;, "vetur.format.defaultFormatter.html": "prettyhtml", "vetur.format.options.tabSize": 4, "prettier.tabWidth": 4, "vetur.format.defaultFormatterOptions": &#123; "prettier": &#123; "semi": true, "singleQuote": true, "printWidth": 50, &#125;, &#125;, "[typescriptreact]": &#123; "editor.defaultFormatter": "esbenp.prettier-vscode" &#125;, "fileheader.customMade": &#123; // 头部注释默认字段 "Author": "LiChaoJun", "Date": "Do not edit", // 设置后默认设置文件生成时间 "LastEditTime": "Do not edit", // 设置后，保存文件更改默认更新最后编辑时间 "LastEditors": "LiChaoJun", // 设置后，保存文件更改默认更新最后编辑人 &#125;, "fileheader.configObj": &#123; "autoAddLine": 10, // 文件超过多少行数 不再自动添加头部注释 &#125;, "security.workspace.trust.untrustedFiles": "open", "turboConsoleLog.addSemicolonInTheEnd": true, "turboConsoleLog.delimiterInsideMessage": "-", "turboConsoleLog.insertEnclosingFunction": false, "turboConsoleLog.logMessagePrefix": "", "turboConsoleLog.quote": "'", // "editor.renderControlCharacters": true, // 显示tabs // "editor.renderWhitespace": "all", // 显示空格&#125; Turbo Console Log使用 选中变量添加注释（支持多选）ctrl + alt + L 从当前文档中删除由扩展程序插入的所有日志消息alt + shift + d 从当前文档中注释由扩展程序插入的所有日志消息alt + shift + c 从当前文档中取消对扩展程序插入的所有日志消息的注释alt + shift + u]]></content>
      <categories>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>vscode</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式集合]]></title>
    <url>%2Fblog%2F2021%2F09%2F17%2FJS%2F%E5%B7%A5%E4%BD%9C%E4%B8%AD%E9%AA%8C%E8%AF%81%E8%BF%87%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[密码只能6~20位包含大写字母、小写字母、数字、标点符号(除空格)至少两种123456789/** * 标点符号这里范围包括非中文、空格、大小写字母、数字的所有其他字符(例如表情，全角！半角!等) * (?!.*[\u4E00-\u9FA5\s]) 排除中文和空格 * (?!^[a-z]+$) 排除纯小写字母的字符串 * (?!^[A-Z]+$) 排除纯大写字母的字符串 * (?!^[\d]+$) 排除纯数字的字符串 * (?!^[^a-zA-Z\d]+$) 排除纯标点符号的字符串 *//(?!.*[\u4E00-\u9FA5\s])(?!^[a-z]+$)(?!^[A-Z]+$)(?!^[\d]+$)(?!^[^a-zA-Z\d]+$)^.&#123;6,20&#125;$/g 密码强度规则12345678910111213141516171819202122232425262728293031323334353637383940/** * 输入框有值即为强度一 * 输入框满足密码只能6~20位包含大写字母、小写字母、数字、标点符号(除空格)至少两种即为强度二 * 满足强度二的情况下，密码种类大于等于3种即为强度三 */let value = '此处为用户输入的密码';let reg = /(?!.*[\u4E00-\u9FA5\s])(?!^[a-z]+$)(?!^[A-Z]+$)(?!^[\d]+$)(?!^[^a-zA-Z\d]+$)^.&#123;6,20&#125;$/g;/** 密码强度 */let safeLevel = 0;if (value) &#123; safeLevel++;&#125;if (reg.test(value)) &#123; safeLevel++; let groups = 0; const lowercaseReg = /[a-z]+/g; //匹配包含小写字母 const capitalReg = /[A-Z]+/g; //匹配包含大写字母 const numberReg = /[\d]+/g; //匹配包含数字 const otherReg = /[^a-zA-Z\d]+/g; //匹配包含标点符号 if (lowercaseReg.test(value)) &#123; groups++; &#125; if (capitalReg.test(value)) &#123; groups++; &#125; if (numberReg.test(value)) &#123; groups++; &#125; if (otherReg.test(value)) &#123; groups++; &#125; if (groups &gt;= 3) &#123; safeLevel++; &#125;&#125;/** 密码强度最终值 */console.log(safeLevel); 密码只能包含大写字母、小写字母、数字、标点符号(除空格)12345678/** * 一般用来判断密码满足某条件的时候 * 例如： * x 6-20位字符 * x 只能包含大写字母、小写字母、数字、标点符号(除空格) * x 包含大写字母、小写字母、数字、标点符号(除空格)至少两种 *//[^\u4E00-\u9FA5\s]+/g 密码只能6~20位包含大写字母、小写字母、数字、特殊符号(除空格)至少两种123456789/** * 特殊符号这里范围包括._~!@#$^&amp;* * (?!^[a-z]+$) 排除纯小写字母的字符串 * (?!^[A-Z]+$) 排除纯大写字母的字符串 * (?!^[\d]+$) 排除纯数字的字符串 * (?!^[._~!@#$^&amp;*]+$) 排除纯特殊符号的字符串 * ^[a-zA-z\d._~!@#$^&amp;*]&#123;6,20&#125;$ 6-20位只能输入大写字母、小写字母、数字、特殊符号 *//(?!^[a-z]+$)(?!^[A-Z]+$)(?!^[\d]+$)(?!^[._~!@#$^&amp;*]+$)^[a-zA-z\d._~!@#$^&amp;*]&#123;6,20&#125;$/g]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[node版本过高导致hexo安装报错]]></title>
    <url>%2Fblog%2F2021%2F09%2F11%2FHexo%2Fnode%E7%89%88%E6%9C%AC%E8%BF%87%E9%AB%98%E5%AF%BC%E8%87%B4hexo%E5%AE%89%E8%A3%85%E6%8A%A5%E9%94%99%2F</url>
    <content type="text"><![CDATA[方案一 - 直接升级当前项目 hexo 版本方案二 - nvm 管理 node 版本 安装 nvm，细节忽略 nvm 安装需要的 node 版本nvm install v10.0.0 nvm 使用当前安装的 node 版本nvm use v10.0.0 全局安装 hexo 指定版本，版本号可根据项目中 package.json 依赖的 hexo 版本npm install hexo@3.8.0 -g]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[antd-desgin-vue]]></title>
    <url>%2Fblog%2F2021%2F09%2F08%2FJS%2Fantd-desgin-vue%2F</url>
    <content type="text"><![CDATA[select 中添加新增输入框和按钮1234567891011121314151617181920212223242526272829303132&lt;!--text数据结构text: &#123; open: false, value: &apos;&apos;, input: &apos;&apos;,&#125;--&gt;&lt;template slot=&quot;groupName&quot; slot-scope=&quot;text&quot;&gt; &lt;div v-if=&quot;text !== null&quot; @mousedown=&quot; (e) =&gt; &#123; e.preventDefault(); text.open = true; &#125; &quot; &gt; &lt;a-select placeholder=&quot;请选择产品组名称&quot; style=&quot;width: 200px&quot; v-model=&quot;text[&apos;value&apos;]&quot; :open=&quot;text.open&quot; @select=&quot;() =&gt; (text.open = false)&quot;&gt; &lt;div slot=&quot;dropdownRender&quot; slot-scope=&quot;menu&quot; @mousedown=&quot;(e) =&gt; e.preventDefault()&quot;&gt; &lt;v-nodes :vnodes=&quot;menu&quot; /&gt; &lt;a-divider style=&quot;margin: 4px 0;&quot; /&gt; &lt;div class=&quot;product-group-input&quot;&gt; &lt;a-input @click=&quot;(e) =&gt; e.target.focus()&quot; v-model=&quot;text[&apos;input&apos;]&quot; placeholder=&quot;请输入产品组名称&quot; size=&quot;small&quot; /&gt; &lt;a-button type=&quot;primary&quot; size=&quot;small&quot; style=&quot;margin-left: 10px&quot; @click=&quot;() =&gt; addProductGroupName(text)&quot;&gt;新增&lt;/a-button&gt; &lt;/div&gt; &lt;/div&gt; &lt;a-select-option :value=&quot;item&quot; v-for=&quot;item in groupNameList&quot; :key=&quot;item&quot; @click=&quot;() =&gt; (text.open = false)&quot;&gt;&#123;&#123; item &#125;&#125;&lt;/a-select-option&gt; &lt;/a-select&gt; &lt;/div&gt; &lt;span v-else&gt;-&lt;/span&gt;&lt;/template&gt; upload 组件 fileList 自定义请求 customRequest 不显示上传进度问题123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990&lt;template&gt; &lt;a-upload ref=&quot;uploadRef&quot; name=&quot;file&quot; :multiple=&quot;true&quot; :showUploadList=&quot;true&quot; :action=&quot;uploadUrl&quot; :headers=&quot;headers&quot; :remove=&quot;handRemove&quot; :customRequest=&quot;customRequestUpload&quot; :accept=&quot;acceptFile&quot; :beforeUpload=&quot;beforeUpload&quot; :file-list=&quot;form.fileList&quot; @change=&quot;fileChange&quot; &gt;&lt;/template&gt;&lt;script&gt;export default &#123; data () &#123; form: &#123; fileList: [] &#125;, &#125; methods: &#123; fileChange(&#123; file &#125;)&#123; if (file.status == &quot;uploading&quot;) &#123; /** 开始上传加入fileList */ this.form.fileList.push(file) &#125; if (file.status == &quot;done&quot;) &#123; /** 业务处理流程 */ const &#123; like, key, &#125; = file.response.data.data; let index = this.form.fileList.findIndex(item=&gt;&#123; return item.uid === file.uid; &#125;); this.form.fileList[index] = &#123; ...this.form.fileList[index], url: like, uid: key, name: file.name &#125;; &#125; if (file.status == &quot;error&quot;) &#123; /** 上传失败移除fileList */ this.handRemove(file); &#125; &#125;, /** 自定义上传 */ customRequestUpload(data) &#123; if (this.form.fileList.length &gt; 3) &#123; this.$message.info(&apos;附件最多只能上传三个&apos;); return; &#125; const formData = new FormData(); formData.append(&apos;file&apos;, data.file); formData.append(&apos;manufacturer&apos;, &apos;TENCENT&apos;); /** 任何失败都必须调用onError */ this.$api .uploadFile(formData) .then((res) =&gt; &#123; if (res.data.data &amp;&amp; res.data.code === &apos;200&apos;) &#123; this.$refs.uploadRef.onSuccess(res, data.file); this.$message.success(&apos;上传附件成功&apos;); &#125; else &#123; this.$refs.uploadRef.onError(err, err, data.file); this.$message.error(&apos;上传附件失败&apos;); &#125; &#125;) .catch((err) =&gt; &#123; this.$refs.uploadRef.onError(err, err, data.file); this.$message.error(&apos;上传附件失败&apos;); &#125;); &#125;, handRemove(file) &#123; let index = this.form.fileList.findIndex((item) =&gt; &#123; return item.uid === file.uid; &#125;); if (index !== -1) &#123; this.form.fileList.splice(index, 1); &#125; &#125;, &#125;&#125;&lt;/script&gt; 递归需要返回值的处理1234567891011121314151617181920212223242526272829303132333435363738394041424344454647function dealTreeData(dataArr, catId, result = [])&#123; for (let i = 0; i &lt; dataArr.length; i++) &#123; if (result.length) &#123; return; &#125; if (dataArr[i].catId == catId) &#123; /** 重点，必须使用push才能改变到result的值 */ result.push(...dataArr); /** * result = dataArr; * 这种写法改变了数组内存地址，currentLevelDataArr的值不会改变还是空数组 */ return; &#125; if(dataArr[i].children &amp;&amp; dataArr[i].children.length) &#123; dealTreeData(dataArr[i].children, catId, result); &#125; &#125;&#125;,/** 需要递归的数据 */const dataArr = [&#123; catId: '1000', name: '水果', childList: [&#123; catId: '10000', name: '水果分类1', children: [&#123; catId: '100000', name: '苹果', children: [] &#125;], &#125;,&#123; catId: '10001', name: '水果分类2', children: [], &#125;]&#125;,&#123; catId: '2000', name: '蔬菜', childList: []&#125;];/** 需要匹配的某个层级id */const catId = '10001';/** 返回值(只返回当前层级的所有数据) */const currentLevelDataArr = [];dealTreeData(dataArr, catId, currentLevelDataArr); 按需引入element-ui yarn add element-ui yarn add babel-plugin-component --dev 编辑babel.config.js 123456789101112131415161718192021222324252627const IS_PROD = ['production', 'prod'].includes(process.env.NODE_ENV)const plugins = [ [ 'component', &#123; "libraryName": "element-ui", "styleLibraryName": "theme-chalk" &#125; ]]if (IS_PROD) &#123; plugins.push('transform-remove-console')&#125;module.exports = &#123; presets: [ '@vue/cli-plugin-babel/preset' ], plugins // plugins: [ // [ // "import", // &#123; libraryName: "ant-design-vue", libraryDirectory: "es", style: true &#125; // ] // ]&#125; 在main.js中按需引入 12345import &#123; Table, TableColumn, Input &#125; from 'element-ui';Vue.use(Table);Vue.use(TableColumn);Vue.use(Input); 验证按需加载是否成功，每次添加一个组件，然后yarn build后查看www/static/js/chunk-vendors.xxxx.js文件大小]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>antd design vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[javascript面试知识点]]></title>
    <url>%2Fblog%2F2020%2F12%2F02%2FJS%2Fjavascript%E9%9D%A2%E8%AF%95%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[html部分html语义化标签的理解 什么是语义化，语义化之后文档会有什么效果呢？ 首先，语义化，顾名思义，就是你写的HTML结构，是用相对应的有一定语义的英文字母（标签）表示的，标记的，因为HTML本身就是标记语言。不仅对自己来说，容易阅读，书写。别人看你的代码和结构也容易理解，甚至对一些不是做网页开发的人来说，也容易阅读。那么，我们以后再开发的过程中，一定要注意了，尽量使用官方的有语义的标签，不要再使用一堆无意义的标签去堆你的结构。怎么知道，自己的页面结构是否语义化，那就要看你的HTML结构，在去掉CSS样式表之后，是否，依然能很好的呈现内容的结构，代码结构。也就是说，脱掉css的外衣，依然头是头，脚是脚。赤裸裸的完整的一篇文档。这也就是，语义化之后文档的效果。 其实语义化，也无非就是自己在使用标签的时候多使用有英文语义的标签，比如h标签，在HTML中就是就是用来定义标题，还有p标签，英文是paragraph段落，table表格标签,等等。 为什么要语义化? 为了在没有CSS的情况下，页面也能呈现出很好地内容结构、代码结构:为了裸奔时好看； 用户体验：例如title、alt用于解释名词或解释图片信息的标签尽量填写有含义的词语、label标签的活用； 有利于SEO：和搜索引擎建立良好沟通，有助于爬虫抓取更多的有效信息：爬虫依赖于标签来确定上下文和各个关键字的权重； 方便其他设备解析（如屏幕阅读器、盲人阅读器、移动设备）以有意义的方式来渲染网页； 便于团队开发和维护，语义化更具可读性，遵循W3C标准的团队都遵循这个标准，可以减少差异化。 html5新增的语义化标签 header元素 footer元素 hgroup元素hgroup元素代表“网页”或“section”的标题，当元素有多个层级时，该元素可以将h1到h6元素放在其内，譬如文章的主标题和副标题的组合 nav元素 aside元素aside元素被包含在article元素中作为主要内容的附属信息部分，其中的内容可以是与当前文章有关的相关资料、标签、名词解释等。 article元素 section元素是一个主题性的内容分组，通常用于对页面进行分块或者对文章等进行分段 DOCTYPE DOCTYPE有什么作用？标准模式与混杂模式如何区分？它们有何意义? 告诉浏览器使用哪个版本的HTML规范来渲染文档。DOCTYPE不存在或形式不正确会导致HTML文档以混杂模式呈现。标准模式（Standards mode）以浏览器支持的最高标准运行；混杂模式（Quirks mode）中页面是一种比较宽松的向后兼容的方式显示。 HTML5的DOCTYPE格式 &lt;!DOCTYPE HTML&gt; HTML5为什么只需要写 &lt;!DOCTYPE HTML&gt;？ HTML5不基于SGML（Standard Generalized Markup Language 标准通用标记语言），因此不需要对DTD（DTD 文档类型定义）进行引用，但是需要DOCTYPE来规范浏览器行为。 HTML4.01基于SGML，所以需要引用DTD。才能告知浏览器文档所使用的文档类型，如下：&lt;!DOCTYPE HTML PUBLIC “-//W3C//DTD HTML 4.01//EN” “http://www.w3.org/TR/html4/strict.dtd&quot;&gt; 行内元素与块级元素 含义 行内元素 -&gt; 一个行内元素只占据它对应标签的边框所包含的空间。 块级元素 -&gt; 块级元素占据其父元素（容器）的整个空间，因此创建了一个“块”。通常浏览器会在块级元素前后另起一个新行。 区别 块元素，总是在新行上开始；内联元素，和其他元素在一行； 块元素，能容纳其他块元素或者内联元素；内联元素，只能容纳文本或其他内联元素； 块元素中高度，行高以及顶和底边距都可以控制；内联元素中高，行高及顶和底边距不可改变。 块级元素 address - 地址blockquote - 块引用center - 举中对齐块dir - 目录列表div - 常用块级容易，也是css layout的主要标签dl - 定义列表fieldset - form控制组form - 交互表单h1 - 大标题h2 - 副标题h3 - 3级标题h4 - 4级标题h5 - 5级标题h6 - 6级标题hr - 水平分隔线isindex - input promptmenu - 菜单列表noframes - frames可选内容（对于不支持frame的浏览器显示此区块内容）noscript - 可选脚本内容（对于不支持script的浏览器显示此内容）ol - 排序列表p - 段落pre - 格式化文本table - 表格ul - 非排序列表 行内元素 a - 锚点abbr - 缩写acronym - 首字b - 粗体（不推荐）bdo - bidi overridebig - 大字体br - 换行cite - 引用code - 计算机代码（在引用源码的时候需要）dfn - 定义字段em - 强调font - 字体设定（不推荐）i - 斜体img - 图片input - 输入框kbd - 定义键盘文本label - 表格标签q - 短引用s - 中划线（不推荐）samp - 定义范例计算机代码select - 项目选择small - 小字体文本span - 常用内联容器，定义文本内区块strike - 中划线strong - 粗体强调sub - 下标sup - 上标textarea - 多行文本输入框tt - 电传文本u - 下划线var - 定义变量 如何转换 display float当把行内元素设置完float:left/right后，该行内元素的display属性会被赋予block值，且拥有浮动特性。行内元素去除了之间的莫名空白。 position当为行内元素进行定位时，position:absolute与position:fixed.都会使得原先的行内元素变为块级元素。 导入样式link和@import区别 从属关系区别@import是 CSS 提供的语法规则，只有导入样式表的作用；link是HTML提供的标签，不仅可以加载 CSS 文件，还可以定义 RSS、rel 连接属性等。 加载顺序区别加载页面时，link标签引入的 CSS 被同时加载；@import引入的 CSS 将在页面加载完毕后被加载。 兼容性区别@import是 CSS2.1 才有的语法，故只可在 IE5+ 才能识别；link标签作为 HTML 元素，不存在兼容性问题。 DOM可控性区别可以通过 JS 操作 DOM ，插入link标签来改变样式；由于 DOM 方法是基于文档的，无法使用@import的方式插入样式。 浏览器内核的理解(低)主要分成两部分：渲染引擎(Layout Engine或Rendering Engine)和JS引擎。 渲染引擎：负责取得网页的内容（HTML、XML、图像等等）、整理讯息（例如加入CSS等），以及计算网页的显示方式，然后会输出至显示器或打印机。浏览器的内核的不同对于网页的语法解释会有不同，所以渲染的效果也不相同。JS引擎：解析和执行javascript来实现网页的动态效果。 最开始渲染引擎和JS引擎并没有区分的很明确，后来JS引擎越来越独立，内核就倾向于只指渲染引擎。 常见的浏览器内核有哪些？(低)Trident( MSHTML )：IE MaxThon TT The World 360 搜狗浏览器Geckos：Netscape6及以上版本 FireFox Mozilla Suite/SeaMonkeyPresto：Opera7及以上(Opera内核原为：Presto，现为：Blink)Webkit：Safari Chrome 微软Edge HTML5新特性 canvas 用于媒介回放的video和audio元素 本地离线存储。localStorage长期存储数据，浏览器关闭后数据不丢失;sessionStorage的数据在浏览器关闭后自动删除 语意化更好的内容元素，比如 article footer header nav section 位置API：Geolocation 表单控件，calendar date time email url search 新的技术：web worker(web worker是运行在后台的 JavaScript，独立于其他脚本，不会影响页面的性能。您可以继续做任何愿意做的事情：点击、选取内容等等，而此时 web worker 在后台运行) web socket拖放API：drag、drop iframe框架有那些优缺点？(低) 优点 iframe能够原封不动的把嵌入的网页展现出来。 如果有多个网页引用iframe，那么你只需要修改iframe的内容，就可以实现调用的每一个页面内容的更改，方便快捷。 网页如果为了统一风格，头部和版本都是一样的，就可以写成一个页面，用iframe来嵌套，可以增加代码的可重用。 如果遇到加载缓慢的第三方内容如图标和广告，这些问题可以由iframe来解决。 缺点 搜索引擎的爬虫程序无法解读这种页面 框架结构中出现各种滚动条 使用框架结构时，保证设置正确的导航链接。 iframe页面会增加服务器的http请求 页面可见性（Page Visibility）API 可以有哪些用途？(低) 通过visibility state的值得检测页面当前是否可见，以及打开网页的时间。 在页面被切换到其他后台进程时，自动暂停音乐或视频的播放。 css部分css权重CSS 权重优先级顺序简单表示为：!important &gt; 行内样式 &gt; ID &gt; 类、伪类、属性 &gt; 标签名 &gt; 继承 &gt; 通配符 选择器 权重 通配符 0 标签 1 类/伪类/属性 10 ID 100 行内样式 1000 important 1/0(无穷大) 移动端1px实现 问题根源从移动端的角度说个具体的场景，以iphone6为例。 iphone6的屏幕宽度为375px，设计师做的视觉稿一般是750px，也就是2x，这个时候设计师在视觉稿上画了1px的边框，于是你就写了“border-width:1px”，so…1px边框问题产生了。 对设计师来说它的1px是相对于750px的（物理像素），对你来说你的1px是相对于375px的（css像素）“实际上你应该是border-width:0.5px”。 使用伪类 + transform实现 123456789101112div:before&#123; content: ""; display: block; position: absolute; left: -50%; width: 200%; height: 1px; background: #eaeaea; bottom: 0; -webkit-transform:scale(0.5); transform: scale(0.5);&#125; 通过 viewport + rem 实现 将border设置为1px,然后将页面根据设备的dpr缩小相应的倍数，接着将rem放大相应的倍数，这样页面中只有1px的边框缩小了，而其他内容经过缩小和扩大，还是原来的状态。(rem元素大小不变，仅仅是px元素会根据dpr进行缩放)。 垂直居中 transform 123456789101112131415161718192021.father-box&#123; display: none; position: fixed; overflow: hidden; top: 0; left: 0; bottom: 0; right: 0; z-index: 5; background: rgba(0,0,0,0.6);&#125;.child-box&#123; position: absolute; width: 240px; overflow: hidden; top: 50%; left: 50%; -o-transform: translate3d(-50%,-50%,0); -webkit-transform: translate3d(-50%,-50%,0); transform: translate3d(-50%,-50%,0);&#125; flex布局实现 绝对定位1234567891011121314151617.use-absolute&#123; position: relative; width:200px; height:150px; border:1px solid #000;&#125;.use-absolute div&#123; position: absolute; width:100px; height:50px; top:0; right:0; bottom:0; left:0; margin:auto; background:#f60;&#125; 盒子模型 标准盒模型标准盒模型：W3C标准定义：一个块的总宽度=width+margin(左右)+padding(左右)+border(左右) 怪异盒模型怪异盒模型：IE标准盒子模型定义：一个块的总宽度=width+margin（左右）（既width已经包含了padding和border值） 怪异盒模型用处box-sizing:content-box || border-box || inherit;当设置为box-sizing:border-box时，将采用怪异模式解析计算；好处是便于整体计算，例如一个页面1000px，指定左右各500px，如果采用怪异模式，不需要care宽度和border，padding的影响，因为border,padding都归属于width。 隐藏元素方法 visibility: hidden使对象在网页上不可见，但该对象在网页上所占的空间没有改变，通俗来说就是看不见但摸得到。具体表现如下： DOM结构：被渲染，但是被隐藏，会占据空间； 事件监听：无法进行DOM事件监听； 性能：动态改变此属性会引起重绘，性能较高； 继承：会被子元素继承，子元素可以通过设置visibility:visible来取消隐藏； transition：visibility会立即显示，隐藏时会延时。 display: none不为被隐藏的对象保留其物理空间，即该对象在页面上彻底消失，通俗来说就是看不见也摸不到。具体表现如下： DOM结构，浏览器不会渲染display:none的元素，不占据空间； 事件监听：无法进行DOM事件监听； 性能：动态改变此属性会引起重排，性能较差； 继承：不会被子元素继承，毕竟子类也不会渲染； transition：transition不支持display。 opacity: 0与visibility: hidden相似，使对象在网页上不可见，但该对象在网页上所占的空间没有改变，但是可以进行DOM事件监听，visibility：hidden不可以,通俗来说就是看不见但是摸得着。具体表现如下： DOM结构：透明度为100%，元素被隐藏，会占据空间； 事件监听：可以进行DOM事件监听； 性能：提升为合成层，不会引起重绘，性能较高； 继承：会被子元素继承，子元素并不能通过opacity:1来取消隐藏； transition：opacity可以延迟显示和隐藏。 position: absolute通过使用绝对定位将元素移除可视区域内 z-index: -999来使其他元素遮盖住该元素 clip/clip-path使用元素裁剪,元素仍在页面中占据位置，但是不会响应绑定的监听事件。 transform: scale(0,0)将元素缩放为 0，元素仍在页面中占据位置，但是不会响应绑定的监听事件。 transition和animation的区别 transition是过度属性，强调过度，它的实现需要触发一个事件（比如鼠标移动上去，焦点，点击等）才执行动画。它类似于flash的补间动画，设置一个开始关键帧，一个结束关键帧。 animation是动画属性，它的实现不需要触发事件，设定好时间之后可以自己执行，且可以循环一个动画。它也类似于flash的补间动画，但是它可以设置多个关键帧（用@keyframe定义）完成动画。 css3新特性新增各种CSS选择器 （: not(.input)：所有 class 不是“input”的节点）多列布局 （multi-column layout）阴影和反射 （Shadoweflect）文字特效 （text-shadow）文字渲染 （Text-decoration）线性渐变 （gradient）旋转 （transform）增加了旋转,缩放,定位,倾斜,动画,多背景边框新增属性 border-radius、box-shadow和border-imagebox-sizing CSS Sprites 雪碧图将一个页面涉及到的所有图片都包含到一张大图中去，然后利用CSS的 background-image，background-repeat，background-position属性的组合进行背景定位。 优点能很好地减少网页的http请求，从而大大提高了页面的性能能减少图片的字节，把3张图片合并成1张图片的字节总是小于这3张图片的字节总和。 缺点在图片合并时，要把多张图片有序的、合理的合并成一张图片，还要留好足够的空间，防止板块内出现不必要的背景。在宽屏及高分辨率下的自适应页面，如果背景不够宽，很容易出现背景断裂；在开发的时候相对来说有点麻烦，需要借助photoshop或其他工具来对每个背景单元测量其准确的位置在维护的时候比较麻烦，页面背景有少许改动时，就要改这张合并的图片，无需改的地方尽量不要动，这样避免改动更多的CSS，如果在原来的地方放不下，又只能（最好）往下加图片，这样图片的字节就增加了，还要改动CSS ::before 和 :after 的双冒号和单冒号有什么区别？(低) 冒号(:)用于CSS3伪类，双冒号(::)用于CSS3伪元素。 ::before就是以一个子元素的存在，定义在元素主体内容之前的一个伪元素。并不存在于dom之中，只存在在页面之中。 注意： :before 和 :after 这两个伪元素，是在CSS2.1里新出现的。起初，伪元素的前缀使用的是单冒号语法，但随着Web的进化，在CSS3的规范里，伪元素的语法被修改成使用双冒号，成为::before、::after。 移动端适配方法 viewport适配 12345678910111213//原理：通过设置 initial-scale , 将所有设备布局视口的宽度调整为设计图的宽度.//获取meta节点var metaNode = document.querySelector('meta[name=viewport]'); //定义设计稿宽度为375var designWidth = 375; //计算当前屏幕的宽度与设计稿比例var scale = document.documentElement.clientWidth/designWidth; //通过设置meta元素中content的initial-scale值达到移动端适配meta.content="initial-scale="+scale+",minimum-scale="+scale+",maximum-scale="+scale+",user-scalable=no"; 借助media实现rem适配 1234567891011121314151617//对屏幕大小划分了html不同的font-size@media screen and (min-width: 320px) &#123;html&#123;font-size:50px;&#125;&#125;@media screen and (min-width: 360px) &#123;html&#123;font-size:56.25px;&#125;&#125;@media screen and (min-width: 375px) &#123;html&#123;font-size:58.59375px;&#125;&#125;@media screen and (min-width: 400px) &#123;html&#123;font-size:62.5px;&#125;&#125;@media screen and (min-width: 414px) &#123;html&#123;font-size:64.6875px;&#125;&#125;@media screen and (min-width: 440px) &#123;html&#123;font-size:68.75px;&#125;&#125;@media screen and (min-width: 480px) &#123;html&#123;font-size:75px;&#125;&#125;@media screen and (min-width: 520px) &#123;html&#123;font-size:81.25px;&#125;&#125;@media screen and (min-width: 560px) &#123;html&#123;font-size:87.5px;&#125;&#125;@media screen and (min-width: 600px) &#123;html&#123;font-size:93.75px;&#125;&#125;@media screen and (min-width: 640px) &#123;html&#123;font-size:100px;&#125;&#125;@media screen and (min-width: 680px) &#123;html&#123;font-size:106.25px;&#125;&#125;@media screen and (min-width: 720px) &#123;html&#123;font-size:112.5px;&#125;&#125;@media screen and (min-width: 760px) &#123;html&#123;font-size:118.75px;&#125;&#125;@media screen and (min-width: 800px) &#123;html&#123;font-size:125px;&#125;&#125;@media screen and (min-width: 960px) &#123;html&#123;font-size:150px;&#125;&#125; rem：CSS的长度单位， 根元素字体大小的倍数，只有根元素字体大小有关； html 中的根元素即 html 元素。 大部分浏览器的默认字体大小都是16px，所以1rem = 16px； rem适配原理:长度单位都是用 rem 设置当屏幕尺寸改变时，只需要修改 html 元素的 font-size 即可实现等比适配我们在制作页面的时候，只考虑跟设计稿相同的屏幕尺寸即可，其他尺寸屏幕自动适配 Flex弹性布局 1&lt;meta name="viewport" content="width=device-width,initial-scale=1,maximum-scale=1,user-scalable=no"&gt; 高度定死，宽度自适应，元素都采用px做单位。 随着屏幕宽度变化，页面也会跟着变化，效果就和PC页面的流体布局差不多，在哪个宽度需要调整的时候使用响应式布局调调就行（比如网易新闻），这样就实现了『适配』。 px、em、rem的区别及使用场景 px是固定的像素，一旦设置了就无法因为适应页面大小而改变。 em和rem相对于px更具有灵活性，他们是相对长度单位，其长度不是固定的，更适用于响应式布局。 em是相对于其父元素来设置字体大小，这样就会存在一个问题，进行任何元素设置，都有可能需要知道他父元素的大小。而rem是相对于根元素，这样就意味着，只需要在根元素确定一个参考值。 为什么需要清除浮动？清除浮动的方式 浮动的定义 非IE浏览器下，容器不设高度且子元素浮动时，容器高度不能被内容撑开。 此时，内容会溢出到容器外面而影响布局。这种现象被称为浮动（溢出）。 浮动的工作原理： 浮动元素脱离文档流，不占据空间（引起“高度塌陷”现象）浮动元素碰到包含它的边框或者其他浮动元素的边框停留 浮动元素可以左右移动，直到遇到另一个浮动元素或者遇到它外边缘的包含框。浮动框不属于文档流中的普通流，当元素浮动之后，不会影响块级元素的布局，只会影响内联元素布局。此时文档流中的普通流就会表现得该浮动框不存在一样的布局模式。当包含框的高度小于浮动框的时候，此时就会出现“高度塌陷”。 浮动元素引起的问题？ 父元素的高度无法被撑开，影响与父元素同级的元素与浮动元素同级的非浮动元素会跟随其后若浮动的元素不是第一个元素，则该元素之前的元素也要浮动，否则会影响页面的显示结构 清除浮动的方式如下： 给父级div定义height属性最后一个浮动元素之后添加一个空的div标签，并添加clear:both样式包含浮动元素的父级标签添加overflow:hidden或者overflow:auto使用 :after 伪元素。由于IE6-7不支持 :after，使用 zoom:1 触发 hasLayout** BFC(待)设置小于12px的字体(低)在谷歌下css设置字体大小为12px及以下时，显示都是一样大小，都是默认12px。 解决办法：使用Webkit的内核的-webkit-text-size-adjust的私有CSS属性来解决，只要加了-webkit-text-size-adjust:none;字体大小就不受限制了。但是chrome更新到27版本之后就不可以用了。所以高版本chrome谷歌浏览器已经不再支持-webkit-text-size-adjust样式，所以要使用时候慎用。使用css3的transform缩放属性-webkit-transform:scale(0.5); 注意-webkit-transform:scale(0.75);收缩的是整个元素的大小，这时候，如果是内联元素，必须要将内联元素转换成块元素，可以使用display：block/inline-block/…；使用图片：如果是内容固定不变情况下，使用将小于12px文字内容切出做图片，这样不影响兼容也不影响美观。 js部分js数据类型根据ES6规范，共7种数据类型，分为基本数据类型（值类型）和对象数据类型（引用类型） 不能按照typeof函数的返回值划分简单类型：string,number,boolean,undefined; 复杂类型：object,function, typeof只是作为判断数据类型的存在 基本数据类型（值类型） 数字number 字符串string 布尔值boolean 空值null 未定义undefined 符号symbol 对象数据类型（引用类型）： 对象object undefined和null的区别null表示没有对象，即该处不应该有值,undefined表示缺少值，即此处应该有值，但没有定义1234console.log(null == undefined); //true 因为两者都默认转换成了falseconsole.log(typeof undefined); //"undefined" console.log(typeof null); //"object" console.log(null === undefined); //false "==="表示绝对相等，null和undefined类型是不一样的，所以输出“false” 扁平化数组 toString 闭包 概念 闭包就是能够读取其他函数内部变量的函数。由于在Javascript语言中，只有函数内部的子函数才能读取局部变量，因此可以把闭包简单理解成”定义在一个函数内部的函数”。所以，在本质上，闭包就是将函数内部和函数外部连接起来的一座桥梁。 用途 可以读取函数内部的变量 让这些变量的值始终保持在内存中。 原型链与继承this指向es6新特性字符串, 数组, 对象 扩展的api变量扩展: let const 解构赋值 块级作用域函数扩展: 箭头函数 默认参数, rest参数展开运算符, 模板字符串set 和 map数据结构迭代器和生成器函数 next 和 yield的理解proxy对象 属性代理器: 属性的读取（get）和设置（set）相关操作promise对象, 异步编程的解决方案async + await: 异步编程的终极方案 promise + generator的语法糖class语法 构造函数的语法糖模块化编程 export + import 的 导出和导入 箭头函数与函数区别http状态码cookie,session,tokenCookie：cookie数据始终在同源的http请求中携带（即使不需要），即cookie在浏览器和服务器间来回传递。而sessionStorage和localStorage不会自动把数据发给服务器，仅在本地保存。cookie数据还有路径（path）的概念，可以限制cookie只属于某个路径下,存储的大小很小只有4K左右。（key：可以在浏览器和服务器端来回传递，存储容量小，只有大约4K左右） sessionStorage：仅在当前浏览器窗口关闭前有效，自然也就不可能持久保持，localStorage：始终有效，窗口或浏览器关闭也一直保存，因此用作持久数据；cookie只在设置的cookie过期时间之前一直有效，即使窗口或浏览器关闭。（key：本身就是一个回话过程，关闭浏览器后消失，session为一个回话，当页面不同即使是同一页面打开两次，也被视为同一次回话） localStorage：localStorage 在所有同源窗口中都是共享的；cookie也是在所有同源窗口中都是共享的。（key：同源窗口都会共享，并且不会失效，不管窗口或者浏览器关闭与否都会始终生效） 前端性能优化js运行机制，事件队列和循环异步编程 callback Promises async await 事件监听,发布订阅setTimeout、Promise、Async/Await 的区别事件循环中分为宏任务队列和微任务队列。其中settimeout的回调函数放到宏任务队列里，等到执行栈清空以后执行；promise.then里的回调函数会放到相应宏任务的微任务队列里，等宏任务里面的同步代码执行完再执行；async函数表示函数里面可能会有异步方法，await后面跟一个表达式，async方法执行时，遇到await会立即执行表达式，然后把表达式后面的代码放到微任务队列里，让出执行栈让同步代码先执行。 Promise 构造函数是同步执行还是异步执行，那么 then 方法呢？promise构造函数是同步执行的，then方法是异步执行的 new关键字做了什么1.声明一个中间对象2.将该中间对象的proto指向构造函数的原型3.将构造函数的this通过apply指向中间对象4.返回该中间对象,也就是返回了实例对象 深拷贝和浅拷贝 概念 如何区分深拷贝与浅拷贝，简单点来说，就是假设B复制了A，当修改A时，看B是否会发生变化，如果B也跟着变了，说明这是浅拷贝，拿人手短，如果B没变，那就是深拷贝，自食其力。 深拷贝实现方式 递归递归去复制所有层级属性(PS：只是一个基本实现的展示，并非最佳实践) 1234567891011121314151617function deepClone(obj)&#123; let objClone = Array.isArray(obj)?[]:&#123;&#125;; if(obj &amp;&amp; typeof obj==="object")&#123; for(key in obj)&#123; if(obj.hasOwnProperty(key))&#123; //判断ojb子元素是否为对象，如果是，递归复制 if(obj[key]&amp;&amp;typeof obj[key] ==="object")&#123; objClone[key] = deepClone(obj[key]); &#125;else&#123; //如果不是，简单复制 objClone[key] = obj[key]; &#125; &#125; &#125; &#125; return objClone;&#125; 通过JSON对象来实现深拷贝 123456//缺点： 无法实现对对象中方法的深拷贝，会显示为undefinedfunction deepClone2(obj) &#123; var _obj = JSON.stringify(obj), objClone = JSON.parse(_obj); return objClone;&#125; 通过jQuery的extend方法实现深拷贝 12var array = [1,2,3,4];var newArray = $.extend(true,[],array); // true为深拷贝，false为浅拷贝 lodash函数库实现深拷贝 1let result = _.cloneDeep(test) 如果对象的value是基本类型的话，也可以用Object.assign来实现深拷贝，但是要把它赋值给一个空对象 1234567var obj = &#123; a: 1, b: 2&#125;var obj1 = Object.assign(&#123;&#125;, obj); // obj赋值给一个空&#123;&#125;obj1.a = 3;console.log(obj.a)；// 1 跨域解决方案 通过jsonp跨域 postMessage跨域postMessage是HTML5 XMLHttpRequest Level 2中的API，且是为数不多可以跨域操作的window属性之一，它可用于解决以下方面的问题：a.） 页面和其打开的新窗口的数据传递b.） 多窗口之间消息传递c.） 页面与嵌套的iframe消息传递d.） 上面三个场景的跨域数据传递 用法：postMessage(data,origin)方法接受两个参数data： html5规范支持任意基本类型或可复制的对象，但部分浏览器只支持字符串，所以传参时最好用JSON.stringify()序列化。origin： 协议+主机+端口号，也可以设置为”*”，表示可以传递给任意窗口，如果要指定和当前窗口同源的话设置为”/“。 跨域资源共享（CORS）普通跨域请求：只服务端设置Access-Control-Allow-Origin即可，前端无须设置，若要带cookie请求：前后端都需要设置。 nodejs中间件代理跨域 nginx代理跨域 WebSocket协议跨域 如果通过点击空白区域关闭一个弹窗123456789101112131415window.addEventListener('click', bodyClosePopup);function bodyClosePopup(event) &#123; let selectBox = document.querySelector('.ant-select-dropdown'); let modalBox = document.querySelector('.ant-modal-root'); const path = event.path || (event.composedPath &amp;&amp; event.composedPath()); if (path.includes(modalBox) || path.includes(selectBox)) &#123; return; &#125; if (!this.dataSource.length) &#123; return; &#125; //符合条件,关闭弹窗 this.popup = false;&#125;, vue部分vue的生命周期Vue 的父组件和子组件生命周期钩子执行顺序是什么加载渲染过程父beforeCreate-&gt;父created-&gt;父beforeMount-&gt;子beforeCreate-&gt;子created-&gt;子beforeMount-&gt;子mounted-&gt;父mounted子组件更新过程父beforeUpdate-&gt;子beforeUpdate-&gt;子updated-&gt;父updated父组件更新过程父beforeUpdate-&gt;父updated销毁过程父beforeDestroy-&gt;子beforeDestroy-&gt;子destroyed-&gt;父destroyed vue响应式实现原理 Object.defineProperty Object.defineProperty的缺陷Object.defineProperty无法监控到数组下标的变化，导致通过数组下标添加元素，不能实时响应; 为了解决这个问题，经过vue内部处理后可以使用以下几种方法来监听数组push()pop()shift()unshift()splice()sort()reverse() Object.defineProperty只能劫持对象的属性，从而需要对每个对象，每个属性进行遍历，如果，属性值是对象，还需要深度遍历。Proxy可以劫持整个对象，并返回一个新的对象。Proxy不仅可以代理对象，还可以代理数组。还可以代理动态增加的属性。 写 React / Vue 项目时为什么要在列表组件中写 key，其作用是什么？不用 key：就地复用节点。在比较新旧两个节点是否是同一个节点的过程中会判断成新旧两个节点是同一个节点，因为 a.key 和 b.key 都是 undefined。所以不会重新创建节点和删除节点，只会在节点的属性层面上进行比较和更新。所以可能在某种程度上（创建和删除节点方面）会有渲染性能上的提升； 无法维持组件的状态。由于就地复用节点的关系，可能在维持组件状态方面会导致不可预知的错误，比如无法维持改组件的动画效果、开关等状态； 也有可能会带来性能下降。因为是直接就地复用节点，如果修改的组件，需要复用的很多节点，顺序又和原来的完全不同的话，那么创建和删除的节点数量就会比带 key 的时候增加很多，性能就会有所下降； 用 key：维持组件的状态，保证组件的复用。因为有 key 唯一标识了组件，不会在每次比较新旧两个节点是否是同一个节点的时候直接判断为同一个节点，而是会继续在接下来的节点中找到 key 相同的节点去比较，能找到相同的 key 的话就复用节点，不能找到的话就增加或者删除节点。 查找性能上的提升。有 key 的时候，会生成 hash，这样在查找的时候就是 hash 查找了，基本上就是 O(1) 的复杂度。 节点复用带来的性能提升。因为有 key 唯一标识了组件，所以会尽可能多的对组件进行复用（尽管组件顺序不同），那么创建和删除节点数量就会变少，这方面的消耗就会下降，带来性能的提升。 总结：性能提升不能只考虑一方面，不是 diff 快了性能就快，不是增删节点少了性能就快，不考虑量级的去评价性能，都只是泛泛而谈。说明：以上描述的「节点」和「组件」其实是同一个东西，只是表达上不同而已。 为什么 Vuex 的 mutation中不能做异步操作因为异步操作是成功还是失败不可预测，什么时候进行异步操作也不可预测；当异步操作成功或失败时，如果不 commit(mutation) 或者 dispatch(action)，Vuex 和 Redux 就不能捕获到异步的结果从而进行相应的操作 因为更改state的函数必须是纯函数，纯函数既是统一输入就会统一输出，没有任何副作用；如果是异步则会引入额外的副作用，导致更改后的state不可预测 Vuex的异步操作可以放在action里面 vue 不推荐for和if嵌套使用原因原因：v-for比v-if优先级高，所以嵌套使用的的话，每次v-for都会执行v-if，造成不必要的计算，影响性能，尤其是当之需要渲染很小一部分的时候。 v-show 与 v-if 有什么区别？v-if 是真正的条件渲染，因为它会确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建；也是惰性的：如果在初始渲染时条件为假，则什么也不做——直到条件第一次变为真时，才会开始渲染条件块。v-show 就简单得多——不管初始条件是什么，元素总是会被渲染，并且只是简单地基于 CSS 的 “display” 属性进行切换。所以，v-if 适用于在运行时很少改变条件，不需要频繁切换条件的场景；v-show 则适用于需要非常频繁切换条件的场景。 vue组件通信方式 props / $emit 适用 父子组件通信 ref 与 $parent / $children 适用 父子组件通信 EventBus （$emit / $on） 适用于 父子、隔代、兄弟组件通信 $attrs/$listeners 适用于 隔代组件通信 provide / inject 适用于 隔代组件通信 Vuex 适用于 父子、隔代、兄弟组件通信 vue组件封装方式全局price价格显示处理方式vue单页应用spa理解，优缺点SPA（ single-page application ）仅在 Web 页面初始化时加载相应的 HTML、JavaScript 和 CSS。一旦页面加载完成，SPA 不会因为用户的操作而进行页面的重新加载或跳转；取而代之的是利用路由机制实现 HTML 内容的变换，UI 与用户的交互，避免页面的重新加载。优点： 用户体验好、快，内容的改变不需要重新加载整个页面，避免了不必要的跳转和重复渲染；基于上面一点，SPA 相对对服务器压力小；前后端职责分离，架构清晰，前端进行交互逻辑，后端负责数据处理； 缺点： 初次加载耗时多：为实现单页 Web 应用功能及显示效果，需要在加载页面的时候将 JavaScript、CSS 统一加载，部分页面按需加载；前进后退路由管理：由于单页应用在一个页面中显示所有的内容，所以不能使用浏览器的前进后退功能，所有的页面切换需要自己建立堆栈管理；SEO 难度较大：由于所有的内容都在一个页面中动态替换显示，所以在 SEO 上其有着天然的弱势。 怎么监听对象某个属性更改 深度监测 1234567891011121314151617new Vue(&#123; data: &#123; count: 10， blog:&#123; title:&apos;my-blog&apos;, categories:[] &#125; &#125;, watch: &#123; blog:&#123; handler(newVal,oldVal)&#123; console.log(`new: $&#123;newVal&#125;, old: $&#123;oldVal&#125;`); &#125;, deep:true &#125; &#125;&#125;) 里面的deep设为了true，这样的话，如果修改了这个blog中的任何一个属性，都会执行handler这个方法。不过这样会造成更多的性能开销，尤其是对象里面属性过多，结构嵌套过深的时候。而且有时候我们就只想关心这个对象中的某个特定属性，这个时候可以这样 用字符串来表示对象的属性调用 1234567891011121314new Vue(&#123; data: &#123; count: 10， blog:&#123; title:&apos;my-blog&apos;, categories:[] &#125; &#125;, watch: &#123; &apos;blog.categories&apos;(newVal, oldVal) &#123; console.log(`new:$&#123;newVal&#125;, old:$&#123;oldVal&#125;`); &#125;, &#125;&#125;) 使用computed计算属性 12345678910111213141516171819new Vue(&#123; data: &#123; count: 10， blog:&#123; title:&apos;my-blog&apos;, categories:[] &#125; &#125;, computed: &#123; categories() &#123; return this.blog.categories; &#125; &#125;, watch: &#123; categories(newVal, oldVal) &#123; console.log(`new:$&#123;newVal&#125;, old:$&#123;oldVal&#125;`); &#125;, &#125;,&#125;) computed 和 watch 的区别和运用的场景？computed： 是计算属性，依赖其它属性值，并且 computed 的值有缓存，只有它依赖的属性值发生改变，下一次获取 computed 的值时才会重新计算 computed 的值；watch： 更多的是「观察」的作用，类似于某些数据的监听回调 ，每当监听的数据变化时都会执行回调进行后续操作；运用场景： 当我们需要进行数值计算，并且依赖于其它数据时，应该使用 computed，因为可以利用 computed 的缓存特性，避免每次获取值时，都要重新计算； 当我们需要在数据变化时执行异步或开销较大的操作时，应该使用 watch，使用 watch 选项允许我们执行异步操作 ( 访问一个 API )，限制我们执行该操作的频率，并在我们得到最终结果前，设置中间状态。这些都是计算属性无法做到的。 Vue 获取初始化数据是放在created还是mounted一般来说，可以在，created，mounted中都可以发送数据请求，但是，大部分时候，会在created发送请求。Created的使用场景：如果页面首次渲染的就来自后端数据。因为，此时data已经挂载到vue实例了。在 created（如果希望首次选的数据来自于后端，就在此处发请求）（只发了异步请求，渲染是在后端响应之后才进行的）、beforeMount、mounted（在mounted中发请求会进行二次渲染） 这三个钩子函数中进行调用。因为在这三个钩子函数中，data 已经创建，可以将服务端端返回的数据进行赋值。但是最常用的是在 created 钩子函数中调用异步请求，因为在 created 钩子函数中调用异步请求 有两个优点：第一点：能更快获取到服务端数据，减少页面 loading 时间；第二点：放在 created 中有助于一致性，因为ssr 不支持 beforeMount 、mounted 钩子函数。 也就是说Vue实例中的data和methods已经可以使用了。但是还没有挂载到页面上。可以在created里面去后端获取数据。 当进入mounted这个生命周期函数。此时页面已经渲染出来，可以进行dom操作。 总而言之。created生命周期函数，可以去后端异步获取数据，并保存到data里面。mounted的话，如果需要在页面上操作dom，就要在这个函数执行。但是注意 mounted 不会承诺所有的子组件也都一起被挂载。如果你希望等到整个视图都渲染完毕，那就需要使用到vm.$nextTick 组件中 data 为什么是一个函数？因为组件是用来复用的，且 JS 里对象是引用关系，如果组件中 data 是一个对象，那么这样作用域没有隔离，子组件中的 data 属性值会相互影响，如果组件中 data 选项是一个函数，那么每个实例可以维护一份被返回对象的独立的拷贝，组件实例之间的 data 属性值不会互相影响；而 new Vue 的实例，是不会被复用的，因此不存在引用对象的问题。 v-model 的原理？我们在 vue 项目中主要使用 v-model 指令在表单 input、textarea、select 等元素上创建双向数据绑定，我们知道 v-model 本质上不过是语法糖，v-model 在内部为不同的输入元素使用不同的属性并抛出不同的事件： text 和 textarea 元素使用 value 属性和 input 事件；checkbox 和 radio 使用 checked 属性和 change 事件；select 字段将 value 作为 prop 并将 change 作为事件。 自定义实现v-model示例 vue-router 路由模式有几种？hash: 使用 URL hash 值来作路由。支持所有浏览器，包括不支持 HTML5 History Api 的浏览器； history : 依赖 HTML5 History API 和服务器配置。具体可以查看 HTML5 History 模式； abstract : 支持所有 JavaScript 运行环境，如 Node.js 服务器端。如果发现没有浏览器的 API，路由会自动强制进入这个模式. 能说下 vue-router 中常用的 hash 和 history 路由模式实现原理吗？（1）hash 模式的实现原理早期的前端路由的实现就是基于 location.hash 来实现的。其实现原理很简单，location.hash 的值就是 URL 中 # 后面的内容。比如下面这个网站，它的 location.hash 的值为 ‘#search’：https://www.word.com#search复制代码hash 路由模式的实现主要是基于下面几个特性： URL 中 hash 值只是客户端的一种状态，也就是说当向服务器端发出请求时，hash 部分不会被发送；hash 值的改变，都会在浏览器的访问历史中增加一个记录。因此我们能通过浏览器的回退、前进按钮控制hash 的切换；可以通过 a 标签，并设置 href 属性，当用户点击这个标签后，URL 的 hash 值会发生改变；或者使用 JavaScript 来对 loaction.hash 进行赋值，改变 URL 的 hash 值；我们可以使用 hashchange 事件来监听 hash 值的变化，从而对页面进行跳转（渲染）。 （2）history 模式的实现原理HTML5 提供了 History API 来实现 URL 的变化。其中做最主要的 API 有以下两个：history.pushState() 和 history.repalceState()。这两个 API 可以在不进行刷新的情况下，操作浏览器的历史纪录。唯一不同的是，前者是新增一个历史记录，后者是直接替换当前的历史记录，如下所示：window.history.pushState(null, null, path);window.history.replaceState(null, null, path);复制代码history 路由模式的实现主要基于存在下面几个特性： pushState 和 repalceState 两个 API 来操作实现 URL 的变化 ；我们可以使用 popstate 事件来监听 url 的变化，从而对页面进行跳转（渲染）；history.pushState() 或 history.replaceState() 不会触发 popstate 事件，这时我们需要手动触发页面跳转（渲染）。 Vue 框架怎么实现对象和数组的监听？如果被问到 Vue 怎么实现数据双向绑定，大家肯定都会回答 通过 Object.defineProperty() 对数据进行劫持，但是 Object.defineProperty() 只能对属性进行数据劫持，不能对整个对象进行劫持，同理无法对数组进行劫持，但是我们在使用 Vue 框架中都知道，Vue 能检测到对象和数组（部分方法的操作）的变化，那它是怎么实现的呢？我们查看相关代码如下：复制代码通过以上 Vue 源码部分查看，我们就能知道 Vue 框架是通过遍历数组 和递归遍历对象，从而达到利用 Object.defineProperty() 也能对对象和数组（部分方法的操作）进行监听。 12345678910111213/*** Observe a list of Array items.*/observeArray (items: Array&lt;any&gt;) &#123; for (let i = 0, l = items.length; i &lt; l; i++) &#123; observe(items[i]) // observe 功能为监测数据的变化 &#125;&#125;/*** 对属性进行递归遍历*/let childOb = !shallow &amp;&amp; observe(val) // observe 功能为监测数据的变化 Proxy 与 Object.defineProperty 优劣对比Proxy 的优势如下: Proxy 可以直接监听对象而非属性；Proxy 可以直接监听数组的变化；Proxy 有多达 13 种拦截方法,不限于 apply、ownKeys、deleteProperty、has 等等是 Object.defineProperty 不具备的；Proxy 返回的是一个新对象,我们可以只操作新的对象达到目的,而 Object.defineProperty 只能遍历对象属性直接修改；Proxy 作为新标准将受到浏览器厂商重点持续的性能优化，也就是传说中的新标准的性能红利； Object.defineProperty 的优势如下: 兼容性好，支持 IE9，而 Proxy 的存在浏览器兼容性问题,而且无法用 polyfill 磨平，因此 Vue 的作者才声明需要等到下个大版本( 3.0 )才能用 Proxy 重写。 异步路由扩展跨端开发框架，及优劣势linux命令shell脚本git命令一般项目结构怎么划分，自行拓展过什么]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>面试</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序日常技巧]]></title>
    <url>%2Fblog%2F2020%2F08%2F14%2FJS%2Fwepy%E4%BD%BF%E7%94%A8%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[wepy保存没有实时编译 wepy中除了页面的其他组件，必须放在components文件夹下面，才能触发实时编译，否则每次都需要在引入组件的页面保存一次才能编译。 hidden不生效 hidden不生效问题，其节点必须是块级元素display:block 组件循环 循环子组件时，页面源码应该能看到具体的循环个数，如果只有一个，要检查是否用repeat循环，而不是用微信原生的循环方式 原生循环拿不到item数据问题 repeat已成功渲染子组件，子组件再循环渲染数据，无论怎样都不显示，检查页面是否有微信原生循环渲染，导致子组件内item无法识别的问题 wepy中借鉴网址hidden不生效问题]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>微信小程序</tag>
        <tag>wepy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[uni-app调试微信小程序]]></title>
    <url>%2Fblog%2F2020%2F08%2F06%2FJS%2Funi-app%E8%B0%83%E8%AF%95%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[HbuilderX无法唤起微信开发工具 需要先打开微信开发工具，设置 -&gt; 通用设置 -&gt; 安全 -&gt; 开启服务端口 初次运行报错 需要设置appid]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>小程序</tag>
        <tag>uni-app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sourcetree克隆远程仓库]]></title>
    <url>%2Fblog%2F2020%2F08%2F06%2FGit%2Fsourcetree%E5%85%8B%E9%9A%86%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%2F</url>
    <content type="text"><![CDATA[克隆远程仓库失败 报错信息这是一个无效的源路径，报错代码为SSL certificate problem: self signed certificate 解决方案设置全局忽略SSL认证，命令行执行git config --global http.sslVerify false]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>ssl</tag>
        <tag>sourcetree</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AnyDesk直连]]></title>
    <url>%2Fblog%2F2020%2F08%2F06%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2FAnyDesk%E7%9B%B4%E8%BF%9E%2F</url>
    <content type="text"><![CDATA[问题 如果两个设备不在同一个局域网，那么anydesk通过九位数id连接就会非常卡，完全无法正常使用. 解决方案 搭配frp内网穿透教程 IP直连（有公网IP） 端口映射，默认7070端口，将受控客户端的7070端口映射到公网7070端口 通过公网ip加端口直连]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>anydesk</tag>
        <tag>centos</tag>
        <tag>远程桌面</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AnyDesk搭配frp远程连接]]></title>
    <url>%2Fblog%2F2020%2F08%2F05%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2FAnyDesk%E6%90%AD%E9%85%8Dfrp%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%2F</url>
    <content type="text"><![CDATA[服务器frps 安装frp服务端 cd /usr/local进入/usr/local目录 wget https://github.com/fatedier/frp/releases/download/v0.29.0/frp_0.29.0_linux_amd64.tar.gz下载frp服务器压缩包 tar xzvf frp_0.29.0_linux_amd64.tar.gz解压压缩包 cd frp_0.29.0_linux_amd64进入frp目录，当前目录为/usr/local/frp_0.29.0_linux_amd64 配置frps.ini1234# frps.ini[common]bind_port = 7000#token = sDesQJk@KlO #客户端连接服务器端的口令，设置了之后验证失败，所以暂时取消验证 设置开机启动 vi /etc/systemd/system/frps.service 新建此文件，并写入以下内容 1234567891011[Unit] Description=frps daemon [Service] Type=simple #启动服务的命令（此处写你的frps的实际安装目录） ExecStart=/usr/local/frp_0.29.0_linux_amd64/frps -c /usr/local/frp_0.29.0_linux_amd64/frps.ini [Install] WantedBy=multi-user.target sudo systemctl start frps启动frps sudo systemctl enable frps自启动1234#其他相关命令sudo systemctl restart frps #重启sudo systemctl stop frps #停止sudo systemctl status frps #查看应用日志 iptables开放端口如果未设置防火墙限制端口访问，该步骤省略1234# frp服务器，有多少需要开放的端口就添加多少条并替换其中的端口号-A INPUT -p tcp -m state --state NEW -m tcp --dport 7000 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 7070 -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 7080 -j ACCEPT 受控客户端 安装anydesk 下载frp客户端我是windows端的，下载后，解压压缩包。 配置frpc.ini12345678910[common]server_addr = x.x.x.x #服务器地址server_port = 7000 #服务器端口#token = sDesQJk@KlO #连接服务端口令,设置了之后验证失败，所以暂时取消验证[ssh]type = tcplocal_ip = 127.0.0.1local_port = 7070 #要穿透的本地端口remote_port = 7080 #服务器暴露到外网的端口，同时服务器需要开放该端口 启动frpc 在当前目录下打开cmd命令行工具 执行./frpc -c ./frpc.ini命令，否则要配置path环境变量（注意此处windows必须加上./否则无法运行） 受控端anydesk设置 配置自主访问密码 允许直接连接，并保证端口与frpc.ini内本地端口配置一致 控制客户端 安装anydesk 输入地址：端口，连接 网络拓扑 网络拓扑理解如下，受控客户端的AnyDesk服务在本地监听7070端口，frp服务将其映射到云服务器的7080端口。控制客户端连接云服务器的7080端口，就会被frp转发到受控客户端的7070端口，此时受控客户端的AnyDesk收到连接请求，就这样实现远程桌面内网的穿透。 借鉴网址AnyDesk with Frp 突破内网的远程桌面frp实现内网穿透并配置自动启动frp怎样开机启动和后台运行? =&gt; piiiiiiiiiiiiiii回答]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>anydesk</tag>
        <tag>centos</tag>
        <tag>远程桌面</tag>
        <tag>frp</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js连续赋值]]></title>
    <url>%2Fblog%2F2020%2F06%2F11%2FJS%2Fjs%E8%BF%9E%E7%BB%AD%E8%B5%8B%E5%80%BC%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223// 赋值给ａ一个引用类型var a = &#123;n:1&#125;;// 拷贝给ｂ，ｂ指向&#123;n:1&#125;var b = a;/*根据js引擎语法解析，从左向右寻找有没有未声明的变量，如果有将该变量提升至作用域顶部并声明该变量．因为a.x不存在，而ａ指向是是&#123;n:1&#125;因此在&#123;n:1&#125;的内存区声明了ｘ属性；而ｘ属性指向的是ａ指向的内存区．后面a=&#123;n:2&#125;,将ａ指向了一个新的内存区&#123;n:2&#125;;而ｂ指向&#123;n:1&#125;所在的内存区，故ｂ拥有了ｘ属性*/a.x = a = &#123;n:2&#125;; console.log(a);console.log(b);console.log(a.x);console.log(b.x) // &#123; n: 2 &#125;// &#123; n: 1, x: &#123; n: 2 &#125; &#125;// undefined// &#123; n: 2 &#125; 借鉴网址js连续赋值（面试题]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos搭建v2ray]]></title>
    <url>%2Fblog%2F2020%2F06%2F05%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%90%AD%E5%BB%BAv2ray%2F</url>
    <content type="text"><![CDATA[阿里云香港主机 购买地址 一键DD脚本，重装厂商自带的系统(脚本备份) 1.默认的用户名和密码，再选择系统后会自动给出，注意记一下！！！ 1wget --no-check-certificate -O AutoReinstall.sh https://git.io/AutoReinstall.sh &amp;&amp; bash AutoReinstall.sh 如果有以下报错根据提示信息显示，远程主机的公钥已被更改，因此无法连接远程主机。在使用 ssh 连接时，会将远程主机提供的公钥存储在本地 $HOME/.ssh/known_hosts 文件中。而如果远程主机的公钥信息被更改了，则由于本地公钥信息与远程主机的不匹配而无法连接，此时只需删除本地存储的公钥信息即可。按如下操作删除原有公钥后再次连接，提示询问时输入 yes 即可登录远程主机 1ssh-keygen -R 阿里云主机地址(xxx.xxx.xxx.xxx) 修改默认密码passwd 服务器安装v2ray 一键安装命令,安装完成后可以通过v2ray管理V2Ray(脚本备份) 1bash &lt;(curl -s -L https://git.io/v2ray.sh) v2ray配置成功，客户端连接不上报错context deadline exceeded,必须关闭防火墙（或者开启对应v2ray端口和ss端口） 12345systemctl status firewalld.service #查看防火墙状态systemctl stop firewalld.service #执行停止运行防火墙命令systemctl disable firewalld.service #禁止防火墙自启动 防火墙其他命令 12systemctl start firewalld.service #启动systemctl enable firewalld.service #开机启动 v2ray设置 开启bbr加速,v2ray,然后选择11其他，安装bbr即可 tcl协议最快，但是容易被检测 ws + tls目前来说较为安全一些，申请一个域名，然后将域名解析指向服务器ip地址，然后脚本可以自动配置tls，只需要正确输入你的域名即可。 windows客户端配置 服务器-添加vmess服务器-配置信息（可以在服务器查看对应信息） 参数设置-core基础设置-PAC或者全局选择 PAC =&gt; 参数设置-core路由设置-域名策略(AsIs) PAC =&gt; 参数设置-core路由设置-点击一键设置默认自定义路由规则生成默认规则（即代理指定的网址例如google,youtube）123456789// 常用自定义pac规则v2ex.com,vultr.com,getadblock.com,github.blog,github.com,tiktok.com,cloudflare.com,speedtest.net Android客户端配置 配置-设置-路由设置-AsIs,绕过局域网及大陆地址（此步骤设置后需要服务重启才能生效） 借鉴网址V2Ray 一键安装脚本V2Ray 客户端下载导航地址V2Ray 安卓客户端V2Ray Windows客户端]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>ss</tag>
        <tag>shadowsocks</tag>
        <tag>varay</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[js浮点数计算精度丢失解决方案]]></title>
    <url>%2Fblog%2F2020%2F04%2F27%2FJS%2Fjs%E6%B5%AE%E7%82%B9%E6%95%B0%E8%AE%A1%E7%AE%97%E7%B2%BE%E5%BA%A6%E4%B8%A2%E5%A4%B1%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%2F</url>
    <content type="text"><![CDATA[封装方法12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758//相加function add(a, b) &#123; var c, d, e; try &#123; c = a.toString().split(".")[1].length; &#125; catch (f) &#123; c = 0; &#125; try &#123; d = b.toString().split(".")[1].length; &#125; catch (f) &#123; d = 0; &#125; return e = Math.pow(10, Math.max(c, d)), (mul(a, e) + mul(b, e)) / e;&#125;//相减function sub(a, b) &#123; var c, d, e; try &#123; c = a.toString().split(".")[1].length; &#125; catch (f) &#123; c = 0; &#125; try &#123; d = b.toString().split(".")[1].length; &#125; catch (f) &#123; d = 0; &#125; return e = Math.pow(10, Math.max(c, d)), (mul(a, e) - mul(b, e)) / e;&#125;//相乘function mul(a, b) &#123; var c = 0, d = a.toString(), e = b.toString(); try &#123; c += d.split(".")[1].length; &#125; catch (f) &#123;&#125; try &#123; c += e.split(".")[1].length; &#125; catch (f) &#123;&#125; return Number(d.replace(".", "")) * Number(e.replace(".", "")) / Math.pow(10, c);&#125;//相除function div(a, b) &#123; var c, d, e = 0, f = 0; try &#123; e = a.toString().split(".")[1].length; &#125; catch (g) &#123;&#125; try &#123; f = b.toString().split(".")[1].length; &#125; catch (g) &#123;&#125; return c = Number(a.toString().replace(".", "")), d = Number(b.toString().replace(".", "")), mul(c / d, Math.pow(10, f - e));&#125; 调用方法12//注意这里是以参数形式传递进去add(0.1, 0.2);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[微信小程序日常技巧]]></title>
    <url>%2Fblog%2F2020%2F04%2F10%2FJS%2F%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[安卓更新微信后小程序字体不居中 开发者工具表现正常，安卓真机老版本微信正常显示，升级后文本显示偏上 所有有问题得地方都为line-height来设置垂直居中123456/* 所有需要用到文本居中的地方都是用flex来解决 */.text-center&#123; display: flex; align-items: center; justify-content: center;&#125; scroll-view无法触发bindscrolltolower上拉加载 如果scroll-view在页面最顶层 123456page&#123; height: 100%;&#125;.scroll-view-class&#123; height: 100%;&#125; 如果scroll-view作为子组件被嵌套多层（或者包含第三方UI框架），此时没办法保证所有父节点都是height: 100%; 1234567891011121314151617//已知明确高度(假定页面其他元素明确高度100px或者200rpx两种类型)wx.getSystemInfo(&#123; success:(res=&gt;&#123; let otherHeight = 200 / 750 * res.windowWidth; this.scrollH = (res.windowHeight - otherHeight) + 'px'; &#125;)&#125;);//未知高度，通过createSelectorQuery方法动态获取scroll-view高度（如果scroll-view内是数据请求的，需要在获取到数据渲染页面之后再设置高度）onReady()&#123; let query = wx.createSelectorQuery(); query.select('.scroll-box').boundingClientRect(rect=&gt;&#123; console.log(rect); this.scrollHeight = rect.height; console.log(this.scrollHeight); &#125;).exec();&#125; 两个请求同时发出，都未登录同时跳转登录页面处理方法 一般用于请求中登录失效，跳转到登录页（某个页面同时发出两个请求）1234567891011121314//防止多次跳转let pages = getCurrentPages();if(pages[pages.length - 1].route != 'pages/auth/login')&#123; if(wepy.$instance.globalData.login)&#123; return; &#125; wepy.$instance.globalData.login = true; wx.navigateTo(&#123; url: '/pages/auth/login', complete: (result)=&gt;&#123; wepy.$instance.globalData.login = false; &#125; &#125;);&#125; wepy报错 报错信息unexpected attribute name, near .sync(包括.once) 问题一,是否有components，并且必须是等号 123components = &#123;&#125; 问题二,组件引入方式(首先必须引入组件，并且在components中设置，同时一定不能包含.wpy后缀) 1import CollectProduct from '../../components/list/collectProduct'; 问题三,组件引入写法必须一致 1234567891011121314151617181920212223components = &#123; collectProduct: CollectProduct, shopItem: ShopItem, productRefreshList: ProductRefreshList, shopRefreshList: ShopRefreshList,&#125;/*components = &#123; collectProduct: CollectProduct, shopItem: ShopItem, ProductRefreshList: ProductRefreshList, ShopRefreshList: ShopRefreshList,&#125;1.大小写不一直，报错components = &#123; collectProduct: CollectProduct, shopItem: ShopItem, productRefreshList, shopRefreshList,&#125;2.简写，报错*/ 问题四,组件嵌套组件报错（我遇到的问题就是这个，两个自定义组件中必须要添加一个节点，这里也可以是&lt;block&gt;&lt;/block&gt;） 12345&lt;productRefreshList :height.sync="scrollH" hidden="&#123;&#123;!collectTypeList[0].active&#125;&#125;"&gt; &lt;view slot="item"&gt; &lt;collectProduct :list.sync="productList" slot="item"/&gt; &lt;/view&gt;&lt;/productRefreshList&gt; vant weapp框架van-datetime-picker组件源码警告 警告信息does not look like a valid key name (did you mean wx:key=&quot;&quot; ?) 其中原因是因为微信改了wx:key的写法，但是修改之后任然报错wx:key=&quot; index &quot;,重点就是index旁边的两个空格，也会导致同样的警告信息，所以最终写法为wx:key=&quot;index&quot; wepy中不能使用selectComponent方法 报错信息this.selectComponent is not a function123//this.$wxpage才能获取到selectComponent方法const picker = this.$wxpage.selectComponent('#js_picker');picker.setColumnIndex(0, this.currentChoose); 微信小程序相同的rpx呈现效果高度不一致 两个组件，如果一个高度为120rpx,另外一个为子元素80rpx再加上下内边距20rpx，其高度渲染出来是不一致的，如果需要保持一致需要同样的DOM层级高度 上拉加载更多在van-tab中需要动态计算高度swiper根据图片自适应高度 微信swiper组件默认高度都是150px,如果要让高度根据图片比例来自适应，需要在初始化的时候，根据设备宽度动态计算图片高度12345uni.getSystemInfo(&#123; success: (res)=&gt; &#123; this.swiperHeight = res.windowWidth * (200 / 375) + 'px'; //200 / 375为图片比例 &#125;&#125;);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[验证码倒计时]]></title>
    <url>%2Fblog%2F2020%2F03%2F20%2FJS%2F%E9%AA%8C%E8%AF%81%E7%A0%81%E5%80%92%E8%AE%A1%E6%97%B6%2F</url>
    <content type="text"><![CDATA[html结构12345&lt;li class="code"&gt; &lt;span&gt;验证码&lt;/span&gt; &lt;input id="js_code" type="number" maxlength="11" placeholder="请输入验证码" /&gt; &lt;button id="js_get_code_btn"&gt;获取验证码&lt;/button&gt;&lt;/li&gt; js逻辑12345678910111213$("#js_get_code_btn").click(function()&#123; $(this).attr("disabled", true); var time = 60; var timer = setInterval(function()&#123; time--; $("#js_get_code_btn").text(time + "s后可重发"); if(time == 0)&#123; clearInterval(timer); $("#js_get_code_btn").text("获取验证码"); $("#js_get_code_btn").removeAttr("disabled"); &#125; &#125;,1000);&#125;);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[实时监听input值的实时改变]]></title>
    <url>%2Fblog%2F2020%2F03%2F20%2FJS%2F%E5%AE%9E%E6%97%B6%E7%9B%91%E5%90%ACinput%E5%80%BC%E7%9A%84%E5%AE%9E%E6%97%B6%E6%94%B9%E5%8F%98%2F</url>
    <content type="text"><![CDATA[html结构123456789101112131415&lt;!-- register内容开始 --&gt;&lt;ul class="bash-box register-box"&gt; &lt;li&gt; &lt;span&gt;手机号&lt;/span&gt; &lt;input id="js_tel" type="number" maxlength="11" placeholder="请输入手机号" /&gt; &lt;/li&gt; &lt;li class="code"&gt; &lt;span&gt;验证码&lt;/span&gt; &lt;input id="js_code" type="number" maxlength="11" placeholder="请输入验证码" /&gt; &lt;button id="js_get_code_btn"&gt;获取验证码&lt;/button&gt; &lt;/li&gt;&lt;/ul&gt;&lt;!-- register内容结束 --&gt;&lt;a class="wx-register-btn"&gt;一键注册&lt;/a&gt; js逻辑1234567891011//因为当前页面就两个input，所以这里直接用的属性名选择器$('input').bind('input propertychange', function() &#123; var tel = $("#js_tel").val(); var code = $("#js_code").val(); if(tel &amp;&amp; code)&#123; $(".wx-register-btn").addClass("active"); &#125;else&#123; $(".wx-register-btn").removeClass("active"); &#125;&#125;); 分析 onchange事件是在输入框失去焦点onblur时候触发，不符合实时改变。 keyPress在Android可以触发，iOS不可以。(keyDown和keyUp可以)。 js动态改变input值不触发propertychange 使用Js动态改变input的值时，没有任何鼠标和键盘的事件，所以并不能触发监听 解决办法是在Js改变这个值之前加上以下代码。1$("#inputId").trigger("input");]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[选中列表中第一个带指定类名的元素]]></title>
    <url>%2Fblog%2F2020%2F03%2F20%2FCss%2F%E9%80%89%E4%B8%AD%E5%88%97%E8%A1%A8%E4%B8%AD%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%B8%A6%E6%8C%87%E5%AE%9A%E7%B1%BB%E5%90%8D%E7%9A%84%E5%85%83%E7%B4%A0%2F</url>
    <content type="text"><![CDATA[html结构12345678&lt;div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt;&lt;/div&gt; css实现1234567/*举例默认背景颜色黑色，选中要设置为白色。*/.selected&#123; background: #fff;&#125;.selected ~ .selected&#123; background: #000;&#125; ~选择器 表示某元素后所有同级的指定元素，强调所有的。 demo123456789101112131415161718192021222324252627282930313233&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .item&#123; width: 100px; height: 100px; background: red; float: left; margin-left: 10px; &#125; .selected&#123; background: #000; &#125; .selected ~ .selected&#123; background: red; &#125; &lt;/style&gt;&lt;/head&gt;&lt;body&gt; &lt;div class="test"&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;div class="item selected"&gt;&lt;/div&gt; &lt;div class="item"&gt;&lt;/div&gt; &lt;/div&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[root无法登陆ssh]]></title>
    <url>%2Fblog%2F2020%2F03%2F16%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Froot%E6%97%A0%E6%B3%95%E7%99%BB%E9%99%86ssh%2F</url>
    <content type="text"><![CDATA[问题 Linux无法远程，返回信息：Permission denied, please try again 分析 一般这样的信息，第一个反应就是账号和密码不正确。但这个问题场景，账号和密码信息准确无误，使用终端方式登录没有任何问题，主机内部没有限制该账号远程登陆。 处理这个问题最好的分析方法就是查看系统登录日志。（举例：centos 系统可以查看 /var/log/secure日志） 从中可以看到这样的记录：pam_tally2(sshd:auth): user xxxxxx (500) tally 74, deny 5 （账号登录失败次数过多导致被锁定） 解决pam_tally2 --reset -u root 解锁即可(这里root也可以对应其他被锁定的账号)]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[(a===1&&a===2&&a===3)成立]]></title>
    <url>%2Fblog%2F2020%2F03%2F12%2FJS%2F(a%3D%3D%3D1%26%26a%3D%3D%3D2%26%26a%3D%3D%3D3)%E6%88%90%E7%AB%8B%2F</url>
    <content type="text"><![CDATA[思路 Object.defineProperty的get方式实现 实现一12345678910window.recordVaule = 1;Object.defineProperty(window, "a", &#123; get() &#123; return window.recordVaule++; &#125;&#125;);if (a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3) &#123; console.log("a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3成立了!");&#125; 实现二12window.a = 1;console.log(!(a === 1 &amp;&amp; a === 2 &amp;&amp; a === 3));]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小程序中flex字体居中]]></title>
    <url>%2Fblog%2F2019%2F12%2F29%2FJS%2F%E5%B0%8F%E7%A8%8B%E5%BA%8F%E4%B8%ADflex%E5%AD%97%E4%BD%93%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[flex布局文本无法居中 原因是因为display: inline-block行内元素，如果是块级元素flex布局是可以居中的1234567891011121314151617&lt;style lang="less"&gt;.step-index&#123; width: 30rpx; height: 30rpx; background: #D2D2D2; border-radius: 100%; font-size: 16rpx; color: #fff; display: flex; align-items: center; justify-content: center;&#125;&lt;/style&gt;&lt;template&gt; &lt;view class="step-index"&gt;1&lt;/view&gt;&lt;/template&gt; 文本类行内元素采用line-height123456789101112131415161718&lt;style lang="less"&gt;.step-index&#123; width: 30rpx; height: 30rpx; line-height: 30rpx; background: #D2D2D2; border-radius: 100%; font-size: 16rpx; color: #fff; display: flex; align-items: center; justify-content: center;&#125;&lt;/style&gt;&lt;template&gt; &lt;view class="step-index"&gt;1&lt;/view&gt;&lt;/template&gt;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode中wepy初始化代码片段]]></title>
    <url>%2Fblog%2F2019%2F12%2F27%2FJS%2Fvscode%E4%B8%ADwepy%E5%88%9D%E5%A7%8B%E5%8C%96%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5%2F</url>
    <content type="text"><![CDATA[vscode中wepy-page初始化代码片段123456789101112131415161718192021222324252627282930313233343536373839404142&#123; "WePY Class": &#123; "prefix": "wepy", "body": [ "&lt;style lang=\"less\"&gt;", "view,scroll-view,swiper,swiper-item,movable-area,movable-view,cover-view,cover-image,icon,text,rich-text,progress,button,checkbox-group,checkbox,form,input,label,picker,picker-view,radio-group,radio,slider,switch,textarea,navigator,functional-page-navigator,image,video,camera,live-player,live-pusher,map,canvas,open-data,web-view,ad&#123;", " box-sizing: border-box;", "&#125;", "", "&lt;/style&gt;", "&lt;template&gt;", " &lt;view class=\"container\"&gt;", "", " &lt;view&gt;$TM_FILENAME_BASE&lt;/view&gt;", "", " &lt;/view&gt;", "&lt;/template&gt;", "", "&lt;script&gt;", "import wepy from 'wepy';", "export default class $TM_FILENAME_BASE extends wepy.page &#123;", " config = &#123;", " navigationBarTitleText: '$TM_FILENAME_BASE',", " &#125;", "", " components = &#123;", "", " &#125;", "", " data = &#123;", "", " &#125;", "", " methods = &#123;", "", " &#125;", "&#125;", "&lt;/script&gt;", ] &#125;&#125; vscode中wepy-component初始化代码片段123456789101112131415161718192021222324252627282930313233&#123; "WePY Component Class": &#123; "prefix": "wepy component", "body": [ "&lt;style lang=\"less\"&gt;", "view,scroll-view,swiper,swiper-item,movable-area,movable-view,cover-view,cover-image,icon,text,rich-text,progress,button,checkbox-group,checkbox,form,input,label,picker,picker-view,radio-group,radio,slider,switch,textarea,navigator,functional-page-navigator,image,video,camera,live-player,live-pusher,map,canvas,open-data,web-view,ad&#123;", " box-sizing: border-box;", "&#125;", "", "&lt;/style&gt;", "&lt;template&gt;", " &lt;view&gt;$TM_FILENAME_BASE&lt;/view&gt;", "&lt;/template&gt;", "", "&lt;script&gt;", "import wepy from 'wepy';", "export default class $TM_FILENAME_BASE extends wepy.component &#123;", " props = &#123;", "", " &#125;", "", " data = &#123;", "", " &#125;", "", " methods = &#123;", "", " &#125;", "&#125;", "&lt;/script&gt;", ] &#125;&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>ide</tag>
        <tag>小程序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue单个页面不缓存问题]]></title>
    <url>%2Fblog%2F2019%2F12%2F19%2FJS%2Fvue%E5%8D%95%E4%B8%AA%E9%A1%B5%E9%9D%A2%E4%B8%8D%E7%BC%93%E5%AD%98%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[前置条件1234567&lt;template&gt; &lt;transition :name="transitionName"&gt; &lt;keep-alive&gt; &lt;router-view&gt;&lt;/router-view&gt; &lt;/keep-alive&gt; &lt;/transition&gt;&lt;/template&gt; 某个页面不缓存 缓存会造成页面mounted再次进入时不会触发，当前页面数据会保留之前状态。 解决办法一(重载) 粗暴的直接重载页面，用户体验不好1window.location.reload(); 解决办法二(手动触发和清空数据) 1.由于添加&lt;keep-alive&gt;之后mounted不执行，只有activated,deactivated会执行 123activated() &#123; this.dosomething();&#125; 2.如果是vuex数据源，手动触发重置vuex数据，如果是当前页面data,手动在当前页面重置 12345678910111213141516171819202122232425262728293031323334//需要注意的是如果是vuex数据源重置，不能直接重置state，需要重置依次重置state的各个属性[LOGOUT_PASSWORD](state)&#123; state.passwordList = &#123; social: &#123; isRequest: false, data: [] &#125;, shopping: &#123; isRequest: false, data: [] &#125;, life: &#123; isRequest: false, data: [] &#125;, work: &#123; isRequest: false, data: [] &#125;, other: &#123; isRequest: false, data: [] &#125; &#125;; state.activeType = "social"; state.editPasswordData = &#123; index: 0, data: &#123;&#125; &#125;; //该重置方法不生效 // for (var i in initState) &#123; // state[i] = initState[i] // 递归赋值 // &#125;&#125; 解决方法三(手动销毁，未验证) 由于添加&lt;keep-alive&gt;之后mounted不执行，只有activated,deactivated会执行// 禁止缓存数据 防止下次选择数据不更新 deactivated () { this.$destroy(true) }]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[google验证码reCAPTCHA服务]]></title>
    <url>%2Fblog%2F2019%2F12%2F13%2FJS%2Fgoogle%E9%AA%8C%E8%AF%81%E7%A0%81reCAPTCHA%E6%9C%8D%E5%8A%A1%2F</url>
    <content type="text"><![CDATA[首先注册google验证码reCAPTCHA服务 需要翻墙，注册地址 本地测试需要配置域名127.0.0.1或者localhost 前端配置1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt;&lt;head&gt; &lt;meta charset="UTF-8"&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0"&gt; &lt;meta http-equiv="X-UA-Compatible" content="ie=edge"&gt; &lt;title&gt;Document&lt;/title&gt;&lt;/head&gt;&lt;body&gt; &lt;div id="recaptcha" class="g-recaptcha"&gt;&lt;/div&gt; &lt;div id="click"&gt;重置&lt;/div&gt;&lt;/body&gt;&lt;/html&gt;&lt;script src="https://www.recaptcha.net/recaptcha/api.js?onload=onloadCallback&amp;render=explicit" async defer&gt;&lt;/script&gt;&lt;script type="text/javascript"&gt;var verifyCallback = function(response) &#123; //发送ajax请求进行后端判定 //成功继续，失败重置grecaptcha.reset();&#125;;var onloadCallback = function() &#123; grecaptcha.render('recaptcha', &#123; 'sitekey' : '6Ld2hscUAAAAAPymzwE-ql47Kut-yYxOkExKg8Uy', 'callback': verifyCallback &#125;);&#125;;//手动重置document.getElementById('click').onclick = function()&#123; grecaptcha.reset();&#125;;&lt;/script&gt; 服务端自行配置延申资料 google验证码reCAPTCHA服务前端镜像 1https://www.google.com/recaptcha/api.js =&gt; https://www.recaptcha.net/recaptcha/api.js google验证码reCAPTCHA服务后端镜像 1https://www.google.com/recaptcha/api/siteverify =&gt; https://www.recaptcha.net/recaptcha/api/siteverify github地址https://github.com/google/recaptcha 示例地址https://recaptcha-demo.appspot.com/]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[es5类相关知识]]></title>
    <url>%2Fblog%2F2019%2F12%2F11%2FJS%2Fes5%E7%B1%BB%E7%9B%B8%E5%85%B3%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[创建类12345678function Person(name, age, sex)&#123; this.name = name || '我是默认姓名'; this.age = age || 20; this.sex = sex || '男性'; this.run = function()&#123; console.log(this.name + '在跑步'); &#125;&#125; 实例化类 实例化可以获取this，类的属性和方法1234567891011function Person(name, age, sex)&#123; this.name = name || '我是默认姓名'; this.age = age || 20; this.sex = sex || '男性'; this.run = function()&#123; console.log(this.name + '在跑步'); &#125;&#125;var people = new Person(); //实例化people.run(); //调用内置run方法 静态方法 不需要实例化类都可以使用的类的方法 静态方法不能调用this,不能获取类的属性和方法1234567891011121314function Person(name, age, sex)&#123; this.name = name || '我是默认姓名'; this.age = age || 20; this.sex = sex || '男性'; this.run = function()&#123; console.log(this.name + '在跑步'); &#125;&#125;Person.doStaticFunc = function()&#123; console.log('我是静态方法');&#125;Person.doStaticFunc(); //调用静态方法]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[$.ajax请求成功也进入error]]></title>
    <url>%2Fblog%2F2019%2F12%2F11%2FJS%2F%24.ajax%E8%AF%B7%E6%B1%82%E6%88%90%E5%8A%9F%E4%B9%9F%E8%BF%9B%E5%85%A5error%2F</url>
    <content type="text"><![CDATA[问题 无论是使用zepot或者jquery的ajax方法，请求服务器在F12中都是200成功状态，但是都是进入error回调函数12345678910111213$.ajax(&#123; type: 'POST', url: url, dataType: 'json', success: function(data)&#123; if(data.code = 200)&#123; console.log('请求成功'); &#125; &#125;, error: function(err)&#123; console.log('请求失败'); &#125;,&#125;) 通过打印error中err信息，查看到请求状态是404,并且控制台有跨域提示 解决方法 1.首先必须保证同源，不跨域，否则即便所有配置都正确还是会进入error 2.如果保证不跨域情况下还有这个问题，大概率是dataType类型不匹配造成的，服务器返回的json格式不正确，导致解析失败进入error(排除这个问题的办法，dataType设置为’text’，同时让服务器返回纯文本，如果进入success则可以确定是服务器返回数据格式问题。) 排除2问题的前提是必须同源！！！否则即便服务器返回数据格式正确还是会进入error.]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[TypeScript在vscode中自动编译]]></title>
    <url>%2Fblog%2F2019%2F12%2F06%2FJS%2FTypeScript%E5%9C%A8vscode%E4%B8%AD%E8%87%AA%E5%8A%A8%E7%BC%96%E8%AF%91%2F</url>
    <content type="text"><![CDATA[初始化配置文件 在对应的项目根目录下运行命令行工具,执行命令tsc --init,会生成一个tsconfig.json配置文件123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&#123; "compilerOptions": &#123; /* Basic Options */ // "incremental": true, /* Enable incremental compilation */ "target": "es5", /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019' or 'ESNEXT'. */ "module": "commonjs", /* Specify module code generation: 'none', 'commonjs', 'amd', 'system', 'umd', 'es2015', or 'ESNext'. */ // "lib": [], /* Specify library files to be included in the compilation. */ // "allowJs": true, /* Allow javascript files to be compiled. */ // "checkJs": true, /* Report errors in .js files. */ // "jsx": "preserve", /* Specify JSX code generation: 'preserve', 'react-native', or 'react'. */ // "declaration": true, /* Generates corresponding '.d.ts' file. */ // "declarationMap": true, /* Generates a sourcemap for each corresponding '.d.ts' file. */ // "sourceMap": true, /* Generates corresponding '.map' file. */ // "outFile": "./", /* Concatenate and emit output to single file. */ "outDir": "./js", /* 输出目录 */ // "rootDir": "./", /* Specify the root directory of input files. Use to control the output directory structure with --outDir. */ // "composite": true, /* Enable project compilation */ // "tsBuildInfoFile": "./", /* Specify file to store incremental compilation information */ // "removeComments": true, /* Do not emit comments to output. */ // "noEmit": true, /* Do not emit outputs. */ // "importHelpers": true, /* Import emit helpers from 'tslib'. */ // "downlevelIteration": true, /* Provide full support for iterables in 'for-of', spread, and destructuring when targeting 'ES5' or 'ES3'. */ // "isolatedModules": true, /* Transpile each file as a separate module (similar to 'ts.transpileModule'). */ /* Strict Type-Checking Options */ "strict": true, /* Enable all strict type-checking options. */ // "noImplicitAny": true, /* Raise error on expressions and declarations with an implied 'any' type. */ // "strictNullChecks": true, /* Enable strict null checks. */ // "strictFunctionTypes": true, /* Enable strict checking of function types. */ // "strictBindCallApply": true, /* Enable strict 'bind', 'call', and 'apply' methods on functions. */ // "strictPropertyInitialization": true, /* Enable strict checking of property initialization in classes. */ // "noImplicitThis": true, /* Raise error on 'this' expressions with an implied 'any' type. */ // "alwaysStrict": true, /* Parse in strict mode and emit "use strict" for each source file. */ /* Additional Checks */ // "noUnusedLocals": true, /* Report errors on unused locals. */ // "noUnusedParameters": true, /* Report errors on unused parameters. */ // "noImplicitReturns": true, /* Report error when not all code paths in function return a value. */ // "noFallthroughCasesInSwitch": true, /* Report errors for fallthrough cases in switch statement. */ /* Module Resolution Options */ // "moduleResolution": "node", /* Specify module resolution strategy: 'node' (Node.js) or 'classic' (TypeScript pre-1.6). */ // "baseUrl": "./", /* Base directory to resolve non-absolute module names. */ // "paths": &#123;&#125;, /* A series of entries which re-map imports to lookup locations relative to the 'baseUrl'. */ // "rootDirs": [], /* List of root folders whose combined content represents the structure of the project at runtime. */ // "typeRoots": [], /* List of folders to include type definitions from. */ // "types": [], /* Type declaration files to be included in compilation. */ // "allowSyntheticDefaultImports": true, /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */ "esModuleInterop": true /* Enables emit interoperability between CommonJS and ES Modules via creation of namespace objects for all imports. Implies 'allowSyntheticDefaultImports'. */ // "preserveSymlinks": true, /* Do not resolve the real path of symlinks. */ // "allowUmdGlobalAccess": true, /* Allow accessing UMD globals from modules. */ /* Source Map Options */ // "sourceRoot": "", /* Specify the location where debugger should locate TypeScript files instead of source locations. */ // "mapRoot": "", /* Specify the location where debugger should locate map files instead of generated locations. */ // "inlineSourceMap": true, /* Emit a single file with source maps instead of having a separate file. */ // "inlineSources": true, /* Emit the source alongside the sourcemaps within a single file; requires '--inlineSourceMap' or '--sourceMap' to be set. */ /* Experimental Options */ // "experimentalDecorators": true, /* Enables experimental support for ES7 decorators. */ // "emitDecoratorMetadata": true, /* Enables experimental support for emitting type metadata for decorators. */ &#125;&#125; 请确保已安装typescript 开启vscode监视任务 选择终端 =&gt; 运行任务 =&gt; tsc 监视,即可实时编译ts文件]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>vscode</tag>
        <tag>typescript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter本地存储]]></title>
    <url>%2Fblog%2F2019%2F12%2F02%2FFlutter%2Fflutter%E6%9C%AC%E5%9C%B0%E5%AD%98%E5%82%A8%2F</url>
    <content type="text"><![CDATA[全局封装 common &gt; storage.dart12345678910111213141516171819202122232425262728import 'package:shared_preferences/shared_preferences.dart';//本地存储封装class Storage&#123; static Future setString(key, value) async&#123; SharedPreferences sp = await SharedPreferences.getInstance(); sp.setString(key, value); &#125; static Future getString(key) async&#123; SharedPreferences sp = await SharedPreferences.getInstance(); return sp.getString(key); &#125; static Future remove(key) async&#123; SharedPreferences sp = await SharedPreferences.getInstance(); sp.remove(key); &#125; static Future clear() async&#123; SharedPreferences sp = await SharedPreferences.getInstance(); sp.clear(); &#125;&#125; 单个key封装(搜索历史) storage &gt; searchList.dart12345678910111213141516171819202122232425262728293031323334353637383940414243import 'dart:convert';import 'package:kjt_bsp/common/storage.dart';final String searchListKey = 'searchList';class SearchListStorage&#123; static addValueToStorage(value, data) async&#123; data.insert(0, value); await Storage.setString(searchListKey, json.encode(data)); &#125; static setData(value) async&#123; var data = await Storage.getString(searchListKey); if(data != null)&#123; data = json.decode(data); var hasData = data.any((v)&#123; return v == value; &#125;); //当前值并未被存储过 if(!hasData)&#123; addValueToStorage(value, data); &#125; &#125;else&#123; //没有数据，新建数组写入 addValueToStorage(value, []); &#125; &#125; static getData() async&#123; var data = await Storage.getString(searchListKey); if(data != null)&#123; return json.decode(data); &#125;else&#123; return []; &#125; &#125; static removeData() async&#123; await Storage.remove(searchListKey); &#125;&#125;]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter父组件调用子组件方法]]></title>
    <url>%2Fblog%2F2019%2F12%2F02%2FFlutter%2Fflutter%E7%88%B6%E7%BB%84%E4%BB%B6%E8%B0%83%E7%94%A8%E5%AD%90%E7%BB%84%E4%BB%B6%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[Key 概念参考前端react和vue中key值的含义，如果列表key不更改，则即便数据又修改视图也没有更改。 ValueKey:以一个值为key。 ObjectKey:以一个对象为key。 UniqueKey:生成唯一的随机数作为key。 PageStorageKey:专用于存储页面滚动位置的key。 GlobalKey每个globalkey都是一个在整个应用内唯一的key。globalkey相对而言是比较昂贵的，如果你并不需要globalkey的某些特性，那么可以考虑使用Key、ValueKey、ObjectKey或UniqueKey。 GlobalKey用途 允许widget在应用程序中的任何位置更改其parent而不丢失其状态。应用场景：在两个不同的屏幕上显示相同的widget，并保持状态相同。 globalkey唯一定义了某个element，它使你能够访问与element相关联的其他对象，例如buildContext、state等。应用场景：跨widget访问状态 父组件调用子组件方法 父组件 1234567891011121314151617181920212223242526import 'package:flutter/material.dart';import 'package:kjt_bsp/screen/orderEntry/test.dart';class ParentScreen extends StatefulWidget &#123; @override _ParentScreenState createState() =&gt; _ParentScreenState();&#125;class _ParentScreenState extends State&lt;ParentScreen&gt; &#123; @override Widget build(BuildContext context) &#123; return Column( children: &lt;Widget&gt;[ ChildScreen( key: childKey ), RaisedButton( onPressed: ()&#123; childKey.currentState.childFunction(); &#125;, child: Text('点击我调用子组件方法'), ) ], ); &#125;&#125; 子组件 123456789101112131415161718192021222324import 'package:flutter/material.dart';GlobalKey&lt;_ChildScreenState&gt; childKey = GlobalKey();class ChildScreen extends StatefulWidget &#123; ChildScreen(&#123; Key key, &#125;) : super(key: key); @override _ChildScreenState createState() =&gt; _ChildScreenState();&#125;class _ChildScreenState extends State&lt;ChildScreen&gt; &#123; @override Widget build(BuildContext context) &#123; return Container( ); &#125; childFunction()&#123; print('this is a childFunction'); &#125;&#125;]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Container嵌套textField时hintText有时不居中]]></title>
    <url>%2Fblog%2F2019%2F11%2F28%2FFlutter%2FContainer%E5%B5%8C%E5%A5%97textField%E6%97%B6hintText%E6%9C%89%E6%97%B6%E4%B8%8D%E5%B1%85%E4%B8%AD%2F</url>
    <content type="text"><![CDATA[问题 Container嵌套textField时hintText有时会不能居中显示，即便设置了Container的alignment还是无效 解决办法 设置textField的decoration中contentPadding属性即可（设置为0都可以生效，猜测应该是flutter本身BUG导致）1contentPadding: EdgeInsets.zero]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter真机添加网络请求权限]]></title>
    <url>%2Fblog%2F2019%2F11%2F25%2FFlutter%2Fflutter%E7%9C%9F%E6%9C%BA%E6%B7%BB%E5%8A%A0%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%9D%83%E9%99%90%2F</url>
    <content type="text"><![CDATA[android 在android/src/main/AndroidManifest.xml中添加下列代码1234&lt;uses-permission android:name="android.permission.READ_PHONE_STATE" /&gt;&lt;uses-permission android:name="android.permission.INTERNET" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" /&gt;&lt;uses-permission android:name="android.permission.ACCESS_WIFI_STATE" /&gt; 不要放到application里.]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter在安卓模拟器上花屏问题]]></title>
    <url>%2Fblog%2F2019%2F11%2F25%2FFlutter%2Fflutter%E5%9C%A8%E5%AE%89%E5%8D%93%E6%A8%A1%E6%8B%9F%E5%99%A8%E4%B8%8A%E8%8A%B1%E5%B1%8F%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[原因 这种问题，也许是你使用圆角属性，也许是你使用按钮组件 解决方案 将显卡渲染模式设置成兼容模式即可]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode不能识别第三方模拟器]]></title>
    <url>%2Fblog%2F2019%2F11%2F25%2FFlutter%2Fvscode%E4%B8%8D%E8%83%BD%E8%AF%86%E5%88%AB%E7%AC%AC%E4%B8%89%E6%96%B9%E6%A8%A1%E6%8B%9F%E5%99%A8%2F</url>
    <content type="text"><![CDATA[夜神模拟器 先打开夜神模拟器 进去安装目录bin文件夹下D:\nox\Nox\bin 然后命令行执行命令./nox_adb.exe connect 127.0.0.1:62001(./不能省略，否则不能识别命令) 每次关闭模拟器重新开启都需要重新执行一遍以上步骤 采用android studio创建的模拟器 夜神会导致各种奇怪问题Unable to load asset: AssetManifest.json,官方也是建议不要使用其他非标准开发工具]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[android在根路由处点击两次返回键最小化APP]]></title>
    <url>%2Fblog%2F2019%2F11%2F19%2FFlutter%2Fandroid%E5%9C%A8%E6%A0%B9%E8%B7%AF%E7%94%B1%E5%A4%84%E7%82%B9%E5%87%BB%E4%B8%A4%E6%AC%A1%E8%BF%94%E5%9B%9E%E9%94%AE%E6%9C%80%E5%B0%8F%E5%8C%96APP%2F</url>
    <content type="text"><![CDATA[android原生封装最小化APP方法 打开android\app\src\main\java\com\example\kjt_bsp\MainActivity.java1234567891011121314151617181920212223242526272829303132333435package com.example.kjt_bsp;import android.os.Bundle;import io.flutter.app.FlutterActivity;import io.flutter.plugins.GeneratedPluginRegistrant;//引入需要调用资源 ==&gt; 新增第一处import android.view.KeyEvent;import io.flutter.plugin.common.MethodCall;import io.flutter.plugin.common.MethodChannel;public class MainActivity extends FlutterActivity &#123; //通讯名称,回到手机桌面 ==&gt; 新增第二处 private final String CHANNEL = "android/back/desktop"; @Override protected void onCreate(Bundle savedInstanceState) &#123; super.onCreate(savedInstanceState); GeneratedPluginRegistrant.registerWith(this); //定义方法 ==&gt; 新增第三处 new MethodChannel(getFlutterView(), CHANNEL).setMethodCallHandler( new MethodChannel.MethodCallHandler() &#123; @Override public void onMethodCall(MethodCall methodCall, MethodChannel.Result result) &#123; if (methodCall.method.equals("backDesktop")) &#123; result.success(true); moveTaskToBack(false); &#125; &#125; &#125; ); &#125;&#125; flutter开发中封装一个类 新建lib\common\androidBackDeakTop.dart1234567891011121314151617181920212223import 'package:flutter/services.dart';import 'package:flutter/material.dart';class AndroidBackTop &#123; //初始化通信管道-设置退出到手机桌面 static const String CHANNEL = "android/back/desktop"; //设置回退到手机桌面 static Future&lt;bool&gt; backDeskTop() async &#123; final platform = MethodChannel(CHANNEL); //通知安卓返回,到手机桌面 try &#123; final bool out = await platform.invokeMethod('backDesktop'); if (out)&#123; debugPrint('返回到桌面'); &#125; &#125; on PlatformException catch (e) &#123; debugPrint("通信失败(设置回退到安卓手机桌面:设置失败)"); print(e.toString()); &#125; return Future.value(false); &#125;&#125; 在根路由页面调用 此处为项目封装地址，自行根据项目在对应位置添加lib\screen\tabbar\tabNavScreen.dart123456789101112131415161718//返回得BuildContextreturn WillPopScope( onWillPop: () async &#123; // 点击返回键的操作 if(lastPopTime == null || DateTime.now().difference(lastPopTime) &gt; Duration(seconds: 2))&#123; lastPopTime = DateTime.now(); toast('再按一次退出APP'); &#125;else&#123; lastPopTime = DateTime.now(); //设置为返回不退出app AndroidBackTop.backDeskTop(); &#125; //必须返回 return false; &#125;, child: Text('这里是内容');&#125;]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode设置缩进问题]]></title>
    <url>%2Fblog%2F2019%2F11%2F15%2FIDE%2Fvscode%E8%AE%BE%E7%BD%AE%E7%BC%A9%E8%BF%9B%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[设置了tabSize为4，打开新文件还是2的缩进 配置文件中设置&quot;editor.tabSize&quot;: 4(设置默认缩进为4) 配置文件中设置&quot;editor.detectIndentation&quot;: false(因为vscode默认启用了根据文件类型自动设置tabsize的选项，此选项关闭自动设置) 某类文件的tabsize不能用（例如dart）,在Open Default Settings中查=查找关键字tabsize,被默认设置为了2，在用户Open Settings配置文件中覆盖。12345"[dart]": &#123; "editor.tabSize": 4, "editor.insertSpaces": true, "editor.detectIndentation": false,&#125;, 配置文件 Open Settings(打开配置文件) Open Default Settings(打开默认配置文件，只读属性，修改用用户配置文件覆盖即可)]]></content>
      <categories>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>vscode</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter与原生通信]]></title>
    <url>%2Fblog%2F2019%2F11%2F12%2FFlutter%2Fflutter%E4%B8%8E%E5%8E%9F%E7%94%9F%E9%80%9A%E4%BF%A1%2F</url>
    <content type="text"><![CDATA[flutter调用原生方法 splash.flutter.io/splash名称可以自定义，但是必须与原生名称对应 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647import 'package:flutter/material.dart';import 'package:flutter/services.dart';class LaunchImageScreen extends StatefulWidget &#123; @override _LaunchImageScreenState createState() =&gt; _LaunchImageScreenState();&#125;class _LaunchImageScreenState extends State&lt;LaunchImageScreen&gt; &#123; static const platform = const MethodChannel('splash.flutter.io/splash'); @override void initState() &#123; super.initState(); // _startHome(); &#125; @override Widget build(BuildContext context) &#123; return Scaffold( body: Center( child: RaisedButton( onPressed: invokeNativeGetResult, child: Text('点击调用原生方法'), ), ), ); &#125; //显示2秒后跳转到HomeTabPage _startHome() async &#123; await Future.delayed(const Duration(milliseconds: 2000), () &#123; Navigator.pushReplacementNamed(context, '/tabbar'); &#125;); &#125; Future&lt;void&gt; invokeNativeGetResult() async&#123; final result = await platform.invokeMethod( 'getNativeResult', &#123; "key1": "value1", "key2": "value2" &#125; ); print(result); &#125;&#125; ios封装原生方法供flutter调用 12345678910111213141516171819202122232425262728#include "AppDelegate.h"#include "GeneratedPluginRegistrant.h"@implementation AppDelegate- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123; [GeneratedPluginRegistrant registerWithRegistry:self]; FlutterViewController* flutterViewController = [FlutterViewController new]; FlutterMethodChannel * splashChannel = [FlutterMethodChannel methodChannelWithName:@"splash.flutter.io/splash" binaryMessenger: flutterViewController]; [splashChannel setMethodCallHandler:^(FlutterMethodCall * call, FlutterResult result) &#123; NSLog(@"method=%@ \narguments = %@", call.method, call.arguments); if ([call.method isEqualToString:@"getNativeResult"]) &#123; NSDictionary *map = @&#123;@"key":@"从map里获取到的数据"&#125;; // 给Flutter回传结果,这个block只能调用一次才有效 if (result) &#123; result(map); &#125; &#125; &#125;]; // Override point for customization after application launch. return [super application:application didFinishLaunchingWithOptions:launchOptions];&#125;@end]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter修改图标、应用名称、启动图片]]></title>
    <url>%2Fblog%2F2019%2F11%2F08%2FFlutter%2Fflutter%E4%BF%AE%E6%94%B9%E5%9B%BE%E6%A0%87%E3%80%81%E5%BA%94%E7%94%A8%E5%90%8D%E7%A7%B0%E3%80%81%E5%90%AF%E5%8A%A8%E5%9B%BE%E7%89%87%2F</url>
    <content type="text"><![CDATA[应用名称 Android 是在 android ▸ app ▸ src ▸ main ▸ AndroidManifest.xml 中修改android:label=&quot;XXX&quot;; iOS 在 ios ▸ Runner ▸ Info.plist 中修改CFBundleName对应的Value APP图标 (https://icon.wuruihong.com/)[图标工场]在线生成所有平台,所有尺寸图标 ios在 ios ▸ Runner ▸ Assets.xcassets ▸ AppIcon.appiconset文件夹中替换相应尺寸的图片,将下载的压缩包中的AppIcon.appiconset直接替换。 android 在android ▸ app ▸ src ▸ res ▸ mipmap-...文件夹中替换相应尺寸的图片,将下载的压缩包中的mipmap-...等所有文件夹直接替换。 启动页ios原生设置启动页 准备三个尺寸图片1x(375×750), 2x(750×1500), 3x(1125×2250) 替换ios ▸ Runner ▸ Assets.xcassets ▸ LaunchImage.imageset下图片即可，保持命名一致 让启动图全屏, launchScreen.storyboard ▸ View Controller Scene ▸ View Controller ▸ View ▸ LaunchImage ▸ Content Mode改为Scale To Fill. ios需要6个约束来达到原生和flutter启动图效果一致1.centerX 2.centerY 3.top = 0 4.left = 0 5.right = 0 6.bottom = 0 图中Content Mode改为Scale To Fill,因为在flutter中BoxFit.fill对应此属性，为了与安卓fill统一 android原生设置启动页 在android/app/src/main/res/drawable/launch_background.xml中取消注释切修改fill属性 123456789101112&lt;?xml version="1.0" encoding="utf-8"?&gt;&lt;!-- Modify this file to customize your launch splash screen --&gt;&lt;layer-list xmlns:android="http://schemas.android.com/apk/res/android"&gt; &lt;item android:drawable="@android:color/white" /&gt; &lt;!-- 添加下列代码 --&gt; &lt;item&gt; &lt;bitmap android:gravity="fill" android:src="@mipmap/launch_image" /&gt; &lt;/item&gt;&lt;/layer-list&gt; 然后在mipmap中添加对应的启动图资源即可 需要注意的是安卓的启动图片资源需要和flutter使用的启动图片资源比例要保持一致 如果需要自定义启动图时间，在flutter中再模拟一次启动图 1234567891011121314151617181920212223242526272829 import 'package:flutter/material.dart';class LaunchImageScreen extends StatefulWidget &#123; @override _LaunchImageScreenState createState() =&gt; _LaunchImageScreenState();&#125;class _LaunchImageScreenState extends State&lt;LaunchImageScreen&gt; &#123; @override void initState() &#123; super.initState(); _startHome(); &#125; @override Widget build(BuildContext context) &#123; return Image.asset( 'lib/images/launch/LaunchImage.png', fit: BoxFit.fill ); &#125; //显示2秒后跳转到HomeTabPage _startHome() async &#123; await Future.delayed(const Duration(milliseconds: 2000), () &#123; Navigator.pushReplacementNamed(context, '/tabbar'); &#125;); &#125;&#125;]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter路由封装]]></title>
    <url>%2Fblog%2F2019%2F11%2F08%2FFlutter%2Fflutter%E8%B7%AF%E7%94%B1%E5%B0%81%E8%A3%85%2F</url>
    <content type="text"><![CDATA[封装RouteConfig1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import 'package:flutter/cupertino.dart';import 'package:flutter/material.dart';import '../screen/tabbar/tabNavScreen.dart';import '../screen/mine/mineMessageScreen.dart';import '../screen/mine/aboutUsScreen.dart';import '../screen/mine/feedbackScreen.dart';import '../screen/mine/settingScreen.dart';import '../screen/mine/modifyPwdScreen.dart';import '../screen/login/loginScreen.dart';import '../screen/login/forgetPwdScreen.dart';class RouteConfig&#123; static final initRouteName = '/'; static final Map&lt;String, WidgetBuilder&gt; router = &#123; '/': (BuildContext context) =&gt; TabNavScreen(), '/mineMessage': (BuildContext context) =&gt; MineMessageScreen(), '/aboutUs': (BuildContext context) =&gt; AboutUsScreen(), '/feedback': (BuildContext context) =&gt; FeedbackScreen(), '/login': (BuildContext context) =&gt; LoginScreen(), '/forgetPwd': (BuildContext context) =&gt; ForgetPwdScreen(), '/setting': (BuildContext context) =&gt; SettingScreen(), '/modifyPwd': (BuildContext context) =&gt; ModifyPwdScreen(), &#125;; static Route&lt;dynamic&gt; onGenerateRoute(RouteSettings settings)&#123; // 统一处理路由 final String name = settings.name; final Function pageContentBuilder = router[name]; //定义当前需要返回得route对象 Route route; if (pageContentBuilder != null) &#123; if (settings.arguments != null) &#123; //带参数的处理方式 switch(name)&#123; default: route = CupertinoPageRoute( builder: (context) =&gt; pageContentBuilder(context, arguments: settings.arguments) ); break; &#125; &#125;else&#123; //不带参数的处理方式 switch(name)&#123; case '/login': route = CupertinoPageRoute( builder: (context) =&gt; pageContentBuilder(context), fullscreenDialog: true ); break; default: route = CupertinoPageRoute( builder: (context) =&gt; pageContentBuilder(context) ); break; &#125; &#125; &#125; return route; &#125;&#125; 调用RouteConfig1234567891011121314151617import 'package:flutter/material.dart';import 'package:flutter/rendering.dart' show debugPaintSizeEnabled;import './router.dart';import '../styles/theme.dart';class App extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; debugPaintSizeEnabled = false; return MaterialApp( title: 'title', initialRoute: RouteConfig.initRouteName, theme: ThemeConfig.themeData(), onGenerateRoute: RouteConfig.onGenerateRoute, ); &#125;&#125;]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter框架学习记录]]></title>
    <url>%2Fblog%2F2019%2F11%2F01%2FFlutter%2Fflutter%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[不能在theme中使用ScreenUtil 在主题中设置字体大小 fontSize: UISize.size(36),会报错，直接fontSize: 18.0。(UISize.size()为封装方法) 页面内容不超出屏幕也可以滑动方法 在ReactNative中可以使用ScrollView中达到此效果，在flutter中使用ListView来实现此效果(SingleChildScrollView虽然可以实现超出滑动，但是如果内容未超出则无法滑动，ios上的体现) 状态栏字体颜色设置全局设置方法一(不推荐)12345678import 'package:flutter/material.dart';import 'package:flutter/services.dart';import './router/app.dart';void main()&#123; runApp(App()); SystemChrome.setSystemUIOverlayStyle(SystemUiOverlayStyle.dark);&#125; 全局设置方法二(推荐)12345678910111213141516171819202122theme: ThemeData( buttonColor: Color(0xff0d9aff), //按钮背景颜色 accentTextTheme: TextTheme( //默认文本样式 title: TextStyle(color: Color(0xff0d9aff), fontSize: 14.0)), splashColor: Colors.white, primaryColor: Color(0xff0d9aff), //主题色 primaryColorLight: Color(0xff0d9aff), //主题亮色 appBarTheme: AppBarTheme( //设置appbar的各个属性 color: Colors.white, iconTheme: IconThemeData( color: Color(0xff373737) ), textTheme: TextTheme( title: TextStyle( color: Color(0xff373737), fontSize: 18.0 ) ), brightness: Brightness.light //(全局设置状态栏颜色) ), ), 单页设置方法一(不推荐) 同全局方法设置一样，只是放在具体某个页面的build方法内(当前页面设置为白色，整体为黑色，进入到下个未设置的页面为黑色，返回还是黑色，不会更改为白色，因为之前页面的生命周期还在，build方法只执行一次) 单页设置方法二(推荐)1234567891011121314151617@overrideWidget build(BuildContext context) &#123; UISize.init(context); return AnnotatedRegion&lt;SystemUiOverlayStyle&gt;( value: SystemUiOverlayStyle.light, child: Scaffold( backgroundColor: Color(0xFFf5f5f5), body: Column( children: &lt;Widget&gt;[ _banner(), _module(), ], ), ), );&#125; 安卓状态栏背景透明设置1234567void main()&#123; runApp(App()); if(Platform.isAndroid)&#123; SystemUiOverlayStyle systemUiOverlayStyle = SystemUiOverlayStyle(statusBarColor: Colors.transparent); SystemChrome.setSystemUIOverlayStyle(systemUiOverlayStyle); &#125;&#125; Container不能同时设置border某一边属性（但是可以设置所有）和borderRadius 解决方法时嵌套两个Container12345678910111213141516171819// 可以使用decoration: BoxDecoration( border: Border.all( width: UISize.width(1), color: Color(0xffb3b3b3) ), borderRadius: BorderRadius.all(Radius.circular(8)),),// 会报错decoration: BoxDecoration( border: Border( bottom: BorderSide( width: UISize.width(1), color: Color(0xffb3b3b3) ), ), borderRadius: BorderRadius.all(Radius.circular(8)),), 自适应宽度高度方法外层宽度高度已知1234&#123; width: double.infinity, height: double.infinity,&#125; 外层宽度高度未知123Expanded( child: child) 封装方法预设值和必传值123456789101112131415161718192021class ListTitleWidget extends StatelessWidget &#123; final Function onTap; //是否能点击，点击事件 final String title; //标题 final Color bgColor; //背景颜色 =&gt;默认白色 final bool showArrow; //是否显示右侧箭头 =&gt;默认显示 final String iconName; //左侧icon final double height; //自定义高度 =&gt; 默认50dp final double borderRadius; //是否有圆角 =&gt; 默认无圆角 final bool showBottomBorder; //是否显示底部边框 =&gt; 默认显示 ListTitleWidget(&#123; this.onTap, @required this.title, this.bgColor, this.showArrow = true, @required this.iconName, this.height, this.borderRadius, this.showBottomBorder = true, &#125;);&#125; 封装StatefulWidget有状态的组件 参数必须定义初始化在SubmitButton而不是在_SubmitButtonState中。 SubmitButton中super不能省略，在StatelessWidget中可以省略。 在_SubmitButtonState中可以通过widget（注意是小写）获取参数值。 1234567891011121314151617181920212223242526272829303132333435363738394041import 'package:flutter/material.dart';import 'package:kjt_bsp/styles/uiSize.dart';import '../tap/platformTapWidget.dart';class SubmitButton extends StatefulWidget &#123; final bool disable; //是否能点击 final Function onTap; //点击事件 final String title; //标题 SubmitButton(&#123; Key key, this.onTap, this.title, this.disable, &#125;) : super(key: key); @override _SubmitButtonState createState() =&gt; _SubmitButtonState();&#125;class _SubmitButtonState extends State&lt;SubmitButton&gt; &#123; @override Widget build(BuildContext context) &#123; UISize.init(context); return PlatformTapWidget( onTap: widget.onTap, child: Container( margin: EdgeInsets.only(top: UISize.height(360)), width: UISize.width(540), height: UISize.height(88), alignment: Alignment.center, decoration: BoxDecoration( color: Color.fromRGBO(13, 154, 255, 0.3), borderRadius: BorderRadius.all(Radius.circular(UISize.height(44))) ), child: Text(widget.title, style: TextStyle(color: Colors.white, fontSize: UISize.size(30)),), ), ); &#125;&#125; 本地图片资源 在lib下新建一个images文件夹，如果有2倍或者三倍图，再在images文件夹下新建2.0x, 3.0x文件夹 在pubspec.yaml中引入资源 1234567891011121314151617# To add assets to your application, add an assets section, like this:# assets:# - images/a_dot_burr.jpeg# - images/a_dot_ham.jpegassets: - lib/images/banner1.jpg - lib/images/banner2.jpg - lib/images/banner3.jpg # 如果有多张图片需要导入，优化写法如下 =&gt; - lib/images/ # 如果有多个文件夹分类图片需要导入，写法如下 =&gt; - lib/images/main/ - lib/images/login/ - lib/images/mine/ 在需要调用出调用 1234return new Image.asset( "lib/images/banner$&#123;index + 1&#125;.jpg", fit: BoxFit.cover,);]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter代码规范]]></title>
    <url>%2Fblog%2F2019%2F10%2F28%2FFlutter%2Fflutter%E4%BB%A3%E7%A0%81%E8%A7%84%E8%8C%83%2F</url>
    <content type="text"><![CDATA[_私有属性或方法的使用 如果一个方法只有该文件内使用，则需要加上_表示为私有属性或方法。 组件或者方法封装 组件的封装需要加上Widget表示返回的为一个组件.并且封装的名称结尾带上Widget 方法的封装前面不加任何类型，以此来区别组件123456789//方法封装_doSomeThing()&#123; ...&#125;//组件封装Widget _bannerWidget()&#123; return Widget;&#125; this省略 所有的方法或者属性调用，省略掉this]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter中dart语言技巧]]></title>
    <url>%2Fblog%2F2019%2F10%2F28%2FFlutter%2Fflutter%E4%B8%ADdart%E8%AF%AD%E8%A8%80%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[字符串模板12int index = 0;var imgUrl = "lib/images/banner$&#123;index + 1&#125;.jpg";]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[flutter渠道和版本管理]]></title>
    <url>%2Fblog%2F2019%2F10%2F21%2FFlutter%2Fflutter%E6%B8%A0%E9%81%93%E5%92%8C%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%2F</url>
    <content type="text"><![CDATA[flutter渠道 查看渠道命令 flutter channel 切换渠道命令 flutter channel master(master dev beta stable, 正式开发建议使用master) flutter版本 查看当前版本 flutter --version 查看所有存在版本 flutter version 切换版本 flutter version v1.9.0(对应版本号) 黑苹果xcode版本导致高版本flutter不能运行 通过切换低版本来兼容xcode版本]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue组件中data必须时函数]]></title>
    <url>%2Fblog%2F2019%2F09%2F27%2FJS%2Fvue%E7%BB%84%E4%BB%B6%E4%B8%ADdata%E5%BF%85%E9%A1%BB%E6%97%B6%E5%87%BD%E6%95%B0%2F</url>
    <content type="text"><![CDATA[示例 在new Vue()中，data是可以作为一个对象进行操作的，然而在component中，data只能以函数的形式存在，不能直接将对象赋值给它 12345678910111213141516new Vue(&#123; el: '#app', data: &#123; message: 'Love' &#125;, template: '&lt;p&gt;It’s great to love cakes.&lt;/p&gt;'&#125;)Vue.comments('todo-item', &#123; data: function()&#123; return &#123; message: 'Love' &#125; &#125;, template: '&lt;p&gt;It’s great to love cakes.&lt;/p&gt;'&#125;) 原因 这并非是 Vue 自身如此设计，而是跟 JavaScript 特性相关，我们来回顾下 JavaScript 的原型链 12345678var Component = function() &#123;&#125;;Component.prototype.data = &#123; message: 'Love'&#125;var component1 = new Component(), component2 = new Component();component1.data.message = 'Peace';console.log(component2.data.message); // Peace 以上两个实例都引用同一个对象，当其中一个实例属性改变时，另一个实例属性也随之改变，只有当两个实例拥有自己的作用域时，才不会互相干扰 123456789101112var Component = function() &#123; this.data = this.data()&#125;Component.prototype.data = function()&#123; return &#123; message: 'Love' &#125;&#125;var component1 = new Component(), component2 = new Component();component1.data.message = 'Peace';console.log(component2.data.message); 总结 其实就是对象的引用问题，返回函数就是不同对象，可以随意处理，返回对象，某个组件的修改会导致其他引用该组件的对象也跟着修改。]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE中JS兼容性问题]]></title>
    <url>%2Fblog%2F2019%2F09%2F26%2FJS%2FIE%E4%B8%ADJS%E5%85%BC%E5%AE%B9%E6%80%A7%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[ie中new Date解析(“2019-01-01”)提示无效日期 短横线格式的日期在IE下不支持这种转换，需要换成斜杠格式的日期,如: 2019/01/01123var date = &quot;2019-01-01&quot;;var newDate = date.replace(new RegExp(/-/gm), &quot;/&quot;);var initDate = new Date(newDate); IE9以上与IE9及一下请求区别 IE9以上发送的XHR请求 IE9及一下发送的是其他请求，可以在F12调试中网络里面看到区别]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>ie</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows10以msi格式安装mongodb4.2]]></title>
    <url>%2Fblog%2F2019%2F09%2F26%2FMongoDB%2Fwindows10%E4%BB%A5msi%E6%A0%BC%E5%BC%8F%E5%AE%89%E8%A3%85mongodb4.2%2F</url>
    <content type="text"><![CDATA[安装文件以msi格式 会直接以应用程序形式安装mongodb 安装过程 请取消勾选install MongoDB Compass,有墙导致安装缓慢甚至无法安装,可使用Robo 3T或者mongodb compass作为界面可视化管理工具 安装完成后会出现MongoDB Server服务无法启动,原因是因为安装在非系统盘，mongodb/bin/mongod.cfg文件最后多一行mp:导致的，删除即可运行 12345678910111213141516171819202122232425262728293031323334353637383940414243# mongod.conf# for documentation of all options, see:# http://docs.mongodb.org/manual/reference/configuration-options/# Where and how to store data.storage: dbPath: E:\MongoDB\data journal: enabled: true# engine:# mmapv1:# wiredTiger:# where to write logging data.systemLog: destination: file logAppend: true path: E:\MongoDB\log\mongod.log# network interfacesnet: port: 27017 bindIp: 127.0.0.1#processManagement:#security:#operationProfiling:#replication:#sharding:## Enterprise-Only Options:#auditLog:#snmp:#删除下面即可mp: mongo加入path环境变量D:\mongodb\bin mongodb配置 开启外网访问 1bindIp 0.0.0.0 开启身份验证(开启前先添加用户) 12security: authorization: enabled mongodb服务没有响应控制 一般是由于配置文件.cfg格式错误导致 cmder启动mongodb报错 报错信息 12系统错误 5。拒绝访问 报错原因是因为没有使用管理员方式运行 解决方法一临时开启管理员权限： 121. 快捷键 Ctrl + t 后勾选2. run as administrator 解决方法二永久开启管理员权限：(推荐)121. 快捷键：win + alt + p2. Startup -&gt; Spedified named task选择&#123;bash::bash as Admin&#125;或者&#123;cmder::cmder as Admin&#125; windows启动mongodb命令123启动:net start MongoDB 重启:net restart MongoDB 关闭:net stop MongoDB 借鉴网址Win10 安装配置 MongoDB 4.0 踩坑记MongoDB net start MongoDB启动,提示发生系统错误 5 拒绝访问 解决之道Windows10系统安装MongoDB-4.2版本cmder 常用配置（包括默认管理员运行和解决中文乱码）]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>数据库</tag>
        <tag>windows</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB导入csv文件]]></title>
    <url>%2Fblog%2F2019%2F09%2F23%2FMongoDB%2FMongoDB%E5%AF%BC%E5%85%A5csv%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[导入注意事项 –headerline 导入命令必须在mongodb之外的环境调用 导入的csv数据不能有未关闭或者非法双引号，否则会报 Failed: read error on entry #11923: line 11924, column 55: bare “ in non-quoted-field错误 导入命令1mongoimport -h ip地址:端口号 -u 数据库用户名 -p 数据库密码 -d 数据库名称 -c 集合名称 --type csv --headerline --file /root/hotel_data/1-200W.csv -h ip地址:端口号 -u 数据库用户名 -p 数据库密码 -d 数据库名称 -c 集合名称 –type 指定导入文件类型 –headerline 如果使用headerline则使用第一行作为字段名称，否则，将第一行作为数据字段导入，仅仅用作csv或tsv文件导入，在导入json时用headerline则会报错 –ignoreBlanks 忽略csv和tsv导出中的空字段。如果未指定，则mongoimport在导入的文档中创建没有值的字段，ignoreBlanks仅适用于csv或tsv文件导入]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义下拉列表]]></title>
    <url>%2Fblog%2F2019%2F09%2F10%2FCss%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E4%B8%8B%E6%8B%89%E5%88%97%E8%A1%A8%2F</url>
    <content type="text"><![CDATA[最终效果]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[小米系统优化]]></title>
    <url>%2Fblog%2F2019%2F08%2F21%2FAndroid%2F%E5%B0%8F%E7%B1%B3%E7%B3%BB%E7%BB%9F%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[MIUI开发版 8.8.31Root Explorer(清理系统内置软件) 小米支付 /system/app/miPay 快应用 /system/app/HybridPlatform 直达服务 /system/app/HybridAccessory 漏洞反馈 /system/app/Bugreport 浏览器选择翻译 /system/app/YouDaoEngine 小米智能卡 /system/app/TSMClient 米币支付 /system/app/PaymentService 我的小米 /system/app/VipAccount 音乐 /system/priv-app/Music 常用系统目录 手机app目录/system/app/ 小米私有app目录/system/priv-app/ 搜狗输入法小米版底部空白 设置-更多应用-搜狗输入法小米版-卸载更新 搜狗输入法小米版反复提示联网 安全中心-网络助手-联网控制- 右上角··· -后台联网权限- 关闭搜狗输入法小米版]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[手机常用软件]]></title>
    <url>%2Fblog%2F2019%2F08%2F21%2FAndroid%2F%E6%89%8B%E6%9C%BA%E5%B8%B8%E7%94%A8%E8%BD%AF%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[通讯类 微信 QQ 应用下载类 应用商店(小米自带) 葫芦侠 酷安 APKHere(历史版本) Root工具类 Manager(面具, magisk) Root Explorer(清理系统内置软件) EdXposed Install(Xposed模块安装) 财务类 懒人记账 招商银行 掌上生活 娱乐类 今日头条 斗鱼极速版 看书 阅读（超级好用） 追书神器 听书 荔枝 喜马拉雅 购物 京东 淘宝 美团 音乐 网易云音乐 QQ音乐]]></content>
      <categories>
        <category>android</category>
      </categories>
      <tags>
        <tag>android</tag>
        <tag>操作系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode第12题-整数转罗马数字]]></title>
    <url>%2Fblog%2F2019%2F08%2F15%2FJS%2Fleetcode%E7%AC%AC12%E9%A2%98-%E6%95%B4%E6%95%B0%E8%BD%AC%E7%BD%97%E9%A9%AC%E6%95%B0%E5%AD%97%2F</url>
    <content type="text"><![CDATA[首次解题(SB解法…) 答案12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273var intToRoman = function (num) &#123; function romanValue(int, length, index) &#123; switch (true) &#123; case int == 0: return ''; case int &gt; 0 &amp;&amp; int &lt; 4: // if (length == index + 1) &#123; // let str = ''; // for (let i = 0; i &lt; int; i++) &#123; // str += 'I'; // &#125; // return str; // &#125; // if (length == index + 2) &#123; // let str = ''; // for (let i = 0; i &lt; int; i++) &#123; // str += 'X'; // &#125; // return str; // &#125; // if (length == index + 3) &#123; // let str = ''; // for (let i = 0; i &lt; int; i++) &#123; // str += 'C'; // &#125; // return str; // &#125; // if (length == index + 4) &#123; // let str = ''; // for (let i = 0; i &lt; int; i++) &#123; // str += 'M'; // &#125; // return str; // &#125; let str1 = ''; let arr1 = ['I', 'X', 'C', 'M']; for (let i = 0; i &lt; int; i++) &#123; str1 += arr1[length - index - 1]; &#125; return str1; case int == 4: let str2 = ''; let arr2 = ['IV', 'XL', 'CD']; str2 += arr2[length - index - 1]; return str2; case int == 5: let str3 = ''; let arr3 = ['V', 'L', 'D']; str3 += arr3[length - index - 1]; return str3; case int &gt; 5 &amp;&amp; int &lt; 9: let arr4 = ['V', 'L', 'D']; let arrMore = ['I', 'X', 'C']; let str4 = arr4[length - index - 1]; for (let i = 0; i &lt; int - 5; i++) &#123; str4 += arrMore[length - index - 1]; &#125; return str4; case int == 9: let str5 = ''; let arr5 = ['IX', 'XC', 'CM']; str5 += arr5[length - index - 1]; return str5; &#125; &#125; let result = ''; let numArr = num.toString().split(''); for (let i = 0; i &lt; numArr.length; i++) &#123; result += romanValue(numArr[i], numArr.length, i); &#125; return result;&#125;; 学习解题 答案1234567891011121314151617var intToRoman = function (num) &#123; var list = ['M', 'CM', 'D', 'CD', 'C', 'XC', 'L', 'XL', 'X', 'IX', 'V', 'IV', 'I'] var valueList = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1] var result = '' while (num !== 0) &#123; for (var i = 0; i &lt; valueList.length; i++) &#123; //当前值大于数组内，将数组内的值赋值给结果，然后去掉已匹配的值; //例如1994 &gt; 1000,获取M，然后剪掉最左边的1,即减去1000,剩余994继续下一次循环 if (num &gt;= valueList[i]) &#123; result += list[i] num -= valueList[i] break &#125; &#125; &#125; return result&#125;;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode第11题-盛水最多的容器]]></title>
    <url>%2Fblog%2F2019%2F08%2F15%2FJS%2Fleetcode%E7%AC%AC11%E9%A2%98-%E7%9B%9B%E6%B0%B4%E6%9C%80%E5%A4%9A%E7%9A%84%E5%AE%B9%E5%99%A8%2F</url>
    <content type="text"><![CDATA[首次解题(暴力破解) 答案1234567891011121314151617181920/** * @param &#123;number[]&#125; height * @return &#123;number&#125; */var maxArea = function (height) &#123; let maxValue = 0; for (let i = 0; i &lt; height.length; i++) &#123; for (let j = 0; j &lt; height.length; j++) &#123; if (i == j) &#123; continue; &#125; let min = Math.min(height[i], height[j]); let abs = Math.abs(i - j); if (min * abs &gt; maxValue) &#123; maxValue = min * abs; &#125; &#125; &#125; return maxValue;&#125;; 学习解题 答案123456789101112131415var maxArea = function (height) &#123; let maxValue = 0; function search(height, left, right) &#123; while (left &gt;= 0 &amp;&amp; right &lt; height.length &amp;&amp; left &lt; right) &#123; let min = Math.min(height[left], height[right]); let value = (right - left) * min; maxValue = value &gt; maxValue ? value : maxValue; height[left] &lt;= height[right] ? left++ : right--; &#125; &#125; search(height, 0, height.length - 1); return maxValue;&#125;;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode第5题-最长回文子串]]></title>
    <url>%2Fblog%2F2019%2F08%2F14%2FJS%2Fleetcode%E7%AC%AC5%E9%A2%98-%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[题目 Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000. Example 1:123Input: &quot;babad&quot;Output: &quot;bab&quot;Note: &quot;aba&quot; is also a valid answer. Example 2:12Input: &quot;cbbd&quot;Output: &quot;bb&quot; 题目理解 给定一个最长为1000长度得字符串，获取最长得回文子串 首次解题(暴力破解) 答案(答案正确，但是超时)1234567891011121314151617181920212223242526272829var longestPalindrome = function (s) &#123; //判断是否为回文 function checkPalindrom(str) &#123; return str == str.split('').reverse().join(''); &#125; //字符串转换为数组 let array = s.split(''); //当前回文长度 let maxLength = 0; //当前回文字符串 let palindromStr = ''; for (let i = 0; i &lt; array.length; i++) &#123; //临时存储计算中的回文来与全局回文做比较 let tempPalindromStr = ''; for (let j = i; j &lt; array.length; j++) &#123; tempPalindromStr += array[j]; if (checkPalindrom(tempPalindromStr)) &#123; if (tempPalindromStr.length &gt; maxLength) &#123; maxLength = tempPalindromStr.length; palindromStr = tempPalindromStr; &#125; &#125; &#125; &#125; return palindromStr;&#125;; 二次优化解题(暴力破解 + 剪枝) 答案(答案正确，但是依然超时)123456789101112131415161718192021222324252627282930313233343536373839var longestPalindrome = function (s) &#123; //判断是否为回文 function checkPalindrom(str) &#123; return str == str.split('').reverse().join(''); &#125; //字符串转换为数组 let array = s.split(''); //当前回文长度 let maxLength = 0; //当前回文字符串 let palindromStr = ''; for (let i = 0; i &lt; array.length - maxLength; i++) &#123; //临时存储计算中的回文来与全局回文做比较 let tempPalindromStr = ''; for (let j = i + maxLength; j &lt; array.length; j++) &#123; tempPalindromStr += array[j]; //剪枝1、如果当前tempPalindromStr长度小于等于palindromStr时，无论是否是回文都跳过 if (tempPalindromStr.lenght &lt;= palindromStr.lenght) &#123; continue; &#125; //剪枝2、减少函数调用开销，如果end位置的字符与start位置字符不相等，则不可能是回文串。 if (tempPalindromStr.charAt[i] != tempPalindromStr.charAt[j]) &#123; continue; &#125; if (checkPalindrom(tempPalindromStr)) &#123; if (tempPalindromStr.length &gt; maxLength) &#123; maxLength = tempPalindromStr.length; palindromStr = tempPalindromStr; &#125; &#125; &#125; &#125; return palindromStr;&#125;; 学习解题(中心扩展法) 答案1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var longestPalindrome = function (s) &#123; //获取指定下标开始中心扩展获取最长回文长度 function searchPalindromeLength(str, left, right) &#123; while (left &gt;= 0 &amp;&amp; right &lt; str.length &amp;&amp; str[left] === str[right]) &#123; left--; right++; &#125; return right - left - 1; //right - left - 2 + 1(减二是因为上一个判断循环了一次left--和right++) &#125; let start = 0; let end = 0; for (let i = 0; i &lt; s.length; i++) &#123; //这里执行两次，传递i和i+1是因为回文可能存在两种情况, 'aba'和'abba'都需要判断到 let len1 = searchPalindromeLength(s, i, i); let len2 = searchPalindromeLength(s, i, i + 1); //取最长字符串得回文 let len = len1 &gt;= len2 ? len1 : len2; //当当前循环得回文长度大于之前存储得回文长度时候，覆盖之前存储 if (len &gt; end - start) &#123; /* 这里有必要说start = i - Math.floor((len - 1) / 2)；end = i + Math.floor(len / 2)是怎么得到的 假设坐标为i，当length为奇数时，i为中心点，取子字符串 起始坐标 i_start = i - (len-1)/2 ------------ length为奇数 终止坐标 i_end = i + (len-1)/2 ------------ length为偶数 换算=&gt; i_start = i - (len-1)/2 == i - Math.floor((len-1)/2) ------------ length为奇数 i_start = i - (len)/2 - 1 == i - (len-2)/2 == i - Math.floor((len-1)/2) ------------ length为偶数 假设坐标为i，当length为偶数时，i为中心前置点，取子字符串 起始坐标 i_start = i - (len)/2 - 1 终止坐标 i_end = i + (len)/2 同理换算=&gt; i_end = i + (len-1)/2 == i + Math.floor(len / 2) ------------ length为奇数 i_end = i + (len)/2 == i + Math.floor(len / 2) ------------ length为偶数 */ start = i - parseInt((len - 1) / 2); end = i + parseInt(len / 2); &#125; &#125; return s.slice(start, end + 1);&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode第4题-两个排序数组的中位数]]></title>
    <url>%2Fblog%2F2019%2F08%2F13%2FJS%2Fleetcode%E7%AC%AC4%E9%A2%98-%E4%B8%A4%E4%B8%AA%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E4%B8%AD%E4%BD%8D%E6%95%B0%2F</url>
    <content type="text"><![CDATA[题目 There are two sorted arrays nums1 and nums2 of size m and n respectively. Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)). You may assume nums1 and nums2 cannot be both empty. Example 1:1234nums1 = [1, 3]nums2 = [2]The median is 2.0 Example 2:1234nums1 = [1, 2]nums2 = [3, 4]The median is (2 + 3)/2 = 2.5 题目理解 给定两个排序数组，且数组内元素都为数字，数组的位数不定，计算出这两个数组合并之后中间的值（如果合并之后为偶数就取中间两位的平均值，如果为奇数就直接取中间数即可）. 首次解题 答案1234567891011121314151617181920/** * @param &#123;number[]&#125; nums1 * @param &#123;number[]&#125; nums2 * @return &#123;number&#125; */var findMedianSortedArrays = function(nums1, nums2) &#123; function compare(a, b) &#123; return a - b; &#125; let isOddNumber = (nums1.length + nums2.length) % 2 !== 0; let allArray = nums1.concat(nums2).sort(compare); if(isOddNumber)&#123; return allArray[parseInt((nums1.length + nums2.length) / 2)]; &#125;else&#123; let num1 = allArray[((nums1.length + nums2.length) / 2) - 1]; let num2 = allArray[(nums1.length + nums2.length) / 2]; return (num1 + num2) / 2; &#125;&#125;; 解题思路 首先将两个数组合并然后排序; 判断中路数是奇数还是偶数返回对应结果. 知识点 array.sort()排序不正确的原因12345function compare(a, b) &#123; return a - b;&#125; array.sort(compare);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[leetcode第3题-最长不重复字符串.md]]></title>
    <url>%2Fblog%2F2019%2F08%2F13%2FJS%2Fleetcode%E7%AC%AC3%E9%A2%98-%E6%9C%80%E9%95%BF%E4%B8%8D%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[题目 Given a string, find the length of the longest substring without repeating characters. Example 1:123Input: &quot;abcabcbb&quot;Output: 3 Explanation: The answer is &quot;abc&quot;, with the length of 3. Example 2:123Input: &quot;bbbbb&quot;Output: 1Explanation: The answer is &quot;b&quot;, with the length of 1. Example 3:1234Input: &quot;pwwkew&quot;Output: 3Explanation: The answer is &quot;wke&quot;, with the length of 3. Note that the answer must be a substring, &quot;pwke&quot; is a subsequence and not a substring. 题目理解 给定任意一个字符串，找到这个字符串中最长不重复的子字符串 首次解题 答案1234567891011121314151617181920212223242526/** * @param &#123;string&#125; s * @return &#123;number&#125; */var lengthOfLongestSubstring = function(s) &#123; let arr = s.split(''); let maxLength = 0; let result = ''; for(let j=0; j&lt;arr.length; j++)&#123; let maxString = ''; for(let i=j; i&lt;arr.length; i++)&#123; if(maxString.indexOf(arr[i]) &gt; -1)&#123; if(maxString.length &gt; maxLength)&#123; maxLength = maxString.length; result = maxString; &#125; break; &#125; maxString += arr[i]; if(maxString.length + j === arr.length &amp;&amp; maxString.length &gt; maxLength)&#123; return maxString.length; &#125; &#125; &#125; return maxLength;&#125;; 解题思路 首先将字符串转换为数组; 循环该数组 =&gt; 再次循环，首字符循环所有次数，第二个字符循环所有次数-1，以此类推，得到所有组合. 记录每次组合的最大字符长度和该字符的值 注意: 如果字符串为” “或者”bba”需要添加一些限制条件。]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>javascript</tag>
        <tag>leetcode</tag>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[1-9数字加任意字母组合]]></title>
    <url>%2Fblog%2F2019%2F08%2F08%2FJS%2F1-9%E6%95%B0%E5%AD%97%E5%8A%A0%E4%BB%BB%E6%84%8F%E5%AD%97%E6%AF%8D%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[12345678910111213141516let n = 3 // digits u wantlet iterator = &#123; [Symbol.iterator]: function*() &#123; let num = 0 let result = '' for(;;)&#123; result = num.toString('36') if(result.length &gt; n) break yield result num += 1 &#125; &#125;&#125;let arr = [...iterator]console.log(arr) 知识点 for(;;){}表示无限循环,和while(true){}功能一样. num.toString(‘36’),36进制，可选参数.1231.toString('36') // 'a'2.toString('36') // 'b'....]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactJS单页转场动画]]></title>
    <url>%2Fblog%2F2019%2F08%2F02%2FJS%2FReactJS%E5%8D%95%E9%A1%B5%E8%BD%AC%E5%9C%BA%E5%8A%A8%E7%94%BB%2F</url>
    <content type="text"><![CDATA[package.json配置12345678910111213141516171819202122232425262728&#123; &quot;name&quot;: &quot;react-router-animation-demo&quot;, &quot;version&quot;: &quot;0.1.0&quot;, &quot;private&quot;: true, &quot;dependencies&quot;: &#123; &quot;antd&quot;: &quot;^3.16.2&quot;, &quot;react&quot;: &quot;^16.8.6&quot;, &quot;react-dom&quot;: &quot;^16.8.6&quot;, &quot;react-router-dom&quot;: &quot;^5.0.0&quot;, &quot;react-scripts&quot;: &quot;2.1.8&quot;, &quot;react-transition-group&quot;: &quot;^2.9.0&quot; &#125;, &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;set PORT=8001 &amp;&amp; react-scripts start&quot;, &quot;build&quot;: &quot;react-scripts build&quot;, &quot;test&quot;: &quot;react-scripts test&quot;, &quot;eject&quot;: &quot;react-scripts eject&quot; &#125;, &quot;eslintConfig&quot;: &#123; &quot;extends&quot;: &quot;react-app&quot; &#125;, &quot;browserslist&quot;: [ &quot;&gt;0.2%&quot;, &quot;not dead&quot;, &quot;not ie &lt;= 11&quot;, &quot;not op_mini all&quot; ]&#125; 样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106.router-wrapper &#123; overflow: hidden;&#125;/** * 右侧淡入，右侧淡出 */.forward-from-right-enter &#123; z-index: 2; opacity: 0; transform: translateX(100%);&#125;.forward-from-right-enter-active &#123; z-index: 2; opacity: 1; transform: translateX(0); transition: all 500ms;&#125;.forward-from-right-exit &#123; z-index: 1; opacity: 1;&#125;.forward-from-right-exit-active &#123; z-index: 1; opacity: .3; transition: all 500ms;&#125;.back-to-right-enter &#123; z-index: 1; opacity: .3;&#125;.back-to-right-enter-active &#123; z-index: 1; opacity: 1; transform: translateX(0); transition: all 500ms;&#125;.back-to-right-exit &#123; z-index: 2; opacity: 1; transform: translateX(0);&#125;.back-to-right-exit-active &#123; z-index: 2; opacity: 0; transform: translate(100%); transition: all 500ms;&#125;/** * 下方淡入，下方淡出 */.forward-from-bottom-enter &#123; z-index: 2; opacity: 0; transform: translateY(100%);&#125;.forward-from-bottom-enter-active &#123; z-index: 2; opacity: 1; transform: translateY(0); transition: all 500ms;&#125;.forward-from-bottom-exit &#123; z-index: 1; opacity: 1;&#125;.forward-from-bottom-exit-active &#123; z-index: 1; opacity: .3; transition: all 500ms;&#125;.back-to-bottom-enter &#123; z-index: 1; opacity: .3;&#125;.back-to-bottom-enter-active &#123; z-index: 1; opacity: 1; transition: all 500ms;&#125;.back-to-bottom-exit &#123; z-index: 2; opacity: 1; transform: translateY(0);&#125;.back-to-bottom-exit-active &#123; z-index: 2; opacity: 0; transform: translateY(100%); transition: all 500ms;&#125; 核心JS1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465import React from 'react';import &#123; Route, Switch, withRouter, BrowserRouter&#125; from 'react-router-dom';import './index.css';import &#123; RouterConfig &#125; from './RouteConfig';import &#123; CSSTransition, TransitionGroup &#125; from 'react-transition-group';const DEFAULT_SCENE_CONFIG = &#123; enter: 'from-right', exit: 'to-exit'&#125;;const getSceneConfig = location =&gt; &#123; const matchedRoute = RouterConfig.find(config =&gt; new RegExp(`^$&#123;config.path&#125;$`).test(location.pathname)); return (matchedRoute &amp;&amp; matchedRoute.sceneConfig) || DEFAULT_SCENE_CONFIG;&#125;;let oldLocation = null;const Routes = withRouter((&#123; location, history &#125;) =&gt; &#123; console.log(location, history); debugger; // 转场动画应该都是采用当前页面的sceneConfig，所以： // push操作时，用新location匹配的路由sceneConfig // pop操作时，用旧location匹配的路由sceneConfig let classNames = ''; if (history.action === 'PUSH') &#123; classNames = 'forward-' + getSceneConfig(location).enter; &#125; else if (history.action === 'POP' &amp;&amp; oldLocation) &#123; classNames = 'back-' + getSceneConfig(oldLocation).exit; &#125; console.log(classNames); // 更新旧location oldLocation = location; return ( &lt;TransitionGroup className=&#123;'router-wrapper'&#125; childFactory=&#123;child =&gt; React.cloneElement(child, &#123; classNames &#125;)&#125; &gt; &lt;CSSTransition timeout=&#123;500&#125; key=&#123;location.pathname&#125;&gt; &lt;Switch location=&#123;location&#125;&gt; &#123;RouterConfig.map((config, index) =&gt; ( &lt;Route exact key=&#123;index&#125; &#123;...config&#125; /&gt; ))&#125; &lt;/Switch&gt; &lt;/CSSTransition&gt; &lt;/TransitionGroup&gt; );&#125;);export default class App4 extends React.PureComponent &#123; render() &#123; return ( &lt;BrowserRouter&gt; &lt;Routes /&gt; &lt;/BrowserRouter&gt; ); &#125;&#125; 路由配置1234567891011121314151617181920212223242526272829303132import &#123;HomePage, AboutPage, ListPage, DetailPage&#125; from '../Pages/index';export const RouterConfig = [ &#123; path: '/', component: HomePage &#125;, &#123; path: '/about', component: AboutPage, sceneConfig: &#123; enter: 'from-bottom', exit: 'to-bottom' &#125; &#125;, &#123; path: '/list', component: ListPage, sceneConfig: &#123; enter: 'from-right', exit: 'to-right' &#125; &#125;, &#123; path: '/detail', component: DetailPage, sceneConfig: &#123; enter: 'from-right', exit: 'to-right' &#125; &#125;]; 借鉴网址github项目react-router-animation-demo]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>ReactJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactJS技巧]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2FJS%2FReactJS%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[修改默认端口 在package.json中修改“start”: “set PORT=8001 &amp;&amp; react-scripts start” react切换路由不触发componentWillReceiveProps App.js中引入BrowserRouter 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576//由路由切换显示loading动画延申出来的BUG//App.jsimport React, &#123; Component&#125; from &apos;react&apos;;import &#123; Switch, Route, withRouter, BrowserRouter&#125; from &apos;react-router-dom&apos;;import &#123; ActivityIndicator &#125; from &apos;antd-mobile&apos;;import &#123; RouterConfig &#125; from &apos;./router/router&apos;;import &apos;./styles/init.css&apos;;import Header from &apos;./components/header/header&apos;;import Footer from &apos;./components/footer/footer&apos;;class App extends Component &#123; timer = null; constructor(props) &#123; super(props); this.state = &#123; loading: true, &#125; &#125; componentDidMount() &#123; console.log(this); this.loadingShow(); &#125; componentWillReceiveProps(nextProps) &#123; //当路由切换时 console.log(this); debugger; if (this.props.location !== nextProps.location) &#123; window.scrollTo(0, 0); this.loadingShow(); &#125; &#125; render() &#123; return ( &lt;div&gt; &lt;ActivityIndicator toast text=&quot;Loading...&quot; animating=&#123;this.state.loading&#125; /&gt; &lt;Header /&gt; &lt;Switch&gt; &#123;RouterConfig.map((config, index) =&gt; ( &lt;Route exact key=&#123;index&#125; &#123;...config&#125; /&gt; ))&#125; &lt;/Switch&gt; &lt;Footer /&gt; &lt;/div&gt; ); &#125; loadingShow() &#123; this.setState(&#123; loading: true &#125;, () =&gt; &#123; clearTimeout(this.timer); this.timer = setTimeout(() =&gt; &#123; this.setState(&#123; loading: false &#125;); &#125;, 1000); &#125;); &#125;&#125;export default withRouter(App); 搞忘最外层已经嵌套了一次BrowserRouter了 123456789101112131415161718192021222324252627import React from &apos;react&apos;;import ReactDOM from &apos;react-dom&apos;;import &apos;./index.css&apos;;import App from &apos;./App&apos;;import &#123; BrowserRouter, Route&#125; from &apos;react-router-dom&apos;;import &#123; Provider&#125; from &apos;react-redux&apos;;import &#123; store&#125; from &apos;./store&apos;;//import * as serviceWorker from &apos;./serviceWorker&apos;;ReactDOM.render( &lt;Provider store=&#123;store&#125;&gt; &lt;BrowserRouter&gt; &lt;Route path=&apos;/&apos; component=&#123;App&#125;/&gt; &lt;/BrowserRouter&gt; &lt;/Provider&gt;, document.getElementById(&apos;root&apos;));/*是否注册正式环境的离线缓存*///serviceWorker.unregister(); 最外层嵌套BrowserRouter两次导致检测不到 ReactJS实现Route下发props到component1&lt;Route exact render=&#123;props =&gt; &lt;NotFoundPage test=&#123;123&#125; /&gt;&#125; /&gt; 修改资源引用地址从绝对路径到相对路径 如果项目不是放在根目录，打包出来会导致资源加载错误，即路径不对1234// 修改package.json,在最后加上下面字段&#123; "homepage": "./"&#125;]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>ReactJS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[VSCode]]></title>
    <url>%2Fblog%2F2019%2F08%2F01%2FIDE%2FVSCode%2F</url>
    <content type="text"><![CDATA[打开新的窗口 ctrl+shift+n 命令面板 ctrl+shift+p koroFileHeader 快捷键1234567windowsctrl + alt + i //文件头部注释 ctrl + alt + t //函数注释macctrl + command + i //文件头部注释 ctrl + command + t //函数注释 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// 头部注释"fileheader.customMade": &#123; // 头部注释默认字段 "Author": "your name", "Date": "Do not edit", // 设置后默认设置文件生成时间 "LastEditTime": "Do not edit", // 设置后，保存文件更改默认更新最后编辑时间 "LastEditors": "your name", // 设置后，保存文件更改默认更新最后编辑人 "Description": "", "FilePath": "Do not edit", // 设置后，默认生成文件相对于项目的路径 "custom_string_obkoro1": "可以输入预定的版权声明、个性签名、空行等"&#125;,// 函数注释"fileheader.cursorMode": &#123; // 默认字段 "description":"", "param":"", "return":""&#125;,// 插件配置项"fileheader.configObj": &#123; "autoAdd": true, // 检测文件没有头部注释，自动添加文件头部注释 "autoAddLine": 100, // 文件超过多少行数 不再自动添加头部注释 "autoAlready": true, // 只添加插件支持的语言以及用户通过`language`选项自定义的注释 "supportAutoLanguage": [], // 设置之后，在数组内的文件才支持自动添加 // 自动添加头部注释黑名单 "prohibitAutoAdd": [ "json" ], "prohibitItemAutoAdd": [ "项目的全称禁止项目自动添加头部注释, 使用快捷键自行添加" ], "folderBlacklist": [ "node_modules" ], // 文件夹或文件名禁止自动添加头部注释 "wideSame": false, // 头部注释等宽设置 "wideNum": 13, // 头部注释字段长度 默认为13 "functionWideNum": 0, // 函数注释等宽设置 设为0 即为关闭 // 头部注释第几行插入 "headInsertLine": &#123; "php": 2 // php文件 插入到第二行 &#125;, "beforeAnnotation": &#123;&#125;, // 头部注释之前插入内容 "afterAnnotation": &#123;&#125;, // 头部注释之后插入内容 "specialOptions": &#123;&#125;, // 特殊字段自定义 "switch": &#123; "newlineAddAnnotation": true // 默认遇到换行符(\r\n \n \r)添加注释符号 &#125;, "moveCursor": true, // 自动移动光标到Description所在行 "dateFormat": "YYYY-MM-DD HH:mm:ss", "atSymbol": ["@", "@"], // 更改所有文件的自定义注释中的@符号 "atSymbolObj": &#123;&#125;, // 更改单独语言/文件的@ "colon": [": ", ": "], // 更改所有文件的注释冒号 "colonObj": &#123;&#125;, // 更改单独语言/文件的冒号 "filePathColon": "路径分隔符替换", // 默认值： mac: / window是: \ "showErrorMessage": false, // 是否显示插件错误通知 用于debugger "writeLog": false, // 错误日志生成 "CheckFileChange": false, // 单个文件保存时进行diff检查 "createHeader": true, // 新建文件自动添加头部注释 "useWorker": false, // 是否使用工作区设置 "designAddHead": false, // 添加注释图案时添加头部注释 "headDesignName": "random", // 图案注释使用哪个图案 "headDesign": false, // 是否使用图案注释替换头部注释 // 自定义配置是否在函数内生成注释 不同文件类型和语言类型 "cursorModeInternalAll": &#123;&#125;, // 默认为false 在函数外生成函数注释 "openFunctionParamsCheck": true, // 开启关闭自动提取添加函数参数 "functionParamsShape": ["&#123;", "&#125;"], // 函数参数外形自定义 "functionBlankSpaceAll": &#123;&#125;, // 函数注释空格缩进 默认为空对象 默认值为0 不缩进 "functionTypeSymbol": "*", // 参数没有类型时的默认值 "typeParamOrder": "type param", // 参数类型 和 参数的位置自定义 // 自定义语言注释，自定义取消 head、end 部分 // 不设置自定义配置language无效 默认都有head、end "customHasHeadEnd": &#123;&#125;, // "cancel head and function" | "cancel head" | "cancel function" // 自定义语言注释符号，覆盖插件的注释格式 "language": &#123; // js后缀文件 "js": &#123; "head": "/$$", "middle": " $ @", "end": " $/", // 函数自定义注释符号：如果有此配置 会默认使用 "functionSymbol": &#123; "head": "/******* ", // 统一增加几个*号 "middle": " * @", "end": " */" &#125; &#125;, // 一次匹配多种文件后缀文件 不用重复设置 "h/hpp/cpp": &#123; "head": "/*** ", // 统一增加几个*号 "middle": " * @", "end": " */" &#125;, // 针对有特殊要求的文件如：test.blade.php "blade.php":&#123; "head": "&lt;!--", "middle": " * @", "end": "--&gt;", &#125; &#125;, // 默认注释 没有匹配到注释符号的时候使用。 "annotationStr": &#123; "head": "/*", "middle": " * @", "end": " */", "use": false &#125;,&#125;]]></content>
      <categories>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>vscode</tag>
        <tag>插件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初始化css]]></title>
    <url>%2Fblog%2F2019%2F07%2F31%2FCss%2F%E5%88%9D%E5%A7%8B%E5%8C%96css%2F</url>
    <content type="text"><![CDATA[init.css123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153@charset 'utf-8';* &#123; margin: 0; padding: 0; box-sizing: border-box;&#125;html,body,div,span,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,a,address,em,img,ol,ul,li,fieldset,form,label,legend,table,tbody,tfoot,thead,tr,th,td,i,b,s &#123; font-family: pingfang sc, Microsoft YaHei, Helvetica, Arial, sans-serif; font-size: 12px; font-weight: inherit; font-style: inherit; margin: 0; padding: 0; border: 0&#125;ul,ol &#123; list-style: none&#125;a img &#123; vertical-align: top; border: none&#125;a &#123; text-decoration: none&#125;button &#123; overflow: visible; margin: 0; padding: 0; border: 0 none; background-color: transparent&#125;button::-moz-focus-inner &#123; padding: 0&#125;input[type=password] &#123; -webkit-text-security: disc&#125;textarea:focus,input:focus,button:focus &#123; outline: none&#125;body &#123; word-wrap: break-word&#125;* &#123; -webkit-tap-highlight-color: rgba(0, 0, 0, 0)&#125;.icon &#123; display: inline-block; zoom: 1; vertical-align: middle; background-repeat: no-repeat; background-position: left top&#125;.btn &#123; display: inline-block; zoom: 1; text-align: center; vertical-align: middle&#125;.none &#123; display: none&#125;html &#123; font-size: 20px&#125;body &#123; background: #fff; padding-top: 3rem;&#125;@media screen and (max-width:320px) &#123; html &#123; font-size: 17px &#125;&#125;@media screen and (min-width:321px) and (max-width:360px) &#123; html &#123; font-size: 19px &#125;&#125;@media screen and (min-width:361px) and (max-width:375px) &#123; html &#123; font-size: 20px &#125;&#125;@media screen and (min-width:376px) and (max-width:414px) &#123; html &#123; font-size: 22px &#125;&#125;.bash-box &#123; background: #fff; width: 100%; position: relative; overflow: hidden;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[正则表达式集合]]></title>
    <url>%2Fblog%2F2019%2F07%2F31%2FJS%2F%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E9%9B%86%E5%90%88%2F</url>
    <content type="text"><![CDATA[A股代码1/^(s[hz]|S[HZ])(000[\d]&#123;3&#125;|002[\d]&#123;3&#125;|300[\d]&#123;3&#125;|600[\d]&#123;3&#125;|60[\d]&#123;4&#125;)$/ 大于0, 小于150, 支持小数位出现5, 如145.5, 用于判断考卷分数1/^150$|(^\d|^[1-9]\d|^[1][0-4]\d)(\.5)?$/ html注释1/&lt;!--(.*?)--&gt;$/ md5格式(32位)1/^[a-f0-9]&#123;32&#125;$/ 版本号格式必须为X.Y.Z1/^\d+(\.\d+)&#123;2&#125;$/ 视频链接地址（视频格式可按需增删）1/^https?:\/\/.*?(swf|avi|flv|mpg|rm|mov|wav|asf|3gp|mkv|rmvb|mp4)$/i 图片链接地址（图片格式可按需增删）1/^https?:\/\/.*?(gif|png|jpg|jpeg|webp|svg|psd|bmp|tif)$/i 24小时制时间（HH:mm:ss）1/^((?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d$)/ 12小时制时间（hh:mm:ss）1/^(1[0-2]|0?[1-9]):[0-5]\d:[0-5]\d$/ base64格式1/^\s*data:([a-z]+\/[a-z0-9-+.]+(;[a-z-]+=[a-z0-9-]+)?)?(;base64)?,([a-z0-9!$&amp;',()*+;=\-._~:@\/?%\s]*?)\s*$/i 数字/货币金额（支持负数、千分位分隔符）1/(^[-]?[1-9]\d&#123;0,2&#125;($|(,\d&#123;3&#125;)*($|(\.\d&#123;1,2&#125;$))))|((^[0](\.\d&#123;1,2&#125;)?)|(^[-][0]\.\d&#123;1,2&#125;))$/ 数字/货币金额 (只支持正数、不支持校验千分位分隔符)1/(^[1-9]([0-9]+)?(\.[0-9]&#123;1,2&#125;)?$)|(^(0)&#123;1&#125;$)|(^[0-9]\.[0-9]([0-9])?$)/ 银行卡号（16或19位）1/^([1-9]&#123;1&#125;)(\d&#123;15&#125;|\d&#123;18&#125;)$/ 中文姓名1/^([\u4e00-\u9fa5·]&#123;2,16&#125;)$/ 英文姓名1/(^[a-zA-Z]&#123;1&#125;[a-zA-Z\s]&#123;0,20&#125;[a-zA-Z]&#123;1&#125;$)/ 新能源车牌号1/[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;(([0-9]&#123;5&#125;[DF])|([DF][A-HJ-NP-Z0-9][0-9]&#123;4&#125;))$/ 非新能源车牌号1/^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;[A-Z0-9]&#123;4&#125;[A-Z0-9挂学警港澳]&#123;1&#125;$/ 车牌号(新能源+非新能源)1/^([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-HJ-NP-Z]&#123;1&#125;(([0-9]&#123;5&#125;[DF])|([DF]([A-HJ-NP-Z0-9])[0-9]&#123;4&#125;)))|([京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领 A-Z]&#123;1&#125;[A-Z]&#123;1&#125;[A-HJ-NP-Z0-9]&#123;4&#125;[A-HJ-NP-Z0-9 挂学警港澳]&#123;1&#125;)$/ URL链接(网址)1/^((https?|ftp|file):\/\/)?([\da-z.-]+)\.([a-z.]&#123;2,6&#125;)(\/\w\.-]*)*\/?/ 中国手机号(严谨), 根据工信部2019年最新公布的手机号段1/^((\+|00)86)?1((3[\d])|(4[5,6,7,9])|(5[0-3,5-9])|(6[5-7])|(7[0-8])|(8[\d])|(9[1,8,9]))\d&#123;8&#125;$/ 中国手机号(宽松), 只要是13,14,15,16,17,18,19开头即可1/^((\+|00)86)?1[3-9]\d&#123;9&#125;$/ 中国手机号(最宽松), 只要是1开头即可, 如果你的手机号是用来接收短信, 优先建议选择这一条1/^((\+|00)86)?1\d&#123;10&#125;$/ 日期, 如: 2000-01-01或2000-1-11/^\d&#123;4&#125;(-)(1[0-2]|0?\d)\1([0-2]\d|\d|30|31)$/ email地址1/^[a-zA-Z0-9.!#$%&amp;'*+\/=?^_`&#123;|&#125;~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?(?:\.[a-zA-Z0-9](?:[a-zA-Z0-9-]&#123;0,61&#125;[a-zA-Z0-9])?)*$/ 国内座机电话,如: 0341-860912341/\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;/ 一代身份证号(15位数字)1/^\d&#123;8&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;$/ 二代身份证号(18位数字),最后一位是校验位,可能为数字或字符X1/^\d&#123;6&#125;(18|19|20)\d&#123;2&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;(\d|X|x)$/ 身份证号, 支持1/2代(15位/18位数字)1/(^\d&#123;8&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;$)|(^\d&#123;6&#125;(18|19|20)\d&#123;2&#125;(0\d|10|11|12)([0-2]\d|30|31)\d&#123;3&#125;(\d|X|x)$)/ 护照（包含香港、澳门）1/(^[EeKkGgDdSsPpHh]\d&#123;8&#125;$)|(^(([Ee][a-fA-F])|([DdSsPp][Ee])|([Kk][Jj])|([Mm][Aa])|(1[45]))\d&#123;7&#125;$)/ 帐号是否合法(字母开头，允许5-16字节，允许字母数字下划线组合1/^[a-zA-Z][a-zA-Z0-9_]&#123;4,15&#125;$/ 纯中文/汉字1/^(?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])+$/ 是否小数1/^\d+\.\d+$/ 电话(座机)1/^0\d&#123;2,3&#125;-\d&#123;7,8&#125;$/ 纯数字1/^\d&#123;1,&#125;$/ 是否html标签1/&lt;(.*)&gt;.*&lt;\/\1&gt;|&lt;(.*) \/&gt;/ 是否qq号格式正确1/^[1-9][0-9]&#123;4,10&#125;$/ 是否由数字和字母组成1/^[A-Za-z0-9]+$/ 纯英文字母1/^[a-zA-Z]+$/ 纯小写英文字母组成1/^[a-z]+$/ 纯大写英文字母1/^[A-Z]+$/ 密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符1/^.*(?=.&#123;6,&#125;)(?=.*\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&amp;*? ]).*$/ 用户名正则，4到16位（字母，数字，下划线，减号）1/^[a-zA-Z0-9_-]&#123;4,16&#125;$/ ip-v41/^(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.)&#123;3&#125;(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ ip-v61/^((([0-9A-Fa-f]&#123;1,4&#125;:)&#123;7&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;:[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;5&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)?[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;4&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,2&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;3&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,3&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;2&#125;:([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,4&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;6&#125;((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;:((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|(::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;((\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b)\.)&#123;3&#125;(\b((25[0-5])|(1\d&#123;2&#125;)|(2[0-4]\d)|(\d&#123;1,2&#125;))\b))|([0-9A-Fa-f]&#123;1,4&#125;::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,5&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(::([0-9A-Fa-f]&#123;1,4&#125;:)&#123;0,6&#125;[0-9A-Fa-f]&#123;1,4&#125;)|(([0-9A-Fa-f]&#123;1,4&#125;:)&#123;1,7&#125;:))$/i 16进制颜色1/^#?([a-fA-F0-9]&#123;6&#125;|[a-fA-F0-9]&#123;3&#125;)$/ 微信号，6至20位，以字母开头，字母，数字，减号，下划线1/^[a-zA-Z][-_a-zA-Z0-9]&#123;5,19&#125;$/ 中国邮政编码1/^(0[1-7]|1[0-356]|2[0-7]|3[0-6]|4[0-7]|5[1-7]|6[1-7]|7[0-5]|8[013-6])\d&#123;4&#125;$/ 只包含中文和数字1/^((?:[\u3400-\u4DB5\u4E00-\u9FEA\uFA0E\uFA0F\uFA11\uFA13\uFA14\uFA1F\uFA21\uFA23\uFA24\uFA27-\uFA29]|[\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879][\uDC00-\uDFFF]|\uD869[\uDC00-\uDED6\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0])|(\d))+$/ 不能包含字母1/^[^A-Za-z]*$/ 借鉴网址正则大全]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[突破!important]]></title>
    <url>%2Fblog%2F2019%2F07%2F31%2FCss%2F%E7%AA%81%E7%A0%B4!important%2F</url>
    <content type="text"><![CDATA[不增加class的情况下如果突破!important12345.div&#123; width: 200px!important; height: 200px; background: #fff;&#125; 实现123456.div&#123; width: 200px!important; height: 200px; background: #fff; max-width: 250px;&#125; 结论 当min-width、max-width、min-height、max-height和!important 发生冲突时，前面4个才是大哥。 当min和max发生冲突时，min才是大哥。]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactJS中箭头函数和bind]]></title>
    <url>%2Fblog%2F2019%2F07%2F30%2FJS%2FReactJS%E4%B8%AD%E7%AE%AD%E5%A4%B4%E5%87%BD%E6%95%B0%E5%92%8Cbind%2F</url>
    <content type="text"><![CDATA[写法集合12345678910111213141516171819202122232425262728293031323334/*---- 写法一: ----*/&lt;div onClick=&#123;this.doClick.bind(this)&#125;&gt;doClick()&#123; //do something&#125;/*---- 写法二: ----*/constructor(props) &#123; super(props); this.doClick = this.doClick.bind(this);&#125;&lt;div onClick=&#123;this.doClick&#125;&gt;doClick()&#123; //do something&#125;/*---- 写法三: ----*/&lt;div onClick=&#123;this.doClick&#125;&gt;doClick = () =&gt; &#123; //do something&#125;/*---- 写法四: ----*/&lt;div onClick=&#123;()=&gt; this.doClick()&#125;&gt;doClick = () =&gt; &#123; //do something&#125; 写法分析 其实最终代码上2和3是一致的，1和4是一致的; 1和4的问题在于，由于绑定是在render中执行，而render是会执行多次的，每次bind和箭头函数都会产生一个新的函数，因而带来了额外的开销 2和3避免了每次产生新的函数，效果等同，显然3的写法更简洁，因而推荐3 涉及传参 写法三如果需要传递参数，必须使用写法四才能正确传递参数 借鉴网址bind和箭头函数-哪个更好呢涉及传参的时候onClick写法问题]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[before和after伪类技巧]]></title>
    <url>%2Fblog%2F2019%2F07%2F19%2FHtml%2Fbefore%E5%92%8Cafter%E4%BC%AA%E7%B1%BB%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[伪类实现（发布日期：2019-05-14） 一般来说，发布日期是固定文本，后面的日期是由服务器动态拉去渲染的，按照普通做法 123456789101112/*-- html --*/&lt;p class=&quot;date&quot;&gt;发布日期：2019-05-14&lt;/p&gt;/*-- css --*/.date&#123; font-size: 14px; color: #333;&#125;/*-- js --*/var date = new Date();$(&quot;.date&quot;).html(&apos;发布日期：&apos; + date); 伪类实现 1234567891011121314/*-- html --*/&lt;p class=&quot;date&quot;&gt;2019-05-14&lt;/p&gt;/*-- css --*/.date&#123; font-size: 14px; color: #333;&#125;.date:before&#123; content: &apos;发布日期：&apos;&#125;/*-- js --*/var date = new Date();$(&quot;.date&quot;).html(date);]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode中调试flutter.md]]></title>
    <url>%2Fblog%2F2019%2F04%2F11%2FFlutter%2Fvscode%E4%B8%AD%E8%B0%83%E8%AF%95flutter%2F</url>
    <content type="text"><![CDATA[debugPaintSizeEnabled可视化调试 类似于React Native开发菜单中中toggle inspector，对于调试dom结构层级很有帮助. 调用方法12345678910111213141516import &apos;package:flutter/material.dart&apos;;import &apos;package:flutter/rendering.dart&apos; show debugPaintSizeEnabled;import &apos;./tabNavigation/tabNavigation.dart&apos;;void main() =&gt; runApp(new MyApp());class MyApp extends StatelessWidget &#123; @override Widget build(BuildContext context) &#123; debugPaintSizeEnabled = true; return new MaterialApp( title: &apos;my app&apos;, home: new TabNavigation(), ); &#125;&#125; vscode中dart devtools插件 在首次运行flutter项目时会提示安装该插件，安装完成后会自动在浏览器中打开，类似React Native开发菜单中Debug JS Remotely. 下次打开时，首先查看-&gt;命令面板（快捷键command+shift+p）,输入dart根据提示选择Dart: Open DevTools即可运行.(只能在vscode中f5调试使用,flutter run命令行启动的不能检查到服务启动) 不建议用vscode中通过f5调试flutter,反应延迟 通过命令行工具,flutter run运行]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[trim方法]]></title>
    <url>%2Fblog%2F2019%2F03%2F21%2FJS%2Ftrim%E6%96%B9%E6%B3%95%2F</url>
    <content type="text"><![CDATA[自定义方法1234567891011//删除左右两端的空格function trim(str) &#123; if (typeof str !== 'string') &#123; return str; &#125; return str.replace(/(^\s*)|(\s*$)/g, "");&#125;export &#123; trim&#125; 问题由来 在其他页面调用trim()方法，发现写错方法也没有报错，并且具备了同样的删除左右两端的空格功能12345import Utils from &apos;../Utils&apos;;test()&#123; String.trim();&#125; 原因 String.prototype本身就有trim()方法，所以即便是上面写错了，只要类型是String就不会报错.]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[react-devtools教程]]></title>
    <url>%2Fblog%2F2019%2F03%2F19%2FReactNative%2Freact-devtools%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[目的 主要是用来调试样式,自带的开发菜单无法满足需求. 安装 sudo npm install -g react-devtools --unsafe-perm=true 必须加上sudo,加上后面unsafe-perm=true参数，必须使用vpn,否则都会导致安装不成功. 启动 react-devtools(会自行启动工具) 调试方法 启动RN app之后，Command+D打开开发菜单，选择Toggle Inspector，然后点击想要查看的区域即可.]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo添加搜索功能]]></title>
    <url>%2Fblog%2F2019%2F03%2F19%2FHexo%2Fhexo%E6%B7%BB%E5%8A%A0%E6%90%9C%E7%B4%A2%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[安装插件 npm install hexo-generator-searchdb --save 修改hexo站点配置文件 路径: blog/_config.yml1234567search: path: search.xml field: post format: html limit: 10000PS:每个冒号后面都有空格。 修改next主题配置文件 路径: /blog/themes/next/_config.yml1234local_search: enable: truePS: enable由false改为true。 问题汇总 LocalSearch一直转圈，卡死问题. 由于使用的是localSearch，会透过编译完后public里面的search.xml作为搜寻主体，有了搜寻主体后就要先去验证格式的正确性.内容量太大也没办法肉眼去验证，就找了线上验证的网站，把 search.xml 的内容全部丢下去验证后跳出了这个错误。验证xml文件格式 编译后缺少index.html npm ls –depth 0(查看npm安装各hexo插件的情况),然后逐一安装缺失的包即可。]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git命令]]></title>
    <url>%2Fblog%2F2019%2F03%2F19%2FGit%2Fgit%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[提交步骤 提交到暂存区git add . 提交到本地仓库git commit -m ‘xxx’ 拉取远程仓库git pull 提交远程仓库git push 查看当前git状态 git status 放弃本地文件 git checkout fileName放弃fileName文件修改 git checkout .放弃所有本地文件修改 分支 git branch -a查看所有分支 git remote prune origin清理本地分支与远程分支同步(sourcetree在git远程删除分支后刷新也不会同步，必须执行git命令才能与远程分支同步) git提交github反复输入密码1git config --global credential.helper store]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative深拷贝]]></title>
    <url>%2Fblog%2F2019%2F03%2F13%2FReactNative%2FReactNative%E6%B7%B1%E6%8B%B7%E8%B4%9D%2F</url>
    <content type="text"><![CDATA[JS方法12345const obj = &#123; a:1, b:2&#125;const newObj = JSON.parse(JSON.stringify(obj)); 延伸问题 如果obj里面有时间对象，则JSON.stringify后再JSON.parse的结果，时间将只是字符串的形式。而不是时间对象； 如果obj里有RegExp、Error对象，则序列化的结果将只得到空对象； 如果obj里有函数，undefined，则序列化的结果会把函数或 undefined丢失； 如果obj里有NaN、Infinity和-Infinity，则序列化的结果会变成null; JSON.stringify()只能序列化对象的可枚举的自有属性，例如 如果obj中的对象是有构造函数生成的， 则使用JSON.parse(JSON.stringify(obj))深拷贝后，会丢弃对象的constructor； 如果对象中存在循环引用的情况也无法正确实现深拷贝； reactnative官方库方法12345678import _ from &apos;lodash&apos;;const obj = &#123; a:1, b:2&#125;const newObj = _.cloneDeep(obj); 验证对象是否相等12JSON.stringify(obj) == JSON.stringify(newObj) //trueobj == newObj //false]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[全局类似播放音乐组件思路]]></title>
    <url>%2Fblog%2F2019%2F03%2F12%2FReactNative%2F%E5%85%A8%E5%B1%80%E7%B1%BB%E4%BC%BC%E6%92%AD%E6%94%BE%E9%9F%B3%E4%B9%90%E7%BB%84%E4%BB%B6%E6%80%9D%E8%B7%AF%2F</url>
    <content type="text"><![CDATA[根组件1将&lt;Video /&gt;放在最上层的页面中 =&gt; &lt;AppNavigation /&gt;类似这种导航根组件 ref子组件和global全局结合1&lt;Video ref=&#123;video =&gt; global.video = video&#125; 借鉴网址全局播放音乐的组件]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Global注册全局组件]]></title>
    <url>%2Fblog%2F2019%2F03%2F12%2FReactNative%2FGlobal%E6%B3%A8%E5%86%8C%E5%85%A8%E5%B1%80%E7%BB%84%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[Global注册方法 导出一个包含组件的常量 1234567891011let parmam = &#123; ...参数&#125;;export const renderGlobalComponent = (&#123; ...param&#125;)=&gt;&#123; return &lt;View&gt;&lt;Text&gt;自定义组件&lt;/Text&gt;&lt;/View&gt;&#125;global.RenderGlobalComponent = renderGlobalComponent; 导出一个返回组件的函数 12345export function renderGlobalComponent(param)&#123; return &lt;View&gt;&lt;Text&gt;自定义组件&lt;/Text&gt;&lt;/View&gt;&#125;global.RenderGlobalComponent = renderGlobalComponent; 全局调用1需要调用的页面直接&lt;RenderGlobalComponent /&gt;即可。 global.RenderGlobalComponent首字母必须大写 原因是因为react组件的首字母必须大写，全局方法注册也需要大写，否则会报错。]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[docker安装nextcloud教程]]></title>
    <url>%2Fblog%2F2019%2F03%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fdocker%E5%AE%89%E8%A3%85nextcloud%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[1.docker安装 yum install -y docker 2.启动docker并设置自启 systemctl start docker systemctl enable docker 3.查找并下载nextcloud镜像 docker search nextcloud docker pull docker.io/nextcloud12345678910111213141516171819202122232425262728参考输出：Using default tag: latestTrying to pull repository docker.io/library/nextcloud ...latest: Pulling from docker.io/library/nextcloud802b00ed6f79: Already exists59f5a5a895f8: Pull complete6898b2dbcfeb: Pull complete8e0903aaa47e: Pull complete2961af1e196a: Pull complete71f7016f79a0: Pull complete5e1a48e5719c: Pull complete7ae5291984f3: Pull complete725b65166f31: Pull completee90b121f9520: Pull completeb5a272809bbd: Pull completef045f3ae0e2b: Pull complete7f51c9ea2d8e: Pull complete5aa9d0ed164a: Pull complete8eea44e2bfc7: Pull complete5302ebd5abce: Pull complete78f0335decb3: Pull complete1a2f85124682: Pull completeed4cec78a159: Pull completea68e1b656d3d: Pull completed0b66f00fda7: Pull complete45c9777c18b5: Pull completeDigest: sha256:c8d1091cc86051dc5e8de0114e3121fe0562cb417c56f2644ed92838008d8806Status: Downloaded newer image for docker.io/nextcloud:latest 4.启用容器 docker run -d --restart=always --name nextcloud -p 8080:80 -v /root/www/nextcloud:/data docker.io/nextcloud 123456参考输出：ae96013c7f0ab05194a4488d1fa61b1c6274c272a53b3d418418b56a88e2e230如果有其他报错信息请自行排查，比如我遇到过的第一种 8080:8080修改端口错误 =&gt; 8080:80第二种 容器已存在 5.浏览器访问ip:8080配置nextcloud 数据目录/var/www/html/data不能修改，否则会造成无法创建或修改目录错误 问题 大文件上传413错误（即便nextcloud设置了最大上传文件10G）123原因是因为使用了nginx代理端口，需要设置nginx最大上传文件限制vi /etc/nginx/nginx.conf 在http&#123;...&#125;块中加入 =&gt;client_max_body_size 10G; 借鉴网址Docker+Nextcloud快速部署个人网盘]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Docker基本知识]]></title>
    <url>%2Fblog%2F2019%2F03%2F08%2FDocker%2FDocker%E5%9F%BA%E6%9C%AC%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[docker安装 yum install -y docker docker 启动,重启和开机启动 systemctl start docker systemctl enable docker systemctl restart docker docker查找和下载Nextcloud网盘的镜像(启用命令) docker search nextcloud docker pull docker.io/nextcloud docker run -d --restart=always --name nextcloud -p 8080:80 -v /root/www/nextcloud:/data docker.io/nextcloud docker导出某个容器 docker export 容器名称 docker导入某个容器 docker import url docker删除某个容器（加上-f可以删除运行中的容器） docker rm -f 容器名称 docker查看运行容器 docker ps -a 登录docker容器 docker exec -it 容器名称 /bin/sh docker nextcloud文件位置1/var/lib/docker/volumes/容器名称/_data/data/用户名/files/所有文件]]></content>
      <categories>
        <category>docker</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>docker</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative极光推送]]></title>
    <url>%2Fblog%2F2019%2F02%2F14%2FReactNative%2FReactNative%E6%9E%81%E5%85%89%E6%8E%A8%E9%80%81%2F</url>
    <content type="text"><![CDATA[前提条件 rn版本: 0.56.0 com.android.tools.build:gradle:2.3.3 distributionUrl=https\://services.gradle.org/distributions/gradle-3.5.1-all.zip 当前时间2019-02-14(最新版本如下) jpush-react-native版本: 2.5.1 =&gt; 降级 2.1.3 jcore-react-native版本: 1.3.1 =&gt; 降级 1.2.2 首先保证rn版本不变动，采用jpush-react-native因为gradle版本过低会有各种问题，在不改变gradle版本的情况下，降级jpush-react-native插件版本 安装极光推送 1.安装jpush-react-native, jcore-react-native. npm install jpush-react-native@版本号 jcore-react-native@版本号 –save版本号分别为2.1.3和1.2.2 2.react-native link jpush-react-native(针对性的link，避免之前手动配置的其它插件重复配置造成报错) 3.react-native link jcore-react-native(针对性的link，避免之前手动配置的其它插件重复配置造成报错) Android手动配置(重要) 1.保证配置/android/app/build.gradle 1234567891011121314151617android &#123; defaultConfig &#123; applicationId &quot;yourApplicationId&quot; ... manifestPlaceholders = [ JPUSH_APPKEY: &quot;yourAppKey&quot;, //在此替换你的APPKey APP_CHANNEL: &quot;default&quot; //应用渠道号 ] &#125;&#125;dependencies &#123; compile fileTree(dir: &quot;libs&quot;, include: [&quot;*.jar&quot;]) compile project(&apos;:jpush-react-native&apos;) // 添加 jpush 依赖 compile project(&apos;:jcore-react-native&apos;) // 添加 jcore 依赖 compile &quot;com.facebook.react:react-native:+&quot; // From node_modules&#125; 2.保证配置/android/settings.gradle 1234include &apos;:jpush-react-native&apos;project(&apos;:jpush-react-native&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/jpush-react-native/android&apos;)include &apos;:jcore-react-native&apos;project(&apos;:jcore-react-native&apos;).projectDir = new File(rootProject.projectDir, &apos;../node_modules/jcore-react-native/android&apos;) 3.保证配置/android/app/src/main/AndroidManifest.xml 1234567&lt;application ... &lt;!-- Required . Enable it you can get statistics data with channel --&gt; &lt;meta-data android:name=&quot;JPUSH_CHANNEL&quot; android:value=&quot;$&#123;APP_CHANNEL&#125;&quot;/&gt; &lt;meta-data android:name=&quot;JPUSH_APPKEY&quot; android:value=&quot;$&#123;JPUSH_APPKEY&#125;&quot;/&gt;&lt;/application&gt; 4.保证配置/android/app/src/main/java/com/xzy/MainApplication.java 12345678910111213141516171819202122232425262728293031323334353637383940import cn.jpush.reactnativejpush.JPushPackage; // &lt;-- 导入 JPushPackagepublic class MainApplication extends Application implements ReactApplication &#123; // 设置为 true 将不会弹出 toast private boolean SHUTDOWN_TOAST = false; // 设置为 true 将不会打印 log private boolean SHUTDOWN_LOG = false; private final ReactNativeHost mReactNativeHost = new ReactNativeHost(this) &#123; @Override public boolean getUseDeveloperSupport() &#123; return BuildConfig.DEBUG; &#125; @Override protected String getJSMainModuleName() &#123; // rn 0.49 后修改入口为 index return &quot;index&quot;; &#125; @Override protected List&lt;ReactPackage&gt; getPackages() &#123; return Arrays.&lt;ReactPackage&gt;asList( new MainReactPackage(), new JPushPackage(SHUTDOWN_TOAST, SHUTDOWN_LOG) // &lt;-- 添加 JPushPackage ); &#125; &#125;; @Override public ReactNativeHost getReactNativeHost() &#123; return mReactNativeHost; &#125; @Override public void onCreate() &#123; super.onCreate(); SoLoader.init(this, /* native exopackage */ false); &#125;&#125; IOS手动配置(重要) ios完全可以使用当前最新版本jpush-react-native版本: 2.5.1和jcore-react-native版本: 1.3.1,按照文档配置即可，但是因为andorid的问题降级版本，所以需要特殊配置 1.首先按照文档配置 2.AppDelegate.m不会自动写入文件，需要手动填写1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556//头部引入#import &lt;RCTJPushModule.h&gt;#ifdef NSFoundationVersionNumber_iOS_9_x_Max#import &lt;UserNotifications/UserNotifications.h&gt;#endif//方法引入- (void)application:(UIApplication *)application didRegisterForRemoteNotificationsWithDeviceToken:(NSData *)deviceToken&#123; [JPUSHService registerDeviceToken:deviceToken];&#125;- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo&#123; [[NSNotificationCenter defaultCenter] postNotificationName:kJPFDidReceiveRemoteNotification object:userInfo];&#125;- (void)application:(UIApplication *)application didReceiveLocalNotification:(UILocalNotification *)notification&#123; [[NSNotificationCenter defaultCenter] postNotificationName:kJPFDidReceiveRemoteNotification object: notification.userInfo];&#125;- (void)application:(UIApplication *)application didReceiveRemoteNotification:(NSDictionary *)userInfo fetchCompletionHandler:(void (^) (UIBackgroundFetchResult))completionHandler&#123; [[NSNotificationCenter defaultCenter] postNotificationName:kJPFDidReceiveRemoteNotification object:userInfo];&#125;- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center willPresentNotification:(UNNotification *)notification withCompletionHandler:(void (^)(NSInteger))completionHandler&#123; NSDictionary * userInfo = notification.request.content.userInfo; if ([notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123; [JPUSHService handleRemoteNotification:userInfo]; [[NSNotificationCenter defaultCenter] postNotificationName:kJPFDidReceiveRemoteNotification object:userInfo]; &#125; completionHandler(UNNotificationPresentationOptionAlert);&#125;- (void)jpushNotificationCenter:(UNUserNotificationCenter *)center didReceiveNotificationResponse:(UNNotificationResponse *)response withCompletionHandler:(void (^)())completionHandler&#123; NSDictionary * userInfo = response.notification.request.content.userInfo; if ([response.notification.request.trigger isKindOfClass:[UNPushNotificationTrigger class]]) &#123; [JPUSHService handleRemoteNotification:userInfo]; [[NSNotificationCenter defaultCenter] postNotificationName:kJPFOpenNotification object:userInfo]; &#125; completionHandler();&#125;//调用 JPUSHRegisterEntity * entity = [[JPUSHRegisterEntity alloc] init]; entity.types = UNAuthorizationOptionAlert|UNAuthorizationOptionBadge|UNAuthorizationOptionSound; [JPUSHService registerForRemoteNotificationConfig:entity delegate:self];(这里是ios弹框让用户允许推送，rn内的initPush在该版本不可用，必须添加到原生中.) [JPUSHService setupWithOption:launchOptions appKey:@&quot;3f6a10618e27be707fa06fad&quot; channel:nil apsForProduction:nil]; 错误处理Android错误 1.sdk相关错误（将android 9.0 = 6.0等都勾选下载sdk） 2.’:jcore-react-native:verifyReleaseResources’. &gt; com.android.ide.common.process.ProcessException: Failed to execute aap(参考下面问题排查借鉴网址) 将node_module中jcore-react-native和jpush-react-native的compileSdkVersion和targetSdkVersion都改为26（目录为/android/build.gradle, buildToolsVersion有些也需要修改为26.0.3） 3.错误: 无法将类 JPushPackage中的构造器 JPushPackage应用到给定类型; MainApplication.java文件中new JPushPackage(SHUTDOWN_TOAST, SHUTDOWN_LOG)必须带参数 IOS错误 1.Module RCTJPushModule requires main queue setup since it overrides init but doesn’t implement requiresMainQueueSetup. 12345目录: /node_modules/jpush-react-native/ios/RCTJPushModule/RCTJPushModule.m 230行处添加+ (BOOL)requiresMainQueueSetup &#123; return YES;&#125; 2.ios系统8.0真机运行各种报错，不能使用低版本(纠结了一天。。。) 3.ios真机运行提示A valid provisioning profile for this executable was not found错误123问题是因为切换不同的team造成的打开项目里的project.pbxproj工程文件中,把签名TeamID全部手动替换成目标TeamID JS中使用 指定用户推送，服务器提供绑定和解绑RegisterationID接口，需要存储在数据库 只有IOS才能设置Badge，IOS的允许推送注册在原生代码中. Android原生推送没有角标设置，各个厂商有自己的集成 Android推送必须自启动（默认未开启自启动，需要用户手动开启） Android推送消息有延迟 Android的addReceiveNotificationListener和addReceiveOpenNotificationListener方法可以用，前提是必须先调用initPush和notifyJSDidLoad方法.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051componentDidMount() &#123; //没有消息中心，所以每次进入默认清除Badge if (Platform.OS === &apos;ios&apos;) &#123; JPushModule.setBadge(0, success =&gt; &#123;&#125;); &#125; else &#123; JPushModule.initPush(); JPushModule.notifyJSDidLoad((resultCode) =&gt; &#123; console.log(resultCode); &#125;); &#125; AuthStorage.getStorageRegistrationID().then(Registeration_Id =&gt; &#123; console.log(Registeration_Id); if (!Registeration_Id) &#123; JPushModule.getRegistrationID(RegisterationID =&gt; &#123; this.doPushRegisterWithAuthToken(RegisterationID); AuthStorage.setStorageRegistrationID(RegisterationID); &#125;) &#125; else &#123; this.doPushRegisterWithAuthToken(Registeration_Id); &#125; &#125;) // JPushModule.addOpenNotificationLaunchAppListener(result =&gt; &#123; // console.log(&apos;点击推送启动应用事件&apos;); // console.log(result); // JPushModule.setBadge(0, success =&gt; &#123;&#125;) // &#125;) JPushModule.addReceiveNotificationListener(result =&gt; &#123; console.log(&apos;接收推送事件&apos;); console.log(result); if (Platform.OS === &apos;ios&apos;) &#123; JPushModule.setBadge(result.aps &amp;&amp; result.aps.badge, success =&gt; &#123;&#125;) &#125; &#125;); JPushModule.addReceiveOpenNotificationListener(result =&gt; &#123; console.log(&apos;点击推送事件&apos;); console.log(result); if (Platform.OS === &apos;ios&apos;) &#123; JPushModule.setBadge(result.aps &amp;&amp; result.aps.badge - 1, success =&gt; &#123;&#125;) &#125; &#125;); // JPushModule.addnetworkDidLoginListener(result =&gt; &#123; // console.log(&apos;添加网络已登录事件回调&apos;); // console.log(result); // &#125;)&#125;componentWillUnmount() &#123; // JPushModule.removeOpenNotificationLaunchAppEventListener(); JPushModule.removeReceiveNotificationListener(); JPushModule.removeReceiveOpenNotificationListener();&#125; 问题排查借鉴网址Execution failed for task ‘:jcore-react-native:verifyReleaseResources’.错误: 无法将类 JPushPackage中的构造器 JPushPackage应用到给定类型A valid provisioning profile for this executable was not found真机调试不能运行]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac新电脑配置-开发环境篇]]></title>
    <url>%2Fblog%2F2019%2F01%2F09%2FMacOS%2Fmac%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E7%AF%87%2F</url>
    <content type="text"><![CDATA[ReactNative环境安装]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac新电脑配置-个人设置篇]]></title>
    <url>%2Fblog%2F2019%2F01%2F09%2FMacOS%2Fmac%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE-%E4%B8%AA%E4%BA%BA%E8%AE%BE%E7%BD%AE%E7%AF%87%2F</url>
    <content type="text"><![CDATA[顶部栏WebDriver不显示在顶部 打开设置-不显示在顶部栏 底部栏 从Dock栏移除 =&gt; Siri,Safair,邮件,通讯录,日历,备忘录,提醒事项,地图,照片,信息,FaceTime,iTunes,iBooks,AppStore,下载 增加至Dock栏 =&gt; Chrome,TeamViewer,QQ,终端,SourceTree,Sublime Text,Xcode,Robo 3T,Photoshop cc 2017, 系统偏好设置 通用-外观-勾选使用暗色菜单栏和程序坞 桌面与屏幕保护程序-设置背景 Dock-调整Dock栏大小 Mission Control-设置触发角 键盘-修饰键-Control与Command交换 鼠标-取消勾选滚动方向：自然 App Store-取消自动更新 扩展-勾选计算器，取消勾选股票，天气等 辅助功能-通用-取消VoiceOver勾选 辅助功能-缩放-勾选配合修饰键滚动手势缩放-command]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac新电脑配置-软件篇]]></title>
    <url>%2Fblog%2F2019%2F01%2F09%2FMacOS%2Fmac%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE-%E8%BD%AF%E4%BB%B6%E7%AF%87%2F</url>
    <content type="text"><![CDATA[Xcode App Store下载即可，因为系统是10.13.3，所以下载的是上一版本兼容。 TeamViewer 通过TeamViewer官网下载 禁止开机启动，配置账号，设置密码用于无人值守 ShadowsocksX-NG 通过github下载ss客户端下载地址 Chrome 连接SS之后通过官网下载Chrome 登陆谷歌账号同步书签等信息 NodeJs 官网下载安装NodeJs下载地址 npm list -g –depth 0(查看全局安装过的包) nrm源切换 sudo npm i nrm@版本号 -g1.0.2 nrm use taobao(切换taobao源) nrm ls(查看当前源列表和选择的源) hexo-cli播客 sudo npm i hexo-cli@版本号 -g1.1.0 Sourcetree 官网下载安装Sourcetree下载地址 验证关联Github账号，克隆对应项目 Sublime-Text3 官网下载安装Sublime-Text3下载地址 robomongo 官网下载安装robomongo下载地址 Microsoft for Mac 从百度云盘下载安装 Photoshop cc 2017 从百度云盘下载安装 QQ 设置-应用-关闭天气 设置-应用-关闭腾讯新闻 设置-应用-关闭自选股 设置-应用-关闭日程 设置-应用-关闭富途牛牛]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[AMD安装黑苹果]]></title>
    <url>%2Fblog%2F2019%2F01%2F09%2FMacOS%2FAMD%E5%AE%89%E8%A3%85%E9%BB%91%E8%8B%B9%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[介绍安装相关 系统版本MacOS 10.13.3 镜像为网上资源（吉米镜像） U盘 Clover引导，目前启动还是依赖U盘，暂未研究硬盘引导 自带网卡驱动，自己打显卡和声卡驱动（声卡驱动问题待定） 配置 AMD Ryzen 1700x 华擎 X370 Killer SLI主板 宇瞻（Apacer） 黑豹玩家系列 DDR4 2400 8G x 2 技嘉 GTX 1070ti 双固态 闪迪(SanDisk) 加强版 120G X 2 + 希捷2T机械硬盘 双显示器 2K + 1080P 海韵（Seasonic）额定750W G750 电源 安装目录 win10安装在一个固态中 黑苹果安装在一个固态中 机械硬盘为win10存放资料和安装应用程序的地方 准备工具（软件） dmg镜像 TransMac(制作U盘Clover引导和镜像) DiskGenius（硬盘管理工具） easyUEFI(未使用，做硬盘引导用) 大于镜像的U盘（一般8G即可） WebDriver-387.10.10.10.25.156 步骤1.TransMac制作启动盘 格式化U盘，在软件的左侧找到自己的U盘，然后右键选择Formar Disk for Mac意思是将U盘格式化为Mac格式，当然U盘内容提前做好备份。 写入DMG镜像，在软件的左侧找到自己的U盘，然后右键选择Restore with Disk Image来准备将dmg镜像写入到U盘中。(时间较长，等待15-30分钟)，期间会提示你是否格式化u盘，这是因为此时windows不能识别该u盘，点否继续。 此时已经可以通过DiskGenius查看到u盘相关信息。（如果要制作硬盘启动，需要像u盘一样，有一个独立的ESP分区，并且将u盘的EFI相关文件拷贝覆盖硬盘ESP的EFI信息） 2.开机F11选择U盘UEFI启动（不同主板案按键不同）3.选择AMD_Ryzen_linjimmy_10.13.3_V4，回车确认4.选择磁盘工具-抹除与改名盘名”mcOS“安装即可 抹除为HFS + Mac os扩展日志式(如果是英文名称为Mac OS Extended(Journaled),一般是第一个选项) 分区形式选择GPT[GUID] 当安装完成后重启 5.安装完毕后再次选择AMD_Ryzen_linjimmy_10.13.3_V4 ,回车确认 打开上方的工具-终端运行 通过内建的批处理方法安装(就是执行sh脚本) 1sh /volumes/AMD_Ryzen_linjimmy_10.13.3_V4/linjimmy/linjimmy.sh 然后会出现很多#####，输入你刚刚安装的系统盘名称后回车,无所谓大小写 然后等大概20秒,完成操作,手动重启正式进入macOS High Sierra系统 暂时不要登陆苹果账号，会报连接不上服务器，然后无法前进后退，只能重启再次安装。 6.系统选择macOS7.安装必要的驱动到SLE,通过Kext Utility重建缓存.(！！！重要，显卡声卡驱动相关问题) SLE =&gt; MacOS的驱动目录(/System/Library/Extensions)，每次安装kext都需要使用kext utility修复权限。 1.显卡驱动,下载WebDriver，直接安装即可(pkg格式) 2.声卡驱动,下载驱动Lilu.kext, AppleALC.kext放入SLE目录，Kext Utility重建缓存。（打开系统偏好设置-声音-播放声音效果的设备-切换Line-out即可听到声音，此处怀疑不需要前面声卡驱动，不过未做验证，按照此步骤暂时没有问题） 8.安装完成 目前即是双系统（win10 + MacOS） 默认进入win10 需要进入MacOS，保证之前安装U盘插入，开机F11选择U盘UEFI启动即可，进入系统后即可取下U盘 注意事项借鉴网址[吉米镜像]黑苹果 AMD Ryzen FX APU 10.13.3 linjimmy V4定制傻瓜安装镜像与安装教程[Ryzen黑苹果系统]10.12.5 安装与镜像下载 完整教程~B 站黑苹果安装教程U盘改为硬盘EFI引导SLE和EE区别和含义声卡驱动问题]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
        <tag>amd</tag>
        <tag>黑苹果</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vue对象多层嵌套不更新视图原因]]></title>
    <url>%2Fblog%2F2018%2F12%2F21%2FJS%2Fvue%E5%AF%B9%E8%B1%A1%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E4%B8%8D%E6%9B%B4%E6%96%B0%E8%A7%86%E5%9B%BE%E5%8E%9F%E5%9B%A0%2F</url>
    <content type="text"><![CDATA[背景 在vuex中更新如下对象内的data数据不更新 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748taskItem: &#123; default: &#123; uncomplete: &#123; name: &apos;uncomplete&apos;, label: &apos;未完成&apos;, isRequest: false, data: [] &#125;, complete: &#123; name: &apos;complete&apos;, label: &apos;已完成&apos;, isRequest: false, data: [] &#125; &#125;, 新增数据对象1:&#123; uncomplete: &#123; name: &apos;uncomplete&apos;, label: &apos;未完成&apos;, isRequest: false, data: [] &#125;, complete: &#123; name: &apos;complete&apos;, label: &apos;已完成&apos;, isRequest: false, data: [] &#125; &#125;, 新增数据对象2:&#123; uncomplete: &#123; name: &apos;uncomplete&apos;, label: &apos;未完成&apos;, isRequest: false, data: [] &#125;, complete: &#123; name: &apos;complete&apos;, label: &apos;已完成&apos;, isRequest: false, data: [] &#125; &#125;&#125;vuex初始化时候的原始数据没有新增数据对象这块新增数据对象是在一次请求之后添加的添加方式是直接赋值操作（这里是问题原因所在）!!! 直接对整个taskItem进行深拷贝可以达到更新目的 123456[TYPES.ADD_TASK_ITEM](state, taskItemArrayData) &#123; let item = state.taskItem[state.activeTaskListType][state.activeTaskItemType]; item.isRequest = true; item.data = taskItemArrayData; state.taskItem = JSON.parse(JSON.stringify(state.taskItem));&#125; 上面办法的问题 1每次添加新的数据源，更新删除更改操作都会重新深拷贝一次，性能问题,代码洁癖不允许 解决 参考api文档1234567891011121314151617181920212223有时你想向已有对象上添加一些属性，例如使用 Object.assign() 或 _.extend() 方法来添加属性。但是，添加到对象上的新属性不会触发更新。在这种情况下可以创建一个新的对象，让它包含原对象的属性和新的属性重点在于已有对象添加属性，直接赋值是不能建立正确的双向绑定，导致在接下来的更新新增数据对象内data时不触发更新，所以从源头下手for (let i = 0; i &lt; taskListArrayData.length; i++) &#123; state.taskItem[taskListArrayData[i]._id] = &#123; uncomplete: &#123; name: &apos;uncomplete&apos;, label: &apos;未完成&apos;, isRequest: false, data: [] &#125;, complete: &#123; name: &apos;complete&apos;, label: &apos;已完成&apos;, isRequest: false, data: [] &#125; &#125; if (!taskListArrayData[i].icon) &#123; taskListArrayData[i].icon = &apos;icon-yuandian&apos;; &#125;&#125;state.taskItem = JSON.parse(JSON.stringify(state.taskItem));在添加新增数据对象时深拷贝数据源，接下来对数据源的操作就能正常更新视图]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[github中webhook配合thinkjs自动化部署]]></title>
    <url>%2Fblog%2F2018%2F12%2F14%2FGit%2Fgithub%E4%B8%ADwebhook%E9%85%8D%E5%90%88thinkjs%E8%87%AA%E5%8A%A8%E5%8C%96%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[设置github项目中的webhook 项目地址 =&gt; Settings =&gt; Webhooks =&gt; Add webhook123Payload URL =&gt; 需要出发POST请求的地址Content type =&gt; application/jsonSecret =&gt; 与服务器验证的密钥（任意字符，无限制） thinkjs配置 创建一个请求地址/webhook/logServer 判断post请求是否来自github,并验证密钥 1234//请求头this.ctx.headers//加密规则crypto.createHmac(&apos;sha1&apos;, model.logServerWebhookSecret).update(JSON.stringify(this.post())).digest().toString(&apos;hex&apos;) 验证成功，执行自动化更新网站脚本 123456789101112131415161718192021222324252627282930项目根目录下创建脚本deploy.sh，执行需要更新的操作#!/bin/bashcd /root/www/logServergit pullpm2 restart logServer在验证成功后执行该脚本const exec = require(&apos;child_process&apos;).exec;return new Promise((resolve, reject) =&gt; &#123; const cmdStr = &quot;sh -x /root/www/logServer/deploy.sh&quot;; let workerProcess = exec(cmdStr); workerProcess.stdout.on(&apos;data&apos;, function(data) &#123; //console.log(&apos;stdout: &apos; + data); //shell执行日志 if (data.indexOf(&apos;Applying action restartProcessId on app&apos;) &gt; -1) &#123; resolve(data); &#125; &#125;); workerProcess.stderr.on(&apos;data&apos;, function(data) &#123; //shell执行命令 console.log(&apos;stderr: &apos; + data); &#125;); setTimeout(() =&gt; &#123; //10秒超时就返回失败 reject(&apos;fail&apos;); &#125;, 10000);&#125;); 遇到的错误处理 process.exit();不能使用这一句，会关闭thinkjs的worker进程，导致没有回调; macos和windows本地不会杀死exec进程，centos会杀死进程，需要单独监听1234567891011node.js 中的child_process有一个exec方法，可以调用shell脚本。今天发现exec没有执行回调方法。后来在网上查阅资料，发现exec的输出有大小限制，当输出数据量过大时，系统会杀死进程，因而不会触发回调。var workerProcess = child_process.exec(&apos;node node_modules/webpack/bin/webpack.js&apos;, &#123;&#125;)workerProcess.stdout.on(&apos;data&apos;, function (data) &#123; console.log(&apos;stdout: &apos; + data);&#125;);workerProcess.stderr.on(&apos;data&apos;, function (data) &#123; console.log(&apos;stderr: &apos; + data);&#125;);]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>git</tag>
        <tag>github</tag>
        <tag>webhook</tag>
        <tag>自动化部署</tag>
        <tag>thinkjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[FileZilla注意事项]]></title>
    <url>%2Fblog%2F2018%2F12%2F13%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2FFileZilla%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[FileZilla修改文件大小格式12设置 =&gt; 界面 =&gt; 文件大小格式将以字节为单位显示更改为FileZilla修改文件大小格式 FileZilla ssh sftp连接 FileZilla默认是ftp协议连接，如果需要使用其他协议，在主机项填写sftp://ip]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>filezilla</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git忽略指定行代码]]></title>
    <url>%2Fblog%2F2018%2F12%2F11%2FGit%2Fgit%E5%BF%BD%E7%95%A5%E6%8C%87%E5%AE%9A%E8%A1%8C%E4%BB%A3%E7%A0%81%2F</url>
    <content type="text"><![CDATA[.gitattributes文件指定规则（前提）123文件范围 filter=规则名称示例: src/config/adapter.js filter=gitignore示例: src/ filter=gitignore 全局忽略指定行或多行内容(方法一)###单行过滤//#gitignore12345git config --global filter.gitignore.clean &quot;sed &apos;/\/\/#gitignore$/&apos;d&quot;git config --global filter.gitignore.smudge cat示例:this.doSomething(); //#gitignore ###多行过滤//#BEGIN到//#END之间信息1234567891011121314151617git config --global filter.gitignore.clean &quot;sed &apos;/\/\/#BEGIN/,/\/\/#END$/d&apos;&quot;git config --global filter.gitignore.smudge cat示例://#smudge//#BEGINif(this.doSomething)&#123; this.doSomething();&#125;//#END1.执行git config -l查看当前生效的全局配置2.通过vi /Users/minya/.gitconfig查看当前全局配置（windows配置文件路径为C:\Users\Administrator\.gitconfig）[filter &quot;gitignore&quot;] clean = &quot;sed &apos;/\\/\\/#BEGIN/,/\\/\\/#END$/d&apos;&quot; smudge = cat这里与命令行键入的有区别，能生效，考虑转义问题 clean命令 git add时触发(提交时删除//#BEGIN到//#END之间信息) smudge命令 git checkout触发（cat不做任何操作） 多行过滤目前只支持上传时过滤，下载的sed正则不会写，期望目标如下12341.复制//#BEGIN到//#END之间的内容到内存内2.找到//#smudge注释行3.将上面复制内容添加到//#smudge注释行下面4.需要考虑如果文件内有多个//#smudge注释行的处理 全局忽略指定行或多行内容(方法二)###命令行添加1234上线将localhost:4000替换成blog.ziyiu.com拉取将blog.ziyiu.com替换成localhost:4000git config --global filter.gitignore.clean &apos;sed &quot;s/localhost:4000/blog.ziyiu.com/g&quot;&apos;git config --global filter.gitignore.smudge &apos;sed &quot;s/yaowenjie.github.io/localhost:4000/g&quot;&apos; ###项目内添加(.git/config)12345[filter &quot;gitignore&quot;] clean = sed \&quot;s/localhost:4000/blog.ziyiu.com/g\&quot; smudge = sed \&quot;s/blog.ziyiu.com/localhost:4000/g\&quot;尝试执行多次sed git在mac下用户配置文件1vi /Users/minya/.gitconfig git常用命令12git config -l //查看当前生效的git配置git config -e --global //打开系统全局配置文件，默认没有存储目录，可以新建引用]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[sublime-text插件]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FIDE%2Fsublime-text%E6%8F%92%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[用户设置123456789101112131415161718192021&#123; "color_inactive_tabs": true, "color_scheme": "Packages/User/SublimeLinter/Monokai (SL).tmTheme", "font_size": 15, "ignored_packages": [ "Vintage" ], "line_padding_bottom": 1, "line_padding_top": 1, "sidebar_row_padding_medium": true, "sidebar_size_14": true, "status_bar_brighter": true, "tab_size": 4, "tabs_medium": true, "tabs_padding_medium": true, "theme": "Afterglow-orange.sublime-theme", "translate_tabs_to_spaces": true, "update_check": false, "word_wrap": false&#125; Theme - Afterglow 主题模版Color Highlighter —— 高亮颜色 其它后缀名也支持该功能123&#123; "file_extensions": [".js"]&#125; JsFormat —— 格式化js代码12345&#123; "e4x": true, // jsformat options "format_on_save": true,&#125; AutoFileName —— 自动补全文件路径和文件名All Autocomplete —— 补全代码 这个插件可以在所有打开的文件中自动查找补全（前提是文件打开状态） Emmet —— 快速书写 HTML 神器SideBarEnhancements —— 侧边栏功能增强ChineseLocalizations —— sublime text语言切换（中文汉化）babel es6语法支持]]></content>
      <categories>
        <category>ide</category>
      </categories>
      <tags>
        <tag>ide</tag>
        <tag>插件</tag>
        <tag>sublime-text</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac使用gmantis]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FMacOS%2Fmac%E4%BD%BF%E7%94%A8gmantis%2F</url>
    <content type="text"><![CDATA[sliverlight安装 sliverlight有mac版本，（已上传至网盘），下载安装 chrome高版本不支持sliverlight，使用safari浏览器safari浏览器允许sliverlight插件 safari -&gt; 偏好设置 -&gt; 安全性 -&gt; 互联网插件 -&gt; 插件设置 -&gt; 勾选sliverlight插件 safari浏览器打开页面显示’口’ 微软雅黑字体不存在导致，（已上传至网盘） 打开Finder(Mac 系统文件管理器)，按“shift+command+G”组合键, 输入 “/Library/Fonts” 前往文件夹 将下载下来的文件复制进去即可]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
        <tag>gmantis</tag>
        <tag>缺陷管理系统</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitignore的使用]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FGit%2Fgitignore%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[先上配置: # OSX # .DS_Store # Xcode # build/ *.pbxuser !default.pbxuser *.mode1v3 !default.mode1v3 *.mode2v3 !default.mode2v3 *.perspectivev3 !default.perspectivev3 xcuserdata *.xccheckout *.moved-aside DerivedData *.hmap *.ipa *.xcuserstate project.xcworkspace #CocoaPods Pods !Podfile !Podfile.lock # Android/IntelliJ # build/ .idea .gradle local.properties *.iml # node.js # node_modules/ npm-debug.log yarn-error.log # BUCK buck-out/ \.buckd/ *.keystore # fastlane # # It is recommended to not store the screenshots in the git repo. Instead, use fastlane to re-generate the # screenshots whenever they are needed. # For more information about the recommended setup visit: # https://github.com/fastlane/fastlane/blob/master/fastlane/docs/Gitignore.md fastlane/report.xml fastlane/Preview.html fastlane/screenshots #CocoaPods ios下cocoapods的忽略配置.Pods #忽略pods文件!Podfile #保留Podfile文件!Podfile.lock. #保留Podfile.lock文件]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>git</tag>
        <tag>js</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo优化]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FHexo%2Fhexo%E4%BC%98%E5%8C%96%2F</url>
    <content type="text"><![CDATA[谷歌字体导致访问慢问题 如果用hexo默认主题，会有该问题，采用next主题即可解决。 shell命令类似–name解析问题123npm install react-native --save--save在编译会被解析成-save解决方案是加上转义: -\-save]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[next主题]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FHexo%2Fnext%E4%B8%BB%E9%A2%98%2F</url>
    <content type="text"><![CDATA[安装 cd 项目根目录 git clone https://github.com/iissnan/hexo-theme-next themes/next 启用和选择主题模式 启用主题 打开站点配置文件_config.yml，找到 theme 字段，并将其值更改为 next 选择主题模式 项目根目录/theme/next/_config.yml,将scheme: Mist切换 添加分类标签 打开/themes/next/languages/zh-Hans.yml文件，在menu目录下添加: 123456789101112131415161718192021222324252627menu: home: 首页 archives: 归档 categories: 分类 tags: 标签 about: 关于 search: 搜索 schedule: 日程表 sitemap: 站点地图 commonweal: 公益404 reactnative: ReactNative apidoc: ApiDoc js: Javascript css: Css flutter: Flutter html: Html ios: iOS macos: MacOS mongodb: MongoDB thinkjs: ThinkJS vmware: VMware centos: CentOS hexo: Hexo ide: IDE git: Git docker: Docker android: Android 打开/themes/next/_config.yml文件，在menu目录下添加: 123456789101112131415161718192021222324252627menu: home: / || home # about: /about/ || user # categories: /categories/ || th # archives: /archives/ || archive # schedule: /schedule/ || calendar # sitemap: /sitemap.xml || sitemap # commonweal: /404/ || heartbeat centos: /categories/centos/ git: /categories/git/ js: /categories/js/ css: /categories/css/ reactnative: /categories/reactnative/ apidoc: /categories/apidoc/ flutter: /categories/flutter/ html: /categories/html/ ios: /categories/ios/ macos: /categories/macos/ mongodb: /categories/mongodb/ thinkjs: /categories/thinkjs/ hexo: /categories/hexo/ vmware: /categories/vmware/ ide: /categories/ide/ docker: /categories/docker/ android: /categories/android/ tags: /tags/ || tags 在/source/_posts/目录下新建对应名称文件夹(如新建Android，目录为/source/_posts/Android)，后续该分类文章就放在该目录下(非必要步骤，建议添加使目录更清晰)]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器迁移纪录]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%81%E7%A7%BB%E7%BA%AA%E5%BD%95%2F</url>
    <content type="text"><![CDATA[mongodb数据快速迁移 尽量保证mongodb版本一致 停止数据库服务后开始数据库文件拷贝 不要拷贝storage.bson, mongod.lock以及journal(日志记录) 拷贝能将mongodb的账号密码信息一起拷贝 拷贝之后还需要修改/etc/mongo.conf文件，将dbpath, ip修改为自己的 node项目迁移 除node_moudle之外的进行拷贝 配置文件连接数据库等访问本机不要使用公网IP，使用127.0.0.1(vultr会经常切换IP，避免每次都需要更换) pm2 thinkjs启动项不加–name，会有警告. 采用SFTP而非FTP 22端口同SSH端口，SFTP优点更多 Vultr搭建的vpn l2tp服务器， windows 10 能连接，能查看ip改变， 能百度， 不能谷歌求解？ Mac 上面可以使用自带VPN连接， 而且可以正常google这些。 小米8 一样可以连接VPN， 只是VPN几分钟必断， 不知道是小米的问题还是什么，（ 考虑VPN服务器不稳定， 网络波动， 暂时也没找到解决方案， 另外有好的第三方VPN客户端不， 暂未用客户端尝试连接） Windows可以连接， 可以百度， 不能谷歌， 能ping通， 尝试过修改MTU值， 600， 1024， 1372， 这些都试过， 无解， 修改DNS为8 .8 .8 .8， 8.8 .4 .4 还是不行， 而且不知道怎么跟踪问题， 有没有大佬知道， 求解答。 即便MAC能连接VPN, VPN服务极其不稳定， 有时能连， 有时不行（ 如果是服务器问题， 你们搭建的VPN稳定吗？） 环境centos 7， L2TP类型的VPN windows10连接vpn能成功，不能访问外网，通过关闭win10的ipv6已解决！！！！]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[服务器安全配置]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2F%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E5%85%A8%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[更改ssh连接端口 目录：vi /etc/ssh/sshd_config 将#Port 22下面添加一行Port 2222（默认22，如果添加覆盖默认） 禁止root远程ssh登录 目录：vi /etc/ssh/sshd_config 修改PermitRootLogin设置为no，并且去掉前面的“#”（#代表注释，即默认允许root登录，取消注释设置为no生效不允许root登录） 登陆失败限制 vi /etc/pam.d/sshd(远程失败限制) vi /etc/pam.d/login(本地失败限制)123456789#%PAM-1.0auth required pam_tally2.so deny=3 unlock_time=300 even_deny_root root_unlock_time=10/*注释说明*/#在#%PAM-1.0的下面，即第二行，添加内容，一定要写在前面，如果写在后面，虽然用户被锁定，但是只要用户输入正确的密码，还是可以登录的！#even_deny_root 也限制root用户;#deny次数#unlock_time锁定时间（秒） 切换用户 su root 切换root用户 ssh相关 service sshd restart 重启ssh服务]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[nginx配置静态网页访问与单页路由访问问题]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fnginx%E9%85%8D%E7%BD%AE%E9%9D%99%E6%80%81%E7%BD%91%E9%A1%B5%E8%AE%BF%E9%97%AE%E4%B8%8E%E5%8D%95%E9%A1%B5%E8%B7%AF%E7%94%B1%E8%AE%BF%E9%97%AE%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[nginx配置静态网页访问 前后端分离的项目，前端使用vue单页，打包之后项目文件的部署访问. 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849#http访问配置server &#123; listen 80; server_name www.ziyiu.com ziyiu.com; root /root/www/logWeb/; index index.html index.htm; access_log /root/nginx/log/logWeb_access.log main; #解决单页路由问题 location / &#123; try_files $uri $uri/ @router; index index.html; &#125; location @router &#123; rewrite ^.*$ /index.html last; &#125;&#125;#https访问配置server &#123; listen 80; server_name www.ziyiu.com; rewrite ^(.*)$ https://$host$1 permanent;&#125;server &#123; listen 443 ssl; server_name www.ziyiu.com; root /root/www/logWeb/; index index.html index.htm; access_log /root/nginx/log/logWeb_access.log main; ssl on; ssl_certificate pem目录; ssl_certificate_key key目录; ssl_session_timeout 5m; ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE:ECDH:AES:HIGH:!NULL:!aNULL:!MD5:!ADH:!RC4; ssl_protocols TLSv1 TLSv1.1 TLSv1.2; ssl_prefer_server_ciphers on; location / &#123; try_files $uri $uri/ @router; &#125; location @router &#123; rewrite ^.*$ /index.html last; &#125;&#125; 重启nginx运行以上配置，发现访问报403 forbidden错误,通过查看ngixn错误日志（如果没有设置log日志目录，默认位于/var/log/nginx/下，服务器与本机时间有出入，如果查看3-10日的，一般查看3-11的日志）1&quot;/root/www/logWeb/index.html&quot; is forbidden (13: Permission denied) 引起nginx 403 forbidden通常是三种情况：一是缺少索引文件，二是权限问题，三是SELinux状态。 一、缺少index.html或者index.PHP文件，就是配置文件中index index.html index.htm这行中的指定的文件,如果在目录下面没有index.php,index.html的时候，直接访问域名，找不到文件，会报403 forbidden。 二、权限问题，如果nginx没有web目录的操作权限，也会出现403错误。解决办法：修改web目录的读写权限，或者是把nginx的启动用户改成目录的所属用户，重启Nginx即可解决(chmod -R 755 /目录地址) 三、SELinux设置为开启状态（enabled）的原因 **以上都未成功，最终解决办法*12vi /etc/nginx/nginx.conf将user nginx修改为user root成功解决 单页路由问题 问题原因：刷新页面时访问的资源在服务端找不到，因为vue-router设置的路径不是真实存在的路径。如上的404现象，是因为在nginx配置的根目录下面压根没有对应的这个真实资源存在，这些访问资源都是在js里渲染的。123456789#解决单页路由问题location / &#123; try_files $uri $uri/ @router; index index.html;&#125;location @router &#123; rewrite ^.*$ /index.html last;&#125;]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[linux系统常用命令汇总]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Flinux%E7%B3%BB%E7%BB%9F%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%B1%87%E6%80%BB%2F</url>
    <content type="text"><![CDATA[重启系统 reboot 查看当前文件夹目录 ls(不包含隐藏文件) ls -l(查看当前文件夹目录详细信息，不包含隐藏文件) ls -a(包含隐藏文件) 格式化硬盘 mkfs.ext4 /dev/vdb（格式化vdb这个名称的硬盘，其中ext4为磁盘格式，例如ex2,ex3和window下面的NTFS） 查看生效的系统盘和数据盘 df -h 文件操作 name在下文中统一代表变量，即你自己想要操作的对应的文件或文件名等 cd name(移动目录) cat name(输入文件内容，不能编辑) vi name(打开文件编辑，i编辑，ESC退出编辑 :wq保存退出，:q退出不保存 :q!强制退出不保存) mkdir name(创建文件或文件夹) rm -rf name(删除文件夹或文件，且不需要提示用户) cp name1 name2(复制文件1到文件2，文件1必须存在) 查看Centos端口命令 netstat -lntp(查看监听(Listen)的端口) netstat -antp(查看所有建立的TCP连接) 查看文件夹大小1234du -h --max-depth=1m：以M为单位展示查询结果-h：以K、M、G为单位展示查询结果，提高信息可读性--max-depth=1：其中，数字“1”是指查询结果中最多显示的目录层数，这里指最多显示一层目录 查看当前目录下文件夹大小，按照大小依次排序(由于磁盘空间将满,想知道哪些文件夹的内容过大，删除一些大且无用文件不断的du –max-depth=1 -h，筛选出你要删除的文件) Linux中查看SSH登录失败次数1cat /var/log/secure* | grep &apos;Failed password&apos; | grep sshd | awk &apos;&#123;print $1,$2&#125;&apos; | sort | uniq -c 创建用户与更改密码 adduser username 创建用户 passwd username 修改密码 切换用户 su root 切换root用户 ssh相关 service sshd restart 重启ssh服务 终端ssh断开方法 logout Ctrl+D 登陆失败限制 vi /etc/pam.d/sshd(远程失败限制) vi /etc/pam.d/login(本地失败限制)123456789#%PAM-1.0auth required pam_tally2.so deny=3 unlock_time=300 even_deny_root root_unlock_time=10/*注释说明*/#在#%PAM-1.0的下面，即第二行，添加内容，一定要写在前面，如果写在后面，虽然用户被锁定，但是只要用户输入正确的密码，还是可以登录的！#even_deny_root 也限制root用户;#deny次数#unlock_time锁定时间（秒） 移动文件1mv 文件名当前目录 移动后的目录 查找文件内关键字在非i（编辑模式）和非ctrl+:(命令模式下)输入 =&gt;1/关键字 查看端口是否占用 lsof -i:80（带:80查询80端口，不带查询所有端口） 查看文件 find / -name *.psd(全局查找psd后缀的文件) 命令行利用ssh从远程服务器下载或者上传文件 端口非22的时候scp -P指定端口，注意大写; -r代表复制文件夹 scp -r -P 7777 root@ip:/root/www/xxx /Users/minya/Desktop(下载xxx文件夹) scp -r /Users/minya/Desktop/xxx -P 7777 root@ip:/root/www/(上传xxx文件夹) 清空指定文件echo -n “” &gt; 文件名]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hexo个人博客部署]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fhexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%2F</url>
    <content type="text"><![CDATA[服务器配置nginx配置访问目录和域名 1./root/www/下新建blog目录（可新建一个index.html测试访问） 2.配置nginx转发blog.ziyiu.com到/root/www/blog(并配置https，日志文件目录等) 3.yum install -y git(安装git) 4.位置:/root/git/blog/blog.git 1命令: git init --bare blog.git(Git 初始化裸库) 5.位置:/root/git/blog/blog.git/hooks/post-receive 命令: vi post-receive （创建 Git 钩子hook,默认没有该文件，新建） 6.钩子写入内容12#!/bin/bashgit --work-tree=/root/www/blog --git-dir=/root/git/blog/blog.git checkout -f 到此服务器配置完成，本地直接ssh到服务器触发git钩子即可 本地配置 安装hexo脚手架 1yarn install -g hexo-cli 初始化blog项目 123hexo init blogcd blogyarn install 更改配置文件_config.yml 12345678910# URL### If your site is put in a subdirectory, set url as &apos;http://yoursite.com/child&apos; and root as &apos;/child/&apos;url: https://blog.ziyiu.com //个人域名# Deployment### Docs: https://hexo.io/docs/deployment.htmldeploy: //发布对应的github账号type: gitrepo: ssh://root@IP:PORT/root/git/blog/blog.gitbranch: master 发布 123hexo clean //清除缓存hexo generate //生成静态页面hexo deploy //将本地静态页面目录部署到云服务器 问题汇总 请使用yarn而不是npm安装 ERROR Deployer not found: git 12缺少包hexo-deployer-gityarn install hexo-deployer-git --save ssh: connect to host 62.234.1.82 port 22: Connection refused 12服务器更改了ssh 22端口_config.yml中ssh地址加上端口号 警告信息 123456789101112131415161718192021ERROR Plugin load failed: hexo-renderer-markedError: EISDIR: illegal operation on a directory, readERROR Plugin load failed: hexo-serverError: EISDIR: illegal operation on a directory, readERROR Plugin load failed: hexo-renderer-stylusError: EISDIR: illegal operation on a directory, read解决办法，先用 yarn 分别移除，再重新安装，如下## 先移除yarn remove hexo-renderer-markedyarn remove hexo-renderer-stylusyarn remove hexo-server## 再安装yarn add hexo-renderer-marked -Syarn add hexo-renderer-stylus -Syarn add hexo-server -S]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ecosystem.config(pm2配置文件，但启动一直不成功)]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fecosystem-config-pm2%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6%EF%BC%8C%E4%BD%86%E5%90%AF%E5%8A%A8%E4%B8%80%E7%9B%B4%E4%B8%8D%E6%88%90%E5%8A%9F%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425262728293031323334353637383940module.exports = &#123; /** * Application configuration section * http://pm2.keymetrics.io/docs/usage/application-declaration/ */ apps: [ //站点1 &#123; name: &apos;SITEONE&apos;, //应用程序的名称 script: &apos;/root/www/siteone/bin/www&apos;, //应用程序的脚本路径 cwd: &apos;/root/www/siteone&apos;, //应用程序所在的目录 exec_mode: &apos;cluster_mode&apos;, //应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork error_file: &apos;/root/pm2/log/error/siteone_error.log&apos;, //自定义应用程序的错误日志文件 out_file: &apos;/root/pm2/log/out/siteone_out.log&apos;, //自定义应用程序日志文件 pid_file: &apos;/root/pm2/log/pid/siteone.pid&apos;, //自定义应用程序的pid文件 instances: 1, //服务进程的个数 max_memory_restart: &apos;1024M&apos;, //服务占用的内存超过1024M，会自动进行重启。 env: &#123; NODE_ENV: &apos;production&apos; &#125;, &#125;, //站点2 &#123; name: &apos;SITETWO&apos;, //应用程序的名称 script: &apos;/root/www/sitetwo/bin/www&apos;, //应用程序的脚本路径 cwd: &apos;/root/www/sitetwo&apos;, //应用程序所在的目录 exec_mode: &apos;cluster_mode&apos;, //应用程序启动模式，这里设置的是cluster_mode（集群），默认是fork error_file: &apos;/root/pm2/log/error/sitetwo_error.log&apos;, //自定义应用程序的错误日志文件 out_file: &apos;/root/pm2/log/out/sitetwo_out.log&apos;, //自定义应用程序日志文件 pid_file: &apos;/root/pm2/log/pid/sitetwo.pid&apos;, //自定义应用程序的pid文件 instances: 1, //服务进程的个数 max_memory_restart: &apos;1024M&apos;, //服务占用的内存超过1024M，会自动进行重启。 env: &#123; NODE_ENV: &apos;production&apos; &#125;, &#125; ],&#125;;]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos服务器问题记录]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%9C%8D%E5%8A%A1%E5%99%A8%E9%97%AE%E9%A2%98%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[1.服务器显示中文 设置语言配置即可2.服务器显示中文英文乱码的问题（1.xshell的编码必须跟服务器的编码一致，中文GB18030）3.pm2查看进程列表乱码的问题，pm2查看进程列表乱码不支持中文查看，修改xshell的编码为utf-8即可，不用修改服务器的语言编码4.关于重启nginx，网上的nginx的程序目录（sbin）不适用于centos 7用yum安装的nginx，正确的目录为 /sbin/nginx5.pm2同时启动多个node服务 pm2 start app.js –name my-api #my-api为PM2进程名称pm2 start app.js -i 0 #根据CPU核数启动进程个数 mongodb http://yijiebuyi.com/blog/9daac70a111e4c3298a4cb69b5dc6214.htmlpm2 命令 http://www.111cn.net/sys/linux/120062.htmpm2 重启自启动 https://cnodejs.org/topic/57d8ebab5710e2ed658d6b2emongodb开机自启动 http://blog.sina.com.cn/s/blog_8f02ae7601010nds.htmlmongod的目录为 /bin/mongodmongodb http://blog.csdn.net/u010818100/article/details/18085325]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos服务器设置中文和挂载数据盘（一）]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AE%BE%E7%BD%AE%E4%B8%AD%E6%96%87%E5%92%8C%E6%8C%82%E8%BD%BD%E6%95%B0%E6%8D%AE%E7%9B%98%EF%BC%88%E4%B8%80%EF%BC%89%2F</url>
    <content type="text"><![CDATA[设置centos系统为中文cd /etc/locale.conf （语言设置位置，在文本内插入下面内容） LANG="zh_CN.UTF-8" 注意:1.保存文件之后重启一下让文件生效 reboot2.可以通过echo $LANG来查看当前系统的语言3.如果使用工具例如putty或者xshell必须保证该工具的字符编码与linux服务器的语言一致！！！ 查看centos服务器下是否包含数据盘fdisk -l（即可查看当前所有硬盘状态）-df Th(查看当前硬盘挂载情况)目前阿里云不需要重新格式化数据盘直接挂载即可mkdir /data(在根目录下新建data文件夹)echo ‘/dev/vdb1 /data ext3 defaults 0 0’ &gt;&gt; /etc/fstab(开机自行挂载)最后可以通过使用-df Th来验证挂载是否成功]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos服务器实现nginx多域名多端口转发（四）]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%9E%E7%8E%B0nginx%E5%A4%9A%E5%9F%9F%E5%90%8D%E5%A4%9A%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%EF%BC%88%E5%9B%9B%EF%BC%89%2F</url>
    <content type="text"><![CDATA[你需要配置虚拟主机，让 Nginx 监听不同的域名的80端口，然后转发到各自应用的实际端口首先，你需要编辑/etc/nginx/nginx.conf，在http模块中引入其他配置文件：include /etc/nginx/conf.d/*.conf;(注意：在阿里云和腾讯云的centos服务器中，这段话已经加入默认配置，所以不需要再添加了)这样你就可以在/etc/nginx/conf.d文件夹中分别设置每个虚拟主机。然后在上面的文件夹下分别新建文件/etc/nginx/conf.d/siteone.conf和/etc/nginx/conf.d/sitetwo.conf，当然文件名siteone，sitetwo随你起。123456789101112131415server &#123; listen 80; server_name siteone.lichaojun.com; access_log /root/log/nginx/siteone_access.log main; location / &#123; proxy_set_header Host $http_host; proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for; proxy_set_header X-Real-Ip $remote_addr; proxy_set_header X-NginX-Proxy true; proxy_pass http://127.0.0.1:8081/; proxy_redirect off; &#125;&#125; 其中:server_name: siteone.lichaojun.com;(代表你要监听的域名)access_log /root/log/nginx/siteone_access.log main;(代表你的nginx下该端口转发的日志记录)proxy_pass http://127.0.0.1:8081/;(8081代表转发的端口号)如果有多个域名要转发到不同的端口，新建配置文件更改对应的内容即可。 nginx -t(全局，检查配置文件是否正确)nginx -s reload(重新加载配置文件)]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos服务器安装mongodb并实现开机自启动（五）]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%9C%8D%E5%8A%A1%E5%99%A8%E5%AE%89%E8%A3%85mongodb%E5%B9%B6%E5%AE%9E%E7%8E%B0%E5%BC%80%E6%9C%BA%E8%87%AA%E5%90%AF%E5%8A%A8%EF%BC%88%E4%BA%94%EF%BC%89%2F</url>
    <content type="text"><![CDATA[yum info mongomonge代表软件包名称，可以通过上面指令查询yum是否可以安装该软件包，如果返回错误，那就需要安装软件包源。 如何添加mongodb的源,首先需要确定你的操作系统是 32位还是 64位?如何确定?使用下面的命令uname -a如果输出的信息包含 x86_64 说明你的系统是64位,如果不包含说明是32位系统.不同版本的系统对应创建如下相关的源信息.执行如下命令创建源 cd /etc/yum.repos.d/vi mongodb.repo //创建一个源文件 mongodb.repo 你可以使用vi ,vim 命令等 [mongodb-org-3.0]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.0/x86_64/gpgcheck=0enabled=1通过命令 yum -y install mongodb-org等待完成即可。 设置mongodb开机自启动MongoDB server 加入开机自启动 vi /etc/rc.local 使用编辑器打开配置文件，并在其中加入下面一行代码 /bin/mongod –dbpath /root/mongodb_data/ –fork –port 9000 –logpath=/root/log/mongodb/mongodb.log –logappend –auth修改rc.local文件为有权限的可执行文件，如： chmod +x rc.local(腾讯云，阿里云需要修改了才有权限) /etc/mongod.conf （为mongodb的配置文件） 启动mongodb需要找到bin文件下的mongod这个文件目录， –dbpath /root/mongodb_data/（数据存放位置） –fork（以后台进程运行） –port 9000（运行在9000端口） –logpath=/root/log/mongodb/mongodb.log –logappend（日志目录，以追加形式添加日志）]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>mongodb</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos服务器pm2安装配置（三）]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%9C%8D%E5%8A%A1%E5%99%A8pm2%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%EF%BC%88%E4%B8%89%EF%BC%89%2F</url>
    <content type="text"><![CDATA[1.安装npm安装pm2之前先安装cnpm淘宝镜像，翻墙你懂得… 地址:http://npm.taobao.org/2.使用cnpm安装pm2管理工具 cnpm install -g pm23.在root/www下新建2个express站点，以便测试pm2多应用启动和nginx端口转发 注意： pm2 start app.js -i 4 # cluster mode 模式启动4个app.js的应用实例pm2 start app.js –-name siteone # 启动应用程序并命名为siteonepm2 start app.js –-watch # 当文件变化时自动重启应用pm2 list # 列表 PM2 启动的所有的应用程序pm2 monit # 显示每个应用程序的CPU和内存占用情况pm2 show [app-name] # 显示应用程序的所有信息pm2 logs # 显示所有应用程序的日志pm2 logs [app-name] # 显示指定应用程序的日志 pm2 stop all # 停止所有的应用程序pm2 stop 0 # 停止 id为 0的指定应用程序pm2 restart all # 重启所有应用pm2 reload all # 重启 cluster mode下的所有应用pm2 gracefulReload all # Graceful reload all apps in cluster modepm2 delete all # 关闭并删除所有应用pm2 delete 0 # 删除指定应用 id 0pm2 scale api 10 # 把名字叫api的应用扩展到10个实例pm2 reset [app-name] # 重置重启数量pm2 startup # 创建开机自启动命令pm2 save # 保存当前应用列表pm2 resurrect # 重新加载保存的应用列表 pm2实现自启动： 1、启动node.js应用 pm2 start app.js -i 1 –name appName(以fork模式启动1个进程)pm2 start app.js -i 0 –name appName(以cluster模式启动根据cpu个数相同的进程) 2、保存脚本 pm2 save 3、创建开机启动脚本 pm2 startup systemd 4、重启服务器测试 reboot说明：如果您需要启动多个服务，需要多次运行步骤2即可（建议app.js改成绝对路径，加上–-name参数，或者改成不同的名字，比如server.js,server1.js）]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>node</tag>
        <tag>pm2</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos搭建ss]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E6%90%AD%E5%BB%BAss%2F</url>
    <content type="text"><![CDATA[安装 yum update 更新yum源 yum install python-pip 安装pip pip install shadowsocks 配置（配置文件可放在任何目录）12345678910111213141516171819202122&#123; "server":"0.0.0.0", "server_port":修改成你的端口号, "local_port":1080, "password":"修改成你的密码", "timeout":600, "method":"aes-256-cfb"&#125;// 多个端口配置如下&#123; "server":"0.0.0.0", "port_password":&#123; "8388": "password1", "8389": "password2", "8390": "password3" &#125;, "local_port":1080, "timeout":600, "method":"aes-256-cfb"&#125; 关闭centos7防火墙systemctl disable firewalld 禁止开机启动 看到如下命令代表禁用成功 Removed symlink /etc/systemd/system/multi-user.target.wants/firewalld.service.Removed symlink /etc/systemd/system/dbus-org.fedoraproject.FirewallD1.service. 设置ss开机启动 开机启动的文件目录 /etc/rc.d/rc.local 1.修改开启启动项 vi /etc/rc.d/rc.local,添加sudo ssserver -c /xxx/shadowsocks.json -d start 2.获取开机启动权限chmod +x /etc/rc.d/rc.local(CentOS 7正打算抛弃/etc/rc.d/rc.local，重启前需要运行以下命令获得权限，否则rc.local不会执行) 命令 ssserver -c /xxx/shadowsocks.json -d start 后台运行 ssserver -c /xxx/shadowsocks.json start 前台运行 systemctl disable firewalld 禁止防火墙开机启动 systemctl stop firewalld 临时禁止防火墙 ss不能连接一些判断方法 本机安装客户端，需要开启系统代理PAC模式或者全局模式 本机ping服务器ip地址 站长工具ping ip地址（多地测试连接速度） 检查服务器是否开启ss服务（重新运行一次开启命令，并前台开启查看日志） 检查端口是否开放或是否关闭防火墙 查看客户端ss系统日志（很有用） 判断IP是否被墙，原理国内打不开，国外能 BBR魔改加速 采用的是千影的一键安装脚本，该脚本介绍支持Centos 6+ / Debian 7+ / Ubuntu 14+，但不支持Debian 8 运行以下命令，保存一个脚本工具在当前文件夹下，wget -N –no-check-certificate “https://raw.githubusercontent.com/chiakge/Linux-NetSpeed/master/tcp.sh&quot; &amp;&amp; chmod +x tcp.sh &amp;&amp; ./tcp.sh命令下载了一个脚本，并且开启了权限，然后运行这个脚本. 运行脚本会看到一个0-9选项的界面，并且可以查看到当前的加速内核和状态，选择1安装BBR/BBR魔改版内核，等待安装完毕后Y确认重启. 重新运行./tcp.sh脚本，输入4执行开启加速.当看到[信息]魔改版本BBR启动成功文本即可。（不需要单独设置开机启动，已自启动）]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>ss</tag>
        <tag>shadowsocks</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos开启nginx缓存和gzip压缩]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E5%BC%80%E5%90%AFnginx%E7%BC%93%E5%AD%98%E5%92%8Cgzip%E5%8E%8B%E7%BC%A9%2F</url>
    <content type="text"><![CDATA[For more information on configuration, see:* Official English Documentation: http://nginx.org/en/docs/* Official Russian Documentation: http://nginx.org/ru/docs/user root;worker_processes auto;error_log /var/log/nginx/error.log;pid /run/nginx.pid; Load dynamic modules. See /usr/share/nginx/README.dynamic.include /usr/share/nginx/modules/*.conf; events { worker_connections 1024;} http { log_format main ‘$remote_addr - $remote_user [$time_local] “$request” ‘ ‘$status $body_bytes_sent “$http_referer” ‘ ‘“$http_user_agent” “$http_x_forwarded_for”‘; access_log /var/log/nginx/access.log main; sendfile on; tcp_nopush on; tcp_nodelay on; keepalive_timeout 65; types_hash_max_size 2048; include /etc/nginx/mime.types; default_type application/octet-stream; # Load modular configuration files from the /etc/nginx/conf.d directory. # See http://nginx.org/en/docs/ngx_core_module.html#include # for more information. include /etc/nginx/conf.d/*.conf; server { listen 80 default_server; listen [::]:80 default_server; server_name _; root /usr/share/nginx/html; # Load configuration files for the default server block. include /etc/nginx/default.d/*.conf; location / { } error_page 404 /404.html; location = /40x.html { } error_page 500 502 503 504 /50x.html; location = /50x.html { } #开启缓存 location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ { access_log off; expires 30d; } location ~* ^.+\.(css|js|txt|xml|swf|wav)$ { access_log off; expires 24h; } location ~* ^.+\.(html|htm)$ { expires 1h; } } # 开启gzip gzip on; # 启用gzip压缩的最小文件，小于设置值的文件将不会压缩 gzip_min_length 1k; # gzip 压缩级别，1-10，数字越大压缩的越好，也越占用CPU时间，后面会有详细说明 gzip_comp_level 2; # 进行压缩的文件类型。javascript有多种形式。其中的值可以在 mime.types 文件中找到。 gzip_types text/plain application/javascript application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png font/ttf font/otf image/svg+xml; # 是否在http header中添加Vary: Accept-Encoding，建议开启 gzip_vary on; # 禁用IE 6 gzip gzip_disable &quot;MSIE [1-6]\.&quot;; Settings for a TLS enabled server.# server {listen 443 ssl http2 default_server;listen [::]:443 ssl http2 default_server;server_name _;root /usr/share/nginx/html;# ssl_certificate “/etc/pki/nginx/server.crt”;ssl_certificate_key “/etc/pki/nginx/private/server.key”;ssl_session_cache shared:SSL:1m;ssl_session_timeout 10m;ssl_ciphers HIGH:!aNULL:!MD5;ssl_prefer_server_ciphers on;# # Load configuration files for the default server block.include /etc/nginx/default.d/*.conf;# location / {}# error_page 404 /404.html;location = /40x.html {}# error_page 500 502 503 504 /50x.html;location = /50x.html {}}}]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>nginx</tag>
        <tag>gzip</tag>
        <tag>cache</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos启用iptables防火墙]]></title>
    <url>%2Fblog%2F2018%2F12%2F08%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E5%90%AF%E7%94%A8iptables%E9%98%B2%E7%81%AB%E5%A2%99%2F</url>
    <content type="text"><![CDATA[环境 centos 7.2(默认使用的firewalld, 我们需要禁止firewalld,启用iptables).阿里云虽然内置的firewalld,但是默认是不启动状态，通过命令查询状态.systemctl status firewalld输出: firewalld.service Loaded: masked (/dev/null; bad) Active: inactive (dead) dead表示firewalld未开启，active表示生效 查看防火墙当前生效规则命令 iptables -L -n iptables规则文件目录 /etc/sysconfig/iptables 步骤 为了安全起见，建议再禁止一次firewalld 停止firewalld服务 1systemctl stop firewalld 禁止firewalld服务 1systemctl disable firewalld 检查是否安装了iptables 1service iptables status 安装iptables-services（iptables系统默认有，不需要重新安装） 1yum install iptables-services 编辑iptables配置文件(默认规则只允许22端口,ssh登陆，禁止了其他所有端口) 123456789101112默认配置文件:*filter:INPUT ACCEPT [0:0]:FORWARD ACCEPT [0:0]:OUTPUT ACCEPT [0:0]-A INPUT -m state --state RELATED,ESTABLISHED -j ACCEPT-A INPUT -p icmp -j ACCEPT-A INPUT -i lo -j ACCEPT-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT-A INPUT -j REJECT --reject-with icmp-host-prohibited-A FORWARD -j REJECT --reject-with icmp-host-prohibitedCOMMIT 增加规则 123456789101.增加开放端口必须放在-A INPUT -p tcp -m state --state NEW -m tcp --dport 22 -j ACCEPT之后才能生效#允许所有人访问80端口-A INPUT -p tcp -m state --state NEW -m tcp --dport 80 -j ACCEPT#允许所有人访问443端口-A INPUT -p tcp -m state --state NEW -m tcp --dport 443 -j ACCEPT#允许所有人访问27017端口-A INPUT -p tcp -m state --state NEW -m tcp --dport 27017 -j ACCEPT#只允许xxx.xxx.xxx.xxxIP访问27017端口,如果要允许多个IP访问一个端口（重复多行）-A INPUT -p tcp -s xxx.xxx.xxx.xxx --dport 27017 -j ACCEPT 已知规则但没有使用 1234567891011禁止外部访问TCP的40080端口：-A INPUT -p tcp --dport 40080 -j DROP禁止外部访问TCP的3000到4000端口（端口范围）：-A INPUT -p tcp --dport 3000:4000 -j DROP禁止某个IP地址访问所有TCP端口：-A INPUT -p tcp -s 192.168.1.2 -j DROP禁止某个IP地址访问TCP的57025端口：-A INPUT -p tcp -s 192.168.1.2 --dport 57025 -j DROP iptables命令 1234567891011121314#启动service iptables start#重新启动service iptables restart#关闭iptablesservice iptables stop#最后重启防火墙使配置生效（等同重新启动）systemctl restart iptables.service#设置防火墙开机启动systemctl enable iptables.service]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>iptables</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos下node安装与nginx安装（二）]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FCentos%E6%9C%8D%E5%8A%A1%E5%99%A8%2Fcentos%E4%B8%8Bnode%E5%AE%89%E8%A3%85%E4%B8%8Enginx%E5%AE%89%E8%A3%85%EF%BC%88%E4%BA%8C%EF%BC%89%2F</url>
    <content type="text"><![CDATA[node安装sudo yum install epel-release(安装epel源)sudo yum install nodejs(安装node)中途如果有需要的按y确认即可，安装成功之后可以通过node -v和npm -v来查看node的版本和npm包的版本。 nginx安装和开机启动yum install nginx(安装nginx)sudo systemctl enable nginx.service（设置开机启动）/usr/share/nginx/html(网站文件存放默认目录)/etc/nginx/conf.d/default.conf(网站默认站点配置)/etc/nginx/conf.d/(自定义Nginx站点配置文件存放目录)/etc/nginx/nginx.conf(Nginx全局配置)]]></content>
      <categories>
        <category>centos</category>
      </categories>
      <tags>
        <tag>服务器</tag>
        <tag>centos</tag>
        <tag>node</tag>
        <tag>nginx</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[centos虚拟机]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FVMware%2Fcentos%E8%99%9A%E6%8B%9F%E6%9C%BA%2F</url>
    <content type="text"><![CDATA[网络连接(桥接模式，静态IP) 1.首先创建虚拟机时需要选择桥接模式（或者创建后更改虚拟机网络适配器也可以） 2.打开VMware =&gt; 编辑 =&gt; 虚拟网络编辑器,然后在最下面（使用管理员权限）点击更改设置按钮 3.首先移除默认添加VMnet0网络,然后点击添加网络选择VMnet0，桥接模式 =&gt; 桥接到Inter(R)I211网卡（即电脑本机网卡） 4.选中虚拟机右键设置，网络适配器 =&gt; 网络连接 =&gt; 自定义 =&gt; VMnet0 5.重启，ip addr和ping测试网络是否成功。 6.路由器给虚拟机设置静态IP地址,以便作端口映射。 FTP权限 selinux 关闭 chmod -R 777（文件夹及子文件夹获得所有权限，重要！！！），chmod -x 777（只更改当前目录） 扩展知识 为什么虚拟机使用桥接而不用NAT，我需要在路由器处做端口映射，如果是NAT，相当于再接路由器，再设置一层端口映射，加重工作量和复杂度。 vmnet0 =&gt; 桥接网络 vmnet1 =&gt; Host-Only网络模式 vmnet8 =&gt; NAT网络 第三步为什么要先移除网络，再添加网络，因为直接修改保存后不生效，下次打开VMnet0不存在。 中途有开启过centos系统的网卡，默认是关闭，暂未测试是否会影响网络是否连接成功，如以上步骤还未连接成功，就设置开启centos网卡，ONBOOT=yes]]></content>
      <categories>
        <category>vmware</category>
      </categories>
      <tags>
        <tag>centos</tag>
        <tag>vmware</tag>
        <tag>虚拟机</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ThinkJs]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FThinkJS%2FThinkJs%2F</url>
    <content type="text"><![CDATA[ThinkJs x版本多模块不能默认模块， 访问必须带上模块名. 关于api中中断处理 this.fail(500, ‘请求错误!’);必须带上return false; 在thinkjs类中，调用父类的方法，必须在子类return false才能中断api进行结果返回.]]></content>
      <categories>
        <category>thinkjs</category>
      </categories>
      <tags>
        <tag>node</tag>
        <tag>前端</tag>
        <tag>thinkjs</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[for循环textInput的问题]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2Ffor%E5%BE%AA%E7%8E%AFtextInput%E7%9A%84%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[需求:for循环未知个数输入框，然后用户点击对应的输入框，更改对应数据.1 2 3 4 5假如5个输入框，用户点击第三个输入框改变第三个输入框的值. 实现中出现的问题:onChangeText只接受更改后的文本值一个参数，对应的key无法传进去，无法判断当前需要更改第几个数据。换个思路就是，怎样知道用户当前点击修改的输入框是第几个，如果我能知道是第几个就可以修改对应数据的第i个 尝试过的解决办法:1.onChangeText传入的时候将key传入，只接受一个参数，(不成立)2.onChangeText绑定外部一个方法，无法传入参数（不成立）3.ref的形式绑定组件，在点击的时候无法得到点击的textinput对应的ref，（不成立） 结果: 目前暂时无法解决采用迂回方式，点击修改时弹出modal层，然后在外层包裹TouchableOpacity点击方法可以传入对应的key 2017-11-1: 采用闭包传入i1234567891011解法1: for(var i=0; i&lt; input.length; i++)&#123; (function(i)&#123; CODE; &#125;)(i);&#125;解法2:for(let i=0; i&lt; input.length; i++)&#123; CODE;&#125;]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative进阶知识]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative%E8%BF%9B%E9%98%B6%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[导航控制器react-navigation介绍react-navigation react-native从开源至今，一直存在几个无法解决的毛病，偶尔就会复发让人隐隐作痛，提醒你用的不是原生，其中包括列表的复用问题，导航跳转不流畅的问题等等。终于facebook坐不住了，在前一段时间开始推荐使用react-navigation，并且在0.44发布的时将之前一直存在的Navigator废弃了。react-navigation是致力于解决导航卡顿，数据传递，Tabbar和navigator布局，支持redux。虽然现在功能还不完善，但基本是可以在项目中推荐使用的。 react-navigation三大模块 StackNavigator类似顶部导航条，用来跳转页面和传递参数 TabNavigator类似底部标签栏，用来区分模块 DrawerNavigator抽屉，类似从App左侧滑出一个页面 navigation在StackNavigator中注册后的组件都有navigation这个属性. navigation又有5个参数:navigate, goBack, state, setParams, dispatch, 可以在组件下console.log一下this.props就能看到. this.props.navigation.navigate(‘Two’, { name: ‘two’ }): push下一个页面 routeName: 注册过的目标路由名称 params: 传递的参数 action: 如果该界面是一个navigator的话，将运行这个sub-action this.props.navigation.goBack(): 返回上一页 this.props.navigation.state: 每个界面通过这去访问它的router，state其中包括了： routeName: 路由名 key: 路由身份标识 params: 参数 this.props.navigation.setParams: 该方法允许界面更改router中的参数，可以用来动态的更改导航栏的内容 this.props.navigation.dispatch: 可以dispatch一些action，主要支持的action有： Navigate: 跳转到指定页面 Reset: Reset方法会清除原来的路由记录，添加上新设置的路由信息, 可以指定多个action，index是指定默认显示的那个路由页面, 注意不要越界了 SetParams: 为指定的router更新参数，该参数必须是已经存在于router的param中 组件之间传值(父-&gt;子，子-&gt;父,同级之间) 父组件向子组件传值 在父组件中通过属性传递给子组件，在子组件中通过this.props获取信息；如果嵌套的层次太深，那么从外往内组件传递会比较纠结，需要通过props一层一层往下传递. 子组件向父组件传值 1.子组件控制自己的state，然后通过父组件提供的回调方法，告诉父组件信息并在组件展示出来；2.其实是依赖于props来传递事件的引用，并通过回调的方式来实现；3.如果嵌套太深的话，就必须一次次回调传入的回调函数，来实现子组件向父组件传值或者操作； 同级组件传值 DeviceEventEmitter跨组件通信（注册监听） 父组件定义state,然后props传递给每个子组件,通过子组件回调方法触发父组件state更新来更改另外一个组件props的更新 redux数据流原生集成与原生交互第三方组件的使用（键盘弹出事件）]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative报错信息]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative%E6%8A%A5%E9%94%99%E4%BF%A1%E6%81%AF%2F</url>
    <content type="text"><![CDATA[报错信息：expected the enhancer to be a function12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758/*redux源码相关*/import isPlainObject from 'lodash/isPlainObject'import $$observable from 'symbol-observable'export default function createStore(reducer, preloadedState, enhancer) &#123; if (typeof preloadedState === 'function' &amp;&amp; typeof enhancer === 'undefined') &#123; enhancer = preloadedState preloadedState = undefined &#125; if (typeof enhancer !== 'undefined') &#123; if (typeof enhancer !== 'function') &#123; throw new Error('Expected the enhancer to be a function.') &#125; return enhancer(createStore)(reducer, preloadedState) &#125; if (typeof reducer !== 'function') &#123; throw new Error('Expected the reducer to be a function.') &#125; ... return &#123; dispatch, subscribe, getState, replaceReducer, [$$observable]: observable &#125;&#125;/* 报错原因 * 同事在测试环境中加入ReduxDevToolsIfNeed，打正式包时没有对应的值，所以会引发redux源码抛出异常，注释ReduxDevToolsIfNeed即可 */'use strict';import thunk from 'redux-thunk';import &#123; applyMiddleware, createStore&#125; from 'redux';import AppReducer from '../reducers/AppReducer';const ReduxDevToolsIfNeed = __DEV__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__ &amp;&amp; window.__REDUX_DEVTOOLS_EXTENSION__();const middlewares = [thunk];const createStoreWithMiddleware = applyMiddleware(...middlewares)(createStore);export default function storeConfig(initialState) &#123; const store = createStoreWithMiddleware( AppReducer, initialState, // ReduxDevToolsIfNeed, ); return store;&#125;]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative基础知识]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86%2F</url>
    <content type="text"><![CDATA[屏幕适配1234567891011121314151617181920212223242526272829303132333435363738394041424344'use strict';import &#123; Dimensions&#125; from 'react-native';//设备的宽度，单位:dpconst deviceWidthDp = Dimensions.get('window').width;//设备的高度，单位:dpconst deviceHeightDp = Dimensions.get('window').height;//设计稿宽度，单位:pxconst uiWidthPx = 750;/* * 将px转换到pd * @param uiElementPx 设计稿元素的尺寸 * @return &#123;number&#125; 实际屏幕的尺寸 */function p2d(uiElementPx) &#123; return uiElementPx * deviceWidthDp / uiWidthPx;&#125;/* * 返回设备宽度，单位:dp * @return &#123;number&#125; 设备宽度 */function width() &#123; return deviceWidthDp;&#125;/* * 返回设备高度，单位:dp * @return &#123;number&#125; 设备高度 */function height() &#123; return deviceHeightDp;&#125;module.exports = &#123; p2d, width, height,&#125; dp: 基于屏幕密度的抽象单位，像素无关密度 px: 像素点 分辨率: 横纵2个方向的像素点的数量 RN采用的dp作为单位 UI设计原型：基于iphone6分辨率：1334 x 750 pxdeviceWidthDp为当前运行设备的宽度，uiWidthPx为UI设计图的宽度，uiElementPx设计图中标注的元素的px值。例如: 750的设计稿view宽为200在rn的iphone6中宽度为20X375/750=10 =&gt; view在iphone6中显示为10个单位，占整个屏幕的10/375在rn的一个安卓模拟器中宽度为20X384/750=10.24 =&gt; view在iphone6中显示为10.24个单位，占整个屏幕的10.24/384那么使用的话，比如一个View的UI标注宽高为200x400 12import UISize from './UISize'&lt;View style=&#123;&#123;width:UISize.p2d(200), height:UISize.p2d(400)&#125;&#125;&gt;&lt;/View&gt; 已知BUG：安卓的flatList高度如果为小数,可能会造成item边框线高度显示不一致，这里可以做一个平台判断对安卓单独处理。 Flexbox布局Flex Direction在组件的style中指定flexDirection可以决定布局的主轴。子元素是应该沿着水平轴(row)方向排列，还是沿着竖直轴(column)方向排列呢？默认值是竖直轴(column)方向。 Justify Content在组件的style中指定justifyContent可以决定其子元素沿着主轴的排列方式。子元素是应该靠近主轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end、space-around以及space-between。 Align Items在组件的style中指定alignItems可以决定其子元素沿着次轴（与主轴垂直的轴，比如若主轴方向为row，则次轴方向为column）的排列方式。子元素是应该靠近次轴的起始端还是末尾段分布呢？亦或应该均匀分布？对应的这些可选项有：flex-start、center、flex-end以及stretch。 图片字体图标1.准备好需要用到字体图标文件.tff文件2.ios以蓝色文件夹拖入工程,在info.plist中加入字体;安卓需要将ttf文件放在android/app/src/main/assets/fonts目录下（完成后需要重新编译）12345678910111213&lt;View style=&#123;styles.fontImgView&#125;&gt; &lt;Text style=&#123;styles.fontImgText&#125;&gt;&amp;#xe75b;&lt;/Text&gt; &lt;Text style=&#123;styles.fontImgText&#125;&gt;&amp;#xe6ca;&lt;/Text&gt; &lt;Text style=&#123;styles.fontImgText&#125;&gt;&amp;#xe864;&lt;/Text&gt;&lt;/View&gt;fontImgView: &#123; flexDirection: 'row'&#125;,fontImgText: &#123; fontFamily: 'iconfont', fontSize: 20,&#125; 图片App图片资源此时只需要引入文件名，不需要路径和后缀,必须指定图片大小否则不会显示(同样需要重新编译)1&lt;Image source=&#123;&#123;uri: 'app_icon'&#125;&#125; style=&#123;&#123;width: 40, height: 40&#125;&#125; /&gt; 网络图片很多要在App中显示的图片并不能在编译的时候获得，又或者有时候需要动态载入来减少打包后的二进制文件的大小。这些时候，与静态资源不同的是，你需要手动指定图片的尺寸。1&lt;Image source=&#123;&#123;uri: 'https://facebook.github.io/react/img/logo_og.png'&#125;&#125; style=&#123;&#123;width: 400, height: 400&#125;&#125; /&gt; 静态图片资源要往App中添加一个静态图片，只需把图片文件放在代码文件夹中某处，然后像下面这样去引用它：1&lt;Image source=&#123;require('./my-icon.png')&#125; /&gt; 支持不同平台自动选择不同图片,命名方式my-icon.ios.png和my-icon.android.png 支持@2x,@3x不同分辨率的图片,命名方式my-icon@2x.png和my-icon@3x.png require中的图片名字必须是一个静态字符串（不能使用变量！因为require是在编译时期执行，而非运行时期执行！） FlatList1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374'use strict';import React, &#123; Component&#125; from 'react';import &#123; StyleSheet, View, Text, Platform, FlatList, Button&#125; from 'react-native';class flatList extends Component &#123; constructor(props) &#123; super(props); this.state = &#123; data: [&#123; text: '列表1' &#125;, &#123; text: '列表2' &#125;, &#123; text: '列表3' &#125;, &#123; text: '列表4' &#125;, &#123; text: '列表5' &#125;] &#125;; &#125; render() &#123; return ( &lt;View style=&#123;styles.container&#125;&gt; &lt;FlatList data=&#123;this.state.data&#125; keyExtractor=&#123;(item, index) =&gt; index.toString()&#125; renderItem=&#123;(&#123;item&#125;) =&gt; &lt;Text&gt;&#123;item.text&#125;&lt;/Text&gt;&#125; /&gt; &lt;Button onPress=&#123;this.doAddData.bind(this)&#125; title='点击增加数据' color='#333' /&gt; &lt;/View&gt; ); &#125; doAddData() &#123; let newData = []; const length = this.state.data.length; for (let i = 1; i &lt;= 5; i++) &#123; newData.push(&#123; text: '列表' + (length + i) &#125;) &#125; this.setState(&#123; data: this.state.data.concat(newData) &#125;) &#125;&#125;const styles = StyleSheet.create(&#123; container: &#123; flex: 1, marginTop: Platform.OS == 'ios' ? 20 : 0, alignItems: 'center', backgroundColor: '#F5FCFF', &#125;,&#125;);export default flatList; Props和StateProps大多数组件在创建时就可以使用各种参数来进行定制。用于定制的这些参数就称为props（属性）。 State我们使用两种数据来控制一个组件：props和state。props是在父组件中指定，而且一经指定，在被指定的组件的生命周期中则不再改变。 对于需要改变的数据，我们需要使用state。一般来说，你需要在constructor中初始化state 组件的生命周期React Native组件的生命周期 可以说整个React Native应用是由各种类型的组件构成。而每个组件都有其各自的生命周期。组件由初生到消亡，React Native框架通过不同的生命周期方法，为我们提供了方便切入组件生命周期的钩子，让我们可以在正确的时间点做正确的事情。当应用启动，React Native框架在内存中维护着一个虚拟DOM树。所谓组件的生命周期即由组件初始化并挂载到虚拟DOM为起始，到组件由虚拟DOM卸载为终结，组件的不同状态。生命周期方法则是组件在虚拟DOM树不同状态的描述。理解组件的生命周期方法是理解组件生命周期的关键，现在就让我们来详细探究组件的生命周期方法。 生命周期方法 组件的生命周期方法对应着组件的不同生命阶段，通常我们分为三个阶段：组件初始化及挂载阶段、组件运行期阶段及组件卸载阶段。 初始化及挂载阶段一、这是组件类的构造函数，通常在此初始化state数据模型。123456constructor(props) &#123; super(props); this.state = &#123; //key : value &#125;;&#125; 二、表示组件将要加载到虚拟DOM，在render方法之前执行，整个生命周期只执行一次。123componentWillMount() &#123;&#125; 三、表示组件已经加载到虚拟DOM，在render方法之后执行，整个生命周期只执行一次。通常在该方法中完成异步网络请求或者集成其他JavaScript库。123componentDidMount() &#123;&#125; 运行期阶段一、在组件接收到其父组件传递的props的时候执行,参数为父组件传递的props。在组件的整个生命周期可以多次执行。通常在此方法接收新的props值，重新设置state。12345componentWillReceiveProps(nextProps) &#123; this.setState(&#123; //key : value &#125;);&#125; 二、在componentWillReceiveProps(nextProps)执行之后立刻执行；或者在state更改之后立刻执行。该方法包含两个参数，分别是props和state。该方法在组件的整个生命周期可以多次执行。如果该方法返回false，则componentWillUpdate(nextProps, nextState)及其之后执行的方法都不会执行，组件则不会进行重新渲染。123shouldComponentUpdate(nextProps, nextState) &#123; return true;&#125; 二、在shouldComponentUpdate(nextProps, nextState)函数执行完毕之后立刻调用，该方法包含两个参数，分别是props和state。render()函数执行之前调用。该方法在组件的整个生命周期可以多次执行。123componentWillUpdate(nextProps, nextState) &#123;&#125; 三、在render()方法执行之后立刻调用。该方法包含两个参数，分别是props和state。该方法在组件的整个生命周期可以多次执行。123componentDidUpdate(preProps, preState) &#123;&#125; 四、render方法用于渲染组件。在初始化阶段和运行期阶段都会执行。12345render() &#123; return( &lt;View/&gt; );&#125; 卸载阶段一、在组件由虚拟DOM卸载的时候调用。123componentWillUnmount() &#123;&#125; 网络调试技巧Global和AsyncStorage]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative-SwitchHeaderTitle]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative-SwitchHeaderTitle%2F</url>
    <content type="text"><![CDATA[SwitchHeaderTitle 自定义 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170//SwitchHeaderTitle.jsexport const CHECKIN_LIST = [&#123; text: '渠道部门', isActive: true,&#125;, &#123; text: '代理商', isActive: false,&#125;];export default class SwitchHeaderTitle extends Component &#123; renderHeaderTitleList() &#123; let headerTitleListArray = []; for (let i = 0; i &lt; this.props.list.length; i++) &#123; headerTitleListArray.push( &lt;TouchableOpacity key=&#123;i&#125; activeOpacity=&#123;0.7&#125; style=&#123;[styles.headerTitleItemViewStyle, this.props.list[i].isActive ? &#123;backgroundColor: '#fff'&#125; : null ,i == 0 ? styles.noHeaderTitleItemViewStyle : null]&#125; onPress=&#123;this.toggleSwitchHeaderTitle.bind(this, i)&#125; &gt; &lt;Text style=&#123;[styles.titleTextStyle, this.props.list[i].isActive ? &#123;color: CommonColor.themColor&#125; : null]&#125;&gt;&#123;this.props.list[i].text&#125;&lt;/Text&gt; &lt;/TouchableOpacity&gt; ) &#125; return headerTitleListArray; &#125; render() &#123; return ( &lt;View style=&#123;styles.headerTitleWrapStyle&#125;&gt; &lt;View style=&#123;styles.headerTitleViewStyle&#125;&gt; &#123;this.renderHeaderTitleList.bind(this)()&#125; &lt;/View&gt; &lt;/View&gt; ); &#125; toggleSwitchHeaderTitle(index) &#123; for (let i = 0; i &lt; this.props.list.length; i++) &#123; if (i == index) &#123; this.props.list[i].isActive = true; &#125; else &#123; this.props.list[i].isActive = false; &#125; &#125; this.props.action(this.props.list); &#125;&#125;const styles = StyleSheet.create(&#123; headerTitleWrapStyle: &#123; flex: 1, alignItems: 'center', justifyContent: 'center', &#125;, headerTitleViewStyle: &#123; flexDirection: 'row', alignItems: 'center', justifyContent: 'center', borderRadius: 8, borderWidth: StyleSheet.hairlineWidth, borderColor: '#fff', overflow: 'hidden' &#125;, headerTitleItemViewStyle: &#123; borderLeftColor: '#fff', borderLeftWidth: StyleSheet.hairlineWidth, minWidth: UISize.p2d(150), alignItems: 'center', justifyContent: 'center' &#125;, noHeaderTitleItemViewStyle: &#123; borderLeftWidth: 0, &#125;, titleTextStyle: &#123; color: '#fff', fontSize: 14, paddingVertical: UISize.p2d(10), paddingHorizontal: UISize.p2d(20) &#125;&#125;);//ModifyAllCheckInScreen.jsimport SwitchHeaderTitle, &#123; CHECKIN_LIST&#125; from '具体目录/SwitchHeaderTitle';import ModifyDepartmentCheckInScreen from './ModifyDepartmentCheckInScreen'; //子页面一import ModifyAgentCheckInScreen from './ModifyAgentCheckInScreen'; //子页面二export default class ModifyAllCheckInScreen extends Component &#123; static navigationOptions = (&#123; navigation &#125;) =&gt; &#123; return &#123; headerTitle: &lt;SwitchHeaderTitle list=&#123;navigation.state.params &amp;&amp; navigation.state.params.list || []&#125; action=&#123;navigation.state.params ? navigation.state.params.toggleSwitchHeaderTitle : null&#125;/&gt;, headerRight: &lt;NavbarRightButton content='保存' action=&#123;navigation.state.params ? navigation.state.params.rightPress : null&#125;/&gt; &#125; &#125; constructor(props) &#123; super(props); this.state = &#123; lazyDeptLoading: CHECKIN_LIST[0].isActive, lazyAgentLoading: CHECKIN_LIST[1].isActive, &#125; this.props.navigation.setParams(&#123; list: CHECKIN_LIST, toggleSwitchHeaderTitle: this.toggleSwitchHeaderTitle.bind(this), rightPress: this.doSave.bind(this) &#125;) &#125; render() &#123; return ( &lt;View style=&#123;CommonStyles.whiteContainer&#125;&gt; &#123; this.state.lazyDeptLoading ? ( &lt;ModifyDepartmentCheckInScreen show=&#123;CHECKIN_LIST[0].isActive&#125; ref=&#123;ref =&gt; this.ModifyDepartmentCheckInScreen = ref&#125; navigation=&#123;this.props.navigation&#125; /&gt; ) : null &#125; &#123; this.state.lazyAgentLoading ? ( &lt;ModifyAgentCheckInScreen show=&#123;CHECKIN_LIST[1].isActive&#125; ref=&#123;ref =&gt; this.ModifyAgentCheckInScreen = ref&#125; navigation=&#123;this.props.navigation&#125; /&gt; ) : null &#125; &lt;/View&gt; ) &#125; toggleSwitchHeaderTitle(list) &#123; if (list[0].isActive &amp;&amp; !this.state.lazyDeptLoading) &#123; this.state.lazyDeptLoading = true; &#125; if (list[1].isActive &amp;&amp; !this.state.lazyAgentLoading) &#123; this.state.lazyAgentLoading = true; &#125; this.props.navigation.setParams(&#123; list: list &#125;) &#125; doSave() &#123; if (CHECKIN_LIST[0].isActive) &#123; this.ModifyDepartmentCheckInScreen.doConfirmBtn(); &#125; else &#123; this.ModifyAgentCheckInScreen.doConfirmBtn(); &#125; &#125;&#125;//ModifyDepartmentCheckInScreen.js 子页面一export default class ModifyDepartmentCheckInScreen extends Component &#123; render()&#123; return( &lt;View style=&#123;this.props.show ? &#123;flex: 1&#125; : &#123;flex: 0,height: 0&#125;&#125;&gt; &lt;Text&gt;页面一&lt;/Text&gt; &lt;/View&gt; ) &#125; doConfirmBtn()&#123; console.log('点击保存按钮'); &#125;&#125;//ModifyAgentCheckInScreen.js 子页面二同页面一]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IOS打包流程]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FIOS%E6%89%93%E5%8C%85%E6%B5%81%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[ios证书配置 因是接手打包项目，所以证书已申请，直接配置即可 1.双击已生成的证书安装(两个都需要安装) 2.添加账号，下载Manual profiles 3.配置对应的bundle identifier,signing 打包流程 1.选择编译设备(通用设备) 2.archive模式开始打包 3.打包成功后打开项目列表（以便导出） 4.点击export进行导出 5.选择企业（因为项目是企业证书） 6.导出选项，优化等不用选择直接下一步 7.注意勾选对应的证书，然后导出到桌面即可]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CodePush教程]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FCodePush%E6%95%99%E7%A8%8B%2F</url>
    <content type="text"><![CDATA[安装 1.全局安装App Center CLI(目前appcenter-cli受event-stream恶意代码攻击 event-stream@3.3.6被注入恶意代码) npm install -g appcenter-cli 2.注册App Center账号 通过App Center注册地址注册账号 3.命令行登陆App Center账号 appcenter login 4.创建app应用 网页创建（推荐）,登陆状态下打开App Center,add new app -&gt; 填写信息 -&gt; 完成命令行创建,命令行中=&gt;格式：appcenter apps create -d -o -p 示例：appcenter apps create -d minya -o Android -p React-Native 12345注意: 应用创建后默认有两个部署 Staging Production部署默认是有key值存在的查看key值方法:appcenter codepush deployment list -a minya/APP_IOS --displayKeysappcenter codepush deployment list -a minya/APP_ANDROID --displayKeys 5.安装codepush 在对应项目目录下: npm install –save react-native-code-push 6.ios,android配置 react-native link react-native-code-push 7.发布更新 appcenter codepush release-react -a minya/APP_IOS -t 1.0.0 -m –description “更新描述” 多部署安装 多部署文档,按照文档配置即可。123456789注意点:debug &#123; buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;&quot;&apos; //这里也可以添加测试环境的CODEPUSH_KEY然后在模拟器里面测试&#125;releaseStaging &#123; buildConfigField &quot;String&quot;, &quot;CODEPUSH_KEY&quot;, &apos;&quot;&lt;INSERT_STAGING_KEY&gt;&quot;&apos; //matchingFallbacks = [&apos;release&apos;] 该行添加会报错，注释即可编译&#125; 命令12345查看部署历史appcenter codepush deployment history Staging删除部署历史(Staging)appcenter codepush deployment clear -a minya/APP_IOS Staging 技巧 在使用codepush中，经常需要用到很多命令，但是一时间又不能完全记忆，可以使用package.json中的script中的命令配置12345678910&quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node node_modules/react-native/local-cli/cli.js start&quot;, &quot;test&quot;: &quot;jest&quot;, &quot;add ios&quot;: appcenter codepush release-react -a minya/APP_IOS, &quot;add android&quot;: appcenter codepush release-react -a minya/APP_ANDROID, &quot;delete ios staging&quot;: appcenter codepush deployment clear -a minya/APP_IOS Staging, &quot;delete android staging&quot;: appcenter codepush deployment clear -a minya/APP_ANDROID Staging,&#125;其中正式环境的发布不需要通过命令，在确认预发布环境ok直接可以通过appcenter页面点击按钮推送到正式环境description描述信息换行问题，在命令行中\n,\\n,&quot;\n&quot;,&quot;\\n&quot;都尝试过，都不能换行，直接在appcenter页面上编辑回车就可以了。。。。]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[BUG积累]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FBUG%E7%A7%AF%E7%B4%AF%2F</url>
    <content type="text"><![CDATA[安装windows10 所有都安装成功运行react-native run-android报找不到设备问题 原因1.如果在windows上初始化的项目，在mac运行安卓会有字符编码的问题.原因2.java_jdk版本必须为8，如果是java10，无论如何都不能通过命令行启动，只能通过android studio启动 组件子组件阻止父组件点击12345678910111213141516171819202122render() &#123; &lt;TouchableOpacity style=&#123;styles.popupWrapStyle&#125; activeOpacity=&#123;1&#125; onPress=&#123;this.closeModalPopup.bind(this)&#125; onStartShouldSetResponderCapture=&#123;()=&gt; true&#125; &gt; &lt;View &#123;...this.gestureHandlers&#125; style=&#123;styles.popupViewStyle&#125;&gt; &lt;Text&gt;123&lt;/Text&gt; &lt;Text&gt;123&lt;/Text&gt; &lt;Text&gt;123&lt;/Text&gt; &lt;Text&gt;123&lt;/Text&gt; &lt;Text&gt;123&lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt;&#125;componentWillMount() &#123; this.gestureHandlers = &#123; onStartShouldSetResponderCapture: () =&gt; true, &#125;&#125; 调用了一个未安装组件的setState警告123456789101112131415Can only update a mounted or mounting component. This usually means you called setState, replaceState, or forceUpdate on an unmounted component.原因是当离开页面以后，组件已经被卸载，执行setState时无法找到渲染组件。解决办法特别简单，在离开页面时的周期函数（componentWillUnmount）中：//组件将被卸载 componentWillUnmount()&#123; //重写组件的setState方法，直接返回空 this.setState = (state,callback)=&gt;&#123; return; &#125;; &#125;再来回切换页面以后，只要页面离开就会执行该方法，当页面再次进入时又会重新挂载父组件的setState方法，从而不影响页面的渲染。不过该方法不是很严谨，在集成的子组件中能修改父组件的setState方法，不过在javascript的语法中很适用，建议只在出现上述bug的页面中使用。 FlatList或ListView更改数据源视图不更新或者数据显示错乱123/* key如果是用的 item.index().toString()，key一直是0-9，所以数据不刷新 * 此后，不建议key用数组下标显示*/ FlatList实现自适应高度 FlatList默认flexGrow: 1,导致FlatList不能自适应高度，加上样式flexGrow: 0即可 FlatList性能缓慢 警告信息如下: you have a large list that is slow to update - make sure your renderItem function renders components that follow React performance best practices like PureComponent, shouldComponentUpdate, etc.123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566/* * 这是因为renderItemView()中渲染的组件没有继承自React.PureComponent * 推荐在FlatList和renderItemView中都继承React.PureComponent而不是React.Component */class MyListItem extends React.PureComponent &#123; _onPress = () =&gt; &#123; this.props.onPressItem(this.props.id); &#125;; render() &#123; const textColor = this.props.selected ? "red" : "black"; return ( &lt;TouchableOpacity onPress=&#123;this._onPress&#125;&gt; &lt;View&gt; &lt;Text style=&#123;&#123; color: textColor &#125;&#125;&gt; &#123;this.props.title&#125; &lt;/Text&gt; &lt;/View&gt; &lt;/TouchableOpacity&gt; ); &#125;&#125;class MultiSelectList extends React.PureComponent &#123; state = &#123;selected: (new Map(): Map&lt;string, boolean&gt;)&#125;; _keyExtractor = (item, index) =&gt; item.id; _onPressItem = (id: string) =&gt; &#123; // updater functions are preferred for transactional updates this.setState((state) =&gt; &#123; // copy the map rather than modifying state. const selected = new Map(state.selected); selected.set(id, !selected.get(id)); // toggle return &#123;selected&#125;; &#125;); &#125;; _renderItem = (&#123;item&#125;) =&gt; ( &lt;MyListItem id=&#123;item.id&#125; onPressItem=&#123;this._onPressItem&#125; selected=&#123;!!this.state.selected.get(item.id)&#125; title=&#123;item.title&#125; /&gt; ); render() &#123; return ( &lt;FlatList data=&#123;this.props.data&#125; extraData=&#123;this.state&#125; keyExtractor=&#123;this._keyExtractor&#125; renderItem=&#123;this._renderItem&#125; /&gt; ); &#125;&#125;/*React.PureComponent 与 React.Component 几乎完全相同，但 React.PureComponent 通过prop和state的浅对比来实现 shouldComponentUpate()。如果React组件的 render() 函数在给定相同的props和state下渲染为相同的结果，在某些场景下你可以使用 React.PureComponent 来提升性能。React.PureComponent 的 shouldComponentUpdate() 只会对对象进行浅对比。如果对象包含复杂的数据结构，它可能会因深层的数据不一致而产生错误的否定判断(表现为对象深层的数据已改变视图却没有更新, 原文：false-negatives)。当你期望只拥有简单的props和state时，才去继承 PureComponent ，或者在你知道深层的数据结构已经发生改变时使用 forceUpate() 。或者，考虑使用 不可变对象 来促进嵌套数据的快速比较。此外,React.PureComponent 的 shouldComponentUpate() 会忽略整个组件的子级。请确保所有的子级组件也是”Pure”的。 */ 0.55不能输入中文123456789101112131415import React, &#123;Component&#125; from 'react';import &#123;Platform, TextInput&#125; from 'react-native';class WPTextInput extends Component &#123; shouldComponentUpdate(nextProps)&#123; return Platform.OS !== 'ios' || (this.props.value === nextProps.value &amp;&amp; (nextProps.defaultValue == undefined || nextProps.defaultValue == '' )) || (this.props.defaultValue === nextProps.defaultValue &amp;&amp; (nextProps.value == undefined || nextProps.value == '' )); &#125; render() &#123; return &lt;TextInput &#123;...this.props&#125; /&gt;; &#125;&#125;;export default WPTextInput; 0.55 0.56IOS不能输入中文，更新数据源不能更新界面，clear()方法不生效1234567891011121314151617181920212223242526/* * 修改node_modules源文件 * 位置1: project/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputShadowView.m * 位置2: project/node_modules/react-native/Libraries/Text/TextInput/RCTBaseTextInputView.m */ RCTBaseTextInputShadowView.m文件修改 //26行新增+ NSString *_text; //105行新增+ - (NSString *)text+ &#123;+ return _text;+ &#125;+ - (void)setText:(NSString *)text+ &#123;+ _text = text;+ _previousAttributedText = _localAttributedText;+ &#125; RCTBaseTextInputView.m文件修改 //340行修改 if (_onChange) &#123; ↓↓↓↓ if (_onChange &amp;&amp; backedTextInputView.markedTextRange == nil) &#123; textinput作为组件，默认值(value为数组中的数据)初次不渲染12345678//强制刷新componentWillReceiveProps(nextProps) &#123; if(nextProps.value &amp;&amp; nextProps.isFirstUpdate)&#123; setTimeout(()=&gt;&#123; this.forceUpdate() &#125;, 50) &#125;&#125; Attempted to redefine property “XXXX”(OrderInvoiceMoney=&gt; 自定义变量, width, fontSize等) 重新定义属性导致的报错，即一个属性定义多次.在测试debug模式中不会报错，编译正式包崩溃闪退，查看日志得知. 样式安卓低版本borderRadius属性安卓低版本&lt;4.1.1&gt;Image标签不支持borderRadius属性，需要用view包裹，在view上面设置borderRadius属性 字体图标font-weight字体图标不能设置字体粗细，否则安卓会不识别 IOS三倍分辨率border问题（设置小数点）ios设置borderTopWidth: 0.5，在ios上会导致border失真(具体表现为border占据很大一块) 1.只有borderTopWidth会有该问题，borderBottomWidth不存在该问题，可将borderTopWidth改为borderBottomWidth 2.将borderTopWidth: 0.5改为borderTopWidth: 0.33(比例1/3 == 0.33)12345678/* * hairlineWidth:CallExpression * 该用来定义当前平台最细的宽度。该属性用来设置边框或者两个组件之间的分割线 */&#123; borderBottomColor: '#bbb', borderBottomWidth: StyleSheet.hairlineWidth&#125; 编译Mac打包安卓正式包(gradlew相关报错)执行sudo cd android &amp;&amp; ./gradlew assembleRelease,报错信息:-bash: ./gradlew: No such file or directory进入android目录，单独执行./gradlew assembleRelease报错(-bash: ./gradlew: Permission denied)解决办法: chmod +x gradlew windows运行rn项目报模块找不到(AccessibilityInfo 0.56.0) 原因：react-native项目本身版本的问题解决办法：修改package.json “react”: “16.3.1” “react-native”: “0.55.4” “babel-preset-react-native”: “2.1.0” 删除node_modules然后重新安装 windows中原文件有报错切运行过（修改报错并反复确认没问题还是报相同的错误=&gt;git忽略文件夹大小写变动问题） react-native缓存问题react-native start –reset-cache main.jsbundle does not exist引发的惨案1234567891011121314151617181920212223242526272829这个报错是在安装极光推送之后编译Archive导致的报错.最开始的猜测，因为测试环境真机和模拟器都没有报错，而正是环境main.jsbundle不存在=》以下尝试1.尝试手动编译main.jsbundle，2.下载推送的正式证书（因为极光推送涉及到推送证书，测试和正式又是不同的证书）3.重新npm install4.重新react-native link5.尝试github上各种解决方法都依然编译不能通过，再纠结一个小时之后，偶然看报错信息+ DEST=/Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app+ [[ Release = \D\e\b\u\g ]]+ BUNDLE_FILE=/Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app/main.jsbundle+ node /Users/minya/Desktop/zybfapp/Mobile/XZY/node_modules/react-native/local-cli/cli.js bundle --entry-file index.js --platform ios --dev false --reset-cache --bundle-output /Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app/main.jsbundle --assets-dest /Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.appScanning folders for symlinks in /Users/minya/Desktop/zybfapp/Mobile/XZY/node_modules (12ms)Scanning folders for symlinks in /Users/minya/Desktop/zybfapp/Mobile/XZY/node_modules (10ms)warning: the transform cache was reset.Loading dependency graph, done./Users/minya/Desktop/zybfapp/Mobile/XZY/node_modules/react-native-root-siblings/index.js: /Users/minya/Desktop/zybfapp/Mobile/XZY/node_modules/react-native-root-siblings/index.js: Exporting local &quot;_default&quot;, which is not declared. (This is an error on an internal node. Probably an internal error.)（===============最后发现是一个第三方库的依赖文件，导出类的问题================）+ [[ false != true ]]+ [[ ! -f /Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app/main.jsbundle ]]+ echo &apos;error: File /Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app/main.jsbundle does not exist. This must be a bug with&apos;（===============最开始的报错信息，注意力一直在这里================）error: File /Users/minya/Library/Developer/Xcode/DerivedData/XZY-blohpvcvoaocvvaiiqcahzynwdhp/Build/Intermediates.noindex/ArchiveIntermediates/XZY/BuildProductsPath/Release-iphoneos/XZY.app/main.jsbundle does not exist. This must be a bug with+ echo &apos;React Native, please report it here: https://github.com/facebook/react-native/issues&apos;React Native, please report it here: https://github.com/facebook/react-native/issues+ exit 2结论：看报错信息，一定要一层一层往下面跟，因为反馈在表面的问题，往往是很多中错误的相同报错，特别是RN这种依赖IOS和Android原生的框架（看完整报错日志！！！！看完整报错日志！！！！看完整报错日志！！！！看完整报错日志！！！！看完整报错日志！！！！看完整报错日志！！！！看完整报错日志！！！！） RN项目缺陷（网上资料，备份） 1.此为网上看到的资料觉得在理，备份下]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB使用技巧]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FMongoDB%2FMongoDB%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[mongodb连接数据库 mongo命令默认连接27017端口数据库要连接特定端口数据库命令:1mongo --port 端口号 mongodb开启密码验证怎么登录 首先通过上面命令连接数据库，然后use 对应数据库名，比如admin数据库–&gt; use admin然后使用 db.auth(“账号”,”密码”); mongodb添加新数据库账号 1.首先登陆admin账号，保证有创建新数据库账号的权限 12use admin db.auth(&quot;userName&quot;,&quot;password&quot;) 2.use你要新添加的数据库，然后创建用户(比如创建一个A的数据库) 1234567891011121314151617#添加读写权限用户use A db.createUser(&#123;user:&quot;Auser&quot;,pwd:&quot;password&quot;,roles:[&#123;&quot;role&quot;:&quot;readWrite&quot;,&quot;db&quot;:&quot;A&quot;&#125;]&#125;) #添加超级用户use admindb.createUser(&#123;user:&quot;root&quot;,pwd:&quot;pwd&quot;,roles:[&#123;role:&quot;root&quot;,db:&quot;admin&quot;&#125;]&#125;)#角色类型1. 数据库用户角色：read、readWrite;2. 数据库管理角色：dbAdmin、dbOwner、userAdmin；3. 集群管理角色：clusterAdmin、clusterManager、clusterMonitor、hostManager；4. 备份恢复角色：backup、restore；5. 所有数据库角色：readAnyDatabase、readWriteAnyDatabase、userAdminAnyDatabase、dbAdminAnyDatabase6. 超级用户角色：root // 这里还有几个角色间接或直接提供了系统超级用户的访问（dbOwner 、userAdmin、userAdminAnyDatabase）7. 内部角色：__system mongodb删除用户1db.dropUser(&quot;root&quot;) mongodb查看具体数据 show dbs 查看所有数据库 use hotel 查看hotel数据库 show collections 查看hotel数据库下所有集合 db.hotel.find() 查看hotel数据库hotel集合下所有数据 db.hotel.find().count() 查看hotel数据库hotel集合下所有数据条数 查看mongo内存占用1top -p $(pidof mongod) 修改mongo默认占用内存大小(暂未生效，考虑升级版本)123456789101112131415storage: dbPath: /root/mongodb_data journal: enabled: true mmapv1: smallFiles: true wiredTiger: engineConfig: configString: cache_size = 512M //3.0写法 #cacheSizeGB: 0.5 //3.4以上尝试通过命令行追加--wiredTigerCacheSizeGB 0.5失败net: port: 自己设置的端口 bindIp: 127.0.0.1 mongodb删除集合1db.collection.drop() mongodb 索引 创建索引（单字段索引） 123456db.collection.createIndex(&#123;field: sort&#125;)#field 字段名称#sort 排序方式1升序，-1降序，2(不常用)#示例db.collection.createIndex(&#123;name: 1&#125;) 创建索引（复合索引，查询条件不只一个时使用） 1234db.collection.createIndex(&#123;field1: sort, field2: sort&#125;)#示例db.collection.createIndex(&#123;name: 1, id: 1&#125;) 查看索引 12345#查看索引大小db.collection.totalIndexSize()#查看所有索引db.collection.getIndexes() 删除索引 12345#删除指定索引db.collection.dropIndex(&quot;index-name&quot;)#删除所有索引db.collection.dropIndexes()]]></content>
      <categories>
        <category>mongodb</category>
      </categories>
      <tags>
        <tag>mongodb</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac新电脑配置-优化篇]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FMacOS%2Fmac%E6%96%B0%E7%94%B5%E8%84%91%E9%85%8D%E7%BD%AE-%E4%BC%98%E5%8C%96%E7%AF%87%2F</url>
    <content type="text"><![CDATA[删除并禁止.DS_Store产生 sudo find / -name “.DS_Store” -depth -exec rm {} \; (删除所有隐藏.DS_store文件) defaults write com.apple.desktopservices DSDontWriteNetworkStores true (设置不再产生选项) DS_Store 是给Finder用来存储这个文件夹的显示属性的：比如文件图标的摆放位置。删除以后的副作用就是这些信息的失去。 Mac开启允许任何来源安装 在终端中运行sudo spctl –master-disable即可，通过系统便好设置-安全性与隐私查看是否成功]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[mac下PATH环境变量配置]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FMacOS%2Fmac%E4%B8%8BPATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[PATH环境变量 配置文件优先级/etc/profile /etc/paths ~/.bash_profile ~/.bash_login ~/.profile ~/.bashrc 1./etc/profile全局环境变量，所有用户都会生效（不建议修改） 2./etc/bashrc （一般在这个文件中添加系统级环境变量） 全局（公有）配置，bash shell执行时，不管是何种方式，都会读取此文件。 3.~/.bash_profile （一般在这个文件中添加用户级环境变量） 每个用户都可使用该文件输入专用于自己使用的shell信息,当用户登录时,该文件仅仅执行一次! 12345678export ANDROID_HOME=/Users/minya/Library/Android/sdkexport JAVA_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_151.jdk/Contents/Homeexport NDK_HOME=/Users/minya/android-ndk-r10dexport ANDROID_NDK_ROOT=/Users/minya/Library/Android/sdk/ndk-bundleexport PUB_HOSTED_URL=https://pub.flutter-io.cnexport FLUTTER_STORAGE_BASE_URL=https://storage.flutter-io.cnexport FLUTTER_HOME=/Users/minya/flutterexport PATH=$NDK_HOME:$FLUTTER_HOME/bin:$PATH 注意：export PATH只能导出一次，如果有多个环境变量需要添加进PATH中，格式$JAVA_HOME:$NDK_HOME:$FLUTTER_HOME:$PATH$PATH跟在最后，中间用:连接 命令 echo $PATH (查看所有PATH环境变量) echo $ANDROID_HOME (查看安卓环境变量) sourch .bash_pro (重新生效环境变量配置) cd /Users/minya (当前用户名minya)]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MacOS技巧]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FMacOS%2FMacOS%E6%8A%80%E5%B7%A7%2F</url>
    <content type="text"><![CDATA[MacOS Sierra之前的系统 如果在App Store上下载的：直接在Launchpad鼠标长按图标点击删除即可。 如果不在App Store上下载的：推荐使用AppZapper, AppCleaner等第三方软件来卸载应用。 MacOS Sierra以及High Sierra 一律通过 关于本机 - 储存空间 - 管理 - 检查文件 - 左边栏中的应用程序按钮来进行删除，比原来版本方便许多且免费。 MacOS 打开多个模拟器关闭当前选中模拟器 cmd + w关闭当前选中模拟器 MacOS 左右方向键切换查看图片 不要双击打开图片，选中图片，然后点击空格键打开就可以左右切换了 切换隐藏文件的显示状态 shift + cmd + .即可切换]]></content>
      <categories>
        <category>macos</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[gitlab和sourcetree的配合使用]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FGit%2Fgitlab%E5%92%8Csourcetree%E7%9A%84%E9%85%8D%E5%90%88%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[gitlab和sourcetree的配合使用 本地创建密钥，生成ssh key 1.在终端中输入ssh-keygen -t rsa -C “开通git的邮箱”,连续回车完成创建 2.登录gitlab服务器，将本地ssh key值上传 3.ssh key的值获取方式: cat ssh key的位置 4.安装sourcetree，远程拉取代码即可.]]></content>
      <categories>
        <category>git</category>
      </categories>
      <tags>
        <tag>操作系统</tag>
        <tag>git</tag>
        <tag>macos</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[单体_单例模式]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FJS%2F%E5%8D%95%E4%BD%93-%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F%2F</url>
    <content type="text"><![CDATA[单体 - 单例模式]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[函数重载]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FJS%2F%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114'use strict';/* * =========================== * * 函数重载 * @author : LiChaoJun * @datetime : 2017/11/02 * * =========================== *//* * 什么是函数重载？ * 1.JS中不存在函数重载的概念; * 2.但一个函数通过判断参数列表来实现不同的功能，称为模拟函数重载; *//* * 应用情况,什么时候会用到? * 举例:有一个公用方法 * 1.如果不传参数时，返回第一种结果; * 2.如果传一个参数时，返回第二种结果; * 3.如果传二个参数时，返回第三种结果; * 4.如果传大于二个参数时，返回第四种结果; * ...以此类推 *//*传统方法一*/var reloadFunc = function() &#123; switch (arguments.length) &#123; case 0: console.log('未传入参数，执行方法一'); break; case 1: console.log('传入一个参数，执行方法二'); break; case 2: console.log('传入二个参数，执行方法三'); break; default: console.log('传入大于二个参数，执行方法四'); &#125;&#125;reloadFunc();reloadFunc('one');reloadFunc('one', 'two');reloadFunc('one', 'two', 'three');/* * 我们希望对象Company拥有一个find方法，当不传任何参数时， * 就会把Company.names里面的所有人的平均分数返回回来； * 因为find方法是根据参数的个数不同而执行不同的操作的， * 所以，需要有一个reloadCompanyFind方法，能够如下的为Company添加find的重载： */var company = &#123; names: [&#123; name: "张三", score: 98 &#125;, &#123; name: "李四", score: 88 &#125;, &#123; name: "王五", score: 72 &#125;, &#123; name: "赵六", score: 56 &#125;], //返回所有人的平均分数 find: function() &#123; var allScore = 0; for (var i = 0; i &lt; this.names.length; i++) &#123; allScore += this.names[i].score; &#125; return allScore / this.names.length; &#125;&#125;;var reloadCompanyFind = function(object, method, func) &#123; var oldMethod = object[method]; //给object 重新赋予新的方法 object[method] = function() &#123; if (func.length == arguments.length) &#123; return func.apply(this, arguments); &#125; else if (typeof oldMethod == 'function') &#123; return oldMethod.apply(this, arguments); &#125; &#125;;&#125;;reloadCompanyFind(company, 'find', function(name, name2) &#123; //返回其他人的姓名数组 var otherNames = []; for (var i = 0; i &lt; this.names.length; i++) &#123; if (this.names[i].name != name &amp;&amp; this.names[i].name != name2) &#123; otherNames.push(this.names[i].name); &#125; &#125; return otherNames;&#125;);reloadCompanyFind(company, 'find', function(name) &#123; //返回当前人的分数 for (var i = 0; i &lt; this.names.length; i++) &#123; if (name == this.names[i].name) &#123; return name + '的分数是' + this.names[i].score; &#125; &#125;&#125;);console.log(company.find());console.log(company.find('张三'));console.log(company.find('张三', '李四'));//PS：感觉此方法不如传统方法直观]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[yarn命令]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FJS%2Fyarn%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021'use strict';/* * =========================== * * yarn命令 * @author : LiChaoJun * @datetime : 2018/01/22 * * =========================== */console.log(`与NPM命令对照:npm install =&gt; yarn installnpm install --save [package] =&gt; yarn add [package]npm install --save-dev [package] =&gt; yarn add [package] --devnpm install --global [package] =&gt; yarn global add [package]npm uninstall --save [package] =&gt; yarn remove [package]npm uninstall --save-dev [package] =&gt; yarn remove [package]`);]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[this作用域]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FJS%2Fthis%E4%BD%9C%E7%94%A8%E5%9F%9F%2F</url>
    <content type="text"><![CDATA[函数内置name属性123456789function test()&#123; console.log('this is a func');&#125;window.test.name = '重新赋值函数name属性'; //无意义window.test.otherName = '定义非name关键字的属性';console.log(window.test.name); //testconsole.log(window.test.otherName); //定义非name关键字的属性// 函数内置name属性就是函数名，且name属性不能重新赋值改变,可以赋值其他非name关键字的属性; this作用域解析一1234567891011121314151617181920212223242526272829303132var name = "The window";function one() &#123; var name = "The one"; var object = &#123; name: "The object", getNameFunc: function() &#123; return function() &#123; return this.name; &#125;; &#125; &#125;; console.log(object.getNameFunc()());&#125;;window.one(); //The window/* 结果为The window * 调用window.one()方法 =&gt; * 步骤一: var声明name变量为The one; * 步骤二: var声明object对象,包含name和getNameFunc属性，getNameFunc属性为一个函数; * 步骤三: 打印object.getNameFunc()()结果; * 解析步骤三 =&gt; * object.getNameFunc()函数执行结果返回一个函数，结果如下 * function() &#123; * return this.name; * &#125;; * object.getNameFunc()后面跟(),表示执行返回的函数,return this.name,由于该方法是window.one()调用，this谁调用指向谁，即结果为The window *//* 延伸定义=&gt; 当你要确定 函数中的this指向什么的时候，不要到函数定义的地方去找答案，而是要到函数被调用的地方找答案。 * 如：a.f(),f()里面的this就是指a，而不管f()里面什么东西；若只是f()，不考虑一些特殊情况，f里面的this就是指全局对象window */ this作用域解析二1234567891011121314var val = 1;var obj = &#123; val: 2, doMath: function()&#123; this.val *= 2; val *= 2; console.log(val); console.log(this.val); &#125;&#125;obj.doMath(); //2 4var func = obj.doMath;func(); //8 8 箭头函数this区别 箭头函数的this定义：箭头函数的this是在定义函数时绑定的，不是在执行过程中绑定的。简单的说，函数在定义时，this就继承了定义函数的对象。12345678var val = 1;function test()&#123; this.val = 2; return ()=&gt;&#123; console.log(this.val) &#125;&#125;test()(); //2]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Promise的用法]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FJS%2FPromise%E7%9A%84%E7%94%A8%E6%B3%95%2F</url>
    <content type="text"><![CDATA[##Promise的用法]]></content>
      <categories>
        <category>js</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目相关问题]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E9%A1%B9%E7%9B%AE%E7%9B%B8%E5%85%B3%E9%97%AE%E9%A2%98%2F</url>
    <content type="text"><![CDATA[项目相关问题 ##ios响应式 编程]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[项目的图片资源]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E9%A1%B9%E7%9B%AE%E7%9A%84%E5%9B%BE%E7%89%87%E8%B5%84%E6%BA%90%2F</url>
    <content type="text"><![CDATA[获取ipa资源包(itunes获得或者第三方下载) 更改下载的.ipa后缀为zip文件，解压文件。 进入Payload文件夹，右键点击.app显示包内容，里面就是项目的图片资源 解压car文件内的图片资源下载https://github.com/devcxm/iOS-Images-Extractor插件，其本质是mac应用，运行可以直接放入ipa文件解压出car的图片资源，也可以只放入car进行解压。 打开方式: 使用xcode打开，然后command+R直接运行就可以使用。]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[自定义底部个别tab按钮]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BA%95%E9%83%A8%E4%B8%AA%E5%88%ABtab%E6%8C%89%E9%92%AE%2F</url>
    <content type="text"><![CDATA[占位方法* 设置5个相同的tabBaritem,将中间的tabBaritem设置为不显示内容。[self creatNav:[[UIViewController alloc] init] image:[UIImage imageNamed:@&quot;&quot;] selectImage:[UIImage imageNamed:@&quot;&quot;] title:nil]; * 并且在viewWillAppear中增加发布按钮。 重新自定义布局子空间UITabBar 新增UITabBar类并且继承自UITabBar 在UITabBar.m中实现自定义布局原始的4个tabBar，并且添加自身创建的UIButton 采用KVC来替换TabBar[self setValue:[[LCJTabBar alloc] init] forKeyPath:@”tabBar”]; 优势:1.第二组不会有系统的UITabBar的内存占用浪费。 2.灵活性更高，可定制性更高，位置和内容可以自行设置.]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[综合知识点]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E7%BB%BC%E5%90%88%E7%9F%A5%E8%AF%86%E7%82%B9%2F</url>
    <content type="text"><![CDATA[导航控制器视图懒加载(即，如果用户只在第一个页面，其他页面应用启动时不加载)统一不能设置背景色 凡是调用子控制器的view都会触发viewDidLoad方法，导致渲染，不能懒加载每个视图（即点击那个视图才显示哪个视图）viewController.view.backgroundColor = LCJCommonBgColor; 解决办法: 创建一个继承于UIViewController的类，然后其他视图所有继承这个类，在此类中定义统一背景 特殊页面也可以自行重写背景颜色 ##]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[宏相关设置]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E5%AE%8F%E7%9B%B8%E5%85%B3%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[PCH文件可能引发的错误 解决方案 123456789101112131415#ifndef PrefixHeader_pch#define PrefixHeader_pch/*** 如果希望某些内容能拷贝到任何源代码文件(OC\C\C++等), 那么就不要写在#ifdef __OBJC__和#endif之间 ***//***** 在#ifdef __OBJC__和#endif之间的内容, 只会拷贝到OC源代码文件中, 不会拷贝到其他语言的源代码文件中 *****/#ifdef __OBJC__#endif/***** 在#ifdef __OBJC__和#endif之间的内容, 只会拷贝到OC源代码文件中, 不会拷贝到其他语言的源代码文件中 *****/#endif 在Build Setting中配置宏 如果项目中有些宏找不到, 可能是配置在Build Setting中 注意点:宏的名字不能全部是小写字母 如果宏的名字全部是小写, 会出现以下错误]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[初始化项目]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2F%E5%88%9D%E5%A7%8B%E5%8C%96%E9%A1%B9%E7%9B%AE%2F</url>
    <content type="text"><![CDATA[folder和group区别(蓝色文件夹和黄色文件夹) folder(蓝色文件夹) 只能作为资源，整个引用进项目，不能编译代码. 不能直接引用，如果引用需要全路径. group(黄色文件夹) 黄色文件夹（group）是逻辑文件夹，主要是为了逻辑上的分组，如果手动创建（通过New Group选项）group并不会真正创建一个文件夹文件，该文件夹下的文件则会散乱的存放在工程根目录下。文件树保持一致建议在做逻辑分组时，都在finder中创建好目录结构，然后拖拽到xcode中让双方保持一致。Copy items if needed选项勾选后，会自动复制一份相同的文件到你的工程中，引用的是复制后在工程目录中的位置。若不勾选，文件的引用位置则是文件的原位置（不建议这样做，如果该文件在工程外被删除，工程则无法引用，所以还是复制一份到工程中，这样更利于工程文件的管理）。 项目整体添加类前缀 LaunchImage配置 步骤 删除默认的LaunchScreen.storyBoard 在项目中general中Launch Image sourc Launch Screen File置空 在Assets.xcassets中设置对应的LaunchImage即可 优点 app的icon和启动图片放置在统一目录下，一目了然 LaunchScreen.storyboard它不可以绑定自定义的类，LaunchImage扩展性更高 扩展 如果配置完Xcode-启动图不显示,com + shift + K —– {清一下缓存},模拟器(app)—-卸载—-重新运行 如果出现黑白条，启动图片中，没有该型号的图片、或者尺寸不对 优先级:LaunchScreen &gt; LaunchImage 如果是通过LaunchImage设置启动图片，那么屏幕的可视范围由图片决定]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[xcode自带的视图调试功能]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FIOS%2Fxcode%E8%87%AA%E5%B8%A6%E7%9A%84%E8%A7%86%E5%9B%BE%E8%B0%83%E8%AF%95%E5%8A%9F%E8%83%BD%2F</url>
    <content type="text"><![CDATA[首先保证xcode运行程序 点击show the debug navigatior中的view ui hierarchy按钮 可以查看设置的view，选中为蓝色 可以清楚查看层级，控制器之间的层级依赖关系 可以放大缩小,是否查看超出区域 注意: 虚拟机无法使用该功能]]></content>
      <categories>
        <category>ios</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>ios</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[pc]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FHtml%2Fpc%2F</url>
    <content type="text"><![CDATA[123456789101112131415&lt;!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01//EN" "http://www.w3.org/TR/html4/strict.dtd"&gt;&lt;html xmlns="http://www.w3.org/1999/xhtml" lang="en"&gt; &lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;title&gt;&lt;/title&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=Edge,chrome=1"&gt; &lt;meta name="keywords" content="keywords"&gt; &lt;meta itemprop="description" name="description" content="description" /&gt; &lt;!-- 启用360浏览器的极速模式(webkit) --&gt; &lt;meta name="renderer" content="webkit"&gt; &lt;/head&gt; &lt;body&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[html5]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FHtml%2Fhtml5%2F</url>
    <content type="text"><![CDATA[1234567891011121314&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;meta charset="utf-8"&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge"&gt; &lt;meta name="format-detection" content="telephone=no, email=no"/&gt;&lt;!--iphone中电话号码邮箱不可点击--&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0, minimum-scale=1.0, maximum-scale=1.0, user-scalable=no"&gt;&lt;!--以手机的尺寸缩放Web页面--&gt; &lt;title&gt;&lt;/title&gt; &lt;link rel="stylesheet" href=""&gt;&lt;/head&gt;&lt;body&gt;&lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>html</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>html</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[颜色]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FFlutter%2F%E9%A2%9C%E8%89%B2%2F</url>
    <content type="text"><![CDATA[flutter中使用颜色12345678910111213141516171819202122232425backgroundColor: new Color(0xFFffffff)0x代表进制 FF代表透明度 ffffff代表颜色取值透明度参照表：0%=FF（不透明)5%=F210%=E515%=D820%=CC25%=BF30%=B235%=A540%=9945%=8c50%=7F55%=7260%=6665%=5970%=4c75%=3F80%=3385%=2190%=1995%=0c100%=00（全透明）]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode在windows上提示找不到设备]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FFlutter%2Fvscode%E5%9C%A8windows%E4%B8%8A%E6%8F%90%E7%A4%BA%E6%89%BE%E4%B8%8D%E5%88%B0%E8%AE%BE%E5%A4%87%2F</url>
    <content type="text"><![CDATA[vscode在windows上提示找不到设备 已经启动模拟器，并且通过adb devices可以查看到设备通过命令行flutter run可以运行，唯独在vscode中F5不能运行vscode通过F5运行报错信息: Cannot launch without an active devicevscode通过终端运行报错信息: Unable to find git in your PATH shell的path环境导致的问题，在cmder中有git的环境变量，在vscode中终端没有git变量，通过在cmder中打印path环境变量找到git环境变量的位置，然后添加到全局path环境变量中即可]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vscode关闭dart提示后缀]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FFlutter%2Fvscode%E5%85%B3%E9%97%ADdart%E6%8F%90%E7%A4%BA%E5%90%8E%E7%BC%80%2F</url>
    <content type="text"><![CDATA[vscode关闭dart提示后缀 首选项 -&gt; 设置 -&gt; “dart.closingLabels”: false]]></content>
      <categories>
        <category>flutter</category>
      </categories>
      <tags>
        <tag>flutter</tag>
        <tag>app</tag>
        <tag>跨平台app</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[常用css效果]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FCss%2F%E5%B8%B8%E7%94%A8css%E6%95%88%E6%9E%9C%2F</url>
    <content type="text"><![CDATA[modal中内容(未知宽度高度)绝对居中123456789101112131415161718192021.father-box&#123; display: none; position: fixed; overflow: hidden; top: 0; left: 0; bottom: 0; right: 0; z-index: 5; background: rgba(0,0,0,0.6);&#125;.child-box&#123; position: absolute; width: 240px; overflow: hidden; top: 50%; left: 50%; -o-transform: translate3d(-50%,-50%,0); -webkit-transform: translate3d(-50%,-50%,0); transform: translate3d(-50%,-50%,0);&#125; modal侧滑效果1234567891011121314151617181920.father-box&#123; display: none; position: fixed; overflow: hidden; top: 0; left: 0; bottom: 0; right: 0; z-index: 5; background: rgba(0,0,0,0.6);&#125;.child-box&#123; position: absolute; top: 0; right: -45%; width: 45%; height: 100%; background: #fff; padding-top: 4.2rem;&#125; 1234567891011121314151617181920212223/* 显示和隐藏modal * 显示=》先显示modal，再显示对应的内容节点 * 隐藏=》先隐藏内容节点，再隐藏modal * 拿显示来说，为什么不将内容节点的显示放在modal显示的回调中，从测试来看，并行UI更舒服一些 */var hideModal = function() &#123; $(".child-box").animate(&#123; right: '-45%' &#125;, 300); $(".father-box").fadeOut(300);&#125;var showModal = function() &#123; $(".father-box").fadeIn(300); $(".child-box").animate(&#123; right: 0 &#125;, 300);&#125;/* 点击内容节点外的空白区域隐藏（事件冒泡）*/$(".child-box").on('click', function() &#123; event.stopPropagation();&#125;) 安卓字体未垂直居中123456789101112131415161718192021222324252627/*安卓浏览器字体不垂直居中，REM计算后小数点会导致，如果用偶数大于12px可以解决，如果使用REM则可以通过table布局来解决*/&lt;p class="h2"&gt; &lt;span&gt;无缝对接&lt;i&gt;云ERP进销存、网店版&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;.header-content p.h2&#123; display: table; width: 12.8rem; height: 1.35rem; background: url(../img/wulianbao/header_title_dec.png) no-repeat 50% 50%; background-size: cover; text-align: center; margin: 0 auto 0.5rem;&#125;.header-content p.h2 span&#123; display: table-cell; font-size: 0.75rem; vertical-align: middle; color: #fff;&#125;.header-content p.h2 i&#123; font-size: 0.75rem; color: #fff; font-weight: bold;&#125;/*注意点: 父元素不能设置line-height，vertical-align: middle设置在子元素上*/ img图片（未知宽高）在div中居中显示1234567891011121314151617.father-box&#123; width: 100%; height: 9.35rem; position: relative; overflow: hidden;&#125;.father-box img&#123; display: block; width: 80%; height: auto; margin: auto; position: absolute; top: 0; left: 0; right: 0; bottom: 0;&#125; css中计算属性calc12345div&#123; width:-webkit-calc(100% - 2.5rem); width:-moz-calc(100% - 2.5rem); width:calc(100% - 2.5rem);&#125; 手机端1px实现123456789101112131415/* 第一种 * 伪类缩放 */div:before&#123; content: ""; display: block; position: absolute; left: -50%; width: 200%; height: 1px; background: #eaeaea; bottom: 0; -webkit-transform:scale(0.5); transform: scale(0.5);&#125; 安卓浏览器字体不垂直居中12345678.banner-box &gt; a:before&#123; content: ''; display: inline-block; vertical-align: middle; width: 0; height: 100%; margin-top: 1px;&#125; 确定高度多行文本垂直居中1234567891011121314151617181920212223//最外层确定高度，第二层容器包含文本，不要确定高度，由内容撑开（table布局vertical-align: middle实现）.footerBox &#123; background: #fff; width: 100%; position: relative; overflow: hidden; text-align: center; height: 3.8rem; display: table;&#125;.footerTextBox&#123; position: relative; width: 100%; display: table-cell; vertical-align: middle;&#125;.footerTextBox&gt;p &#123; font-size: .5rem; color: #999; line-height: 150%;&#125; input修改placeholder提示文本属性123456789101112input::-webkit-input-placeholder&#123; color: #999;&#125;input:-moz-placeholder&#123; color: #999;&#125;input::-moz-placeholder&#123; color: #999;&#125;input:-ms-input-placeholder&#123; color: #999;&#125; 超出显示省略号123456789101112131415/*---- 单行 ----*/p&#123; overflow: hidden; text-overflow:ellipsis; white-space: nowrap;&#125;/*---- 多行 ----*/p&#123; display: -webkit-box; -webkit-box-orient: vertical; -webkit-line-clamp: 3; overflow: hidden; text-overflow:ellipsis;&#125; safair下input设置disabled导致透明12345input:disabled&#123; color: blue; opacity: 1; -webkit-text-fill-color: blue;&#125; flex布局时不被挤压1234567/*flex-shrink属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。*/.child&#123; flex-shrink: 0;&#125; flex布局占据剩余宽度1234567/*flex-grow属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。*/.child&#123; flex-grow: 1;&#125; 打字效果123456&lt;!-- html部分 --&gt;&lt;div class="wrapper"&gt; &lt;div class="typing-demo"&gt; 有趣且实用的 CSS 小技巧 &lt;/div&gt;&lt;/div&gt; 1234567891011121314151617181920212223242526272829303132333435/* css部分 */.wrapper &#123; height: 100vh; display: flex; align-items: center; justify-content: center;&#125;.typing-demo &#123; /* * 1ch = 1个英文 = 1个数字 * 2ch = 1个中文 * ch 是一个相对单位，所谓相对，意思是 ch 会根据当前容器的 ****font-size**** 变化而变化。 * ch单位在chrome效果完好，在firfox中显示有问题，兼容性待商榷 */ width: 22ch; animation: typing 2s steps(22), blink .5s step-end infinite alternate; white-space: nowrap; overflow: hidden; border-right: 3px solid; font-family: monospace; font-size: 2em;&#125;@keyframes typing &#123; from &#123; width: 0 &#125;&#125; @keyframes blink &#123; 50% &#123; border-color: transparent &#125;&#125; 自定义滚动条样式123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .wrapper &#123; height: 100vh; display: flex; align-items: center; justify-content: center; &#125; .mr-1 &#123; margin-right: 1em; &#125; .tile &#123; overflow: auto; display: inline-block; background-color: #ccc; height: 200px; width: 180px; &#125; .tile-custom-scrollbar::-webkit-scrollbar &#123; width: 12px; background-color: #eff1f5; &#125; .tile-custom-scrollbar::-webkit-scrollbar-track &#123; border-radius: 3px; background-color: transparent; &#125; .tile-custom-scrollbar::-webkit-scrollbar-thumb &#123; border-radius: 5px; background-color: #515769; border: 2px solid #eff1f5; &#125; .tile-content &#123; padding: 20px; height: 500px; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="wrapper"&gt; &lt;div&gt; &lt;div class="tile mr-1"&gt; &lt;div class="tile-content"&gt;默认滚动条&lt;/div&gt; &lt;/div&gt; &lt;div class="tile tile-custom-scrollbar"&gt; &lt;div class="tile-content"&gt;自定义滚动条&lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/div&gt; &lt;/body&gt;&lt;/html&gt; 圆形渐变边框123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html lang="en"&gt; &lt;head&gt; &lt;meta charset="UTF-8" /&gt; &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt; &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt; &lt;title&gt;Document&lt;/title&gt; &lt;style&gt; .gradient-border &#123; border: solid 5px transparent; border-radius: 10px; background-image: linear-gradient(white, white), linear-gradient(315deg,#833ab4,#fd1d1d 50%,#fcb045); background-origin: border-box; background-clip: content-box, border-box; &#125; .box &#123; width: 350px; height: 100px; display: flex; align-items: center; justify-content: center; margin: 100px auto; &#125; &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;div class="box gradient-border"&gt;炫酷渐变边框&lt;/div&gt; &lt;/body&gt;&lt;/html&gt;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[IE8兼容字体图标]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FCss%2FIE8%E5%85%BC%E5%AE%B9%E5%AD%97%E4%BD%93%E5%9B%BE%E6%A0%87%2F</url>
    <content type="text"><![CDATA[123456789101112其实下载下来的阿里巴巴iconfont图标引用方式，大多数的情况下是不可用的。存在无法解析路径问题。所以，图标就会出现小方框解决办法如下@font-face &#123;font-family: “iconfont”;src:url(‘../fonts/iconfont.eot’), /* IE9*/url(‘../fonts/iconfont.eot’) format(’embedded-opentype’), /* IE6-IE8 */url(‘../fonts/iconfont.woff’) format(‘woff’), /* chrome, firefox */url(‘../fonts/iconfont.ttf’) format(‘truetype’), /* chrome, firefox, opera, Safari, Android, iOS 4.2+*/url(‘../fonts/iconfont.svg’) format(‘svg’); /* iOS 4.1- */&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[rem.css]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FCss%2Frem-css%2F</url>
    <content type="text"><![CDATA[123456789101112131415161718192021222324252627282930313233343536373839/*页面初始化*/@charset 'utf-8';html,body,div,span,iframe,h1,h2,h3,h4,h5,h6,p,blockquote,a,address,em,img,ol,ul,li,fieldset,form,label,legend,table,tbody,tfoot,thead,tr,th,td,i,b,s&#123;font-family:Helvetica,Arial,sans-serif;font-size:62.5%;font-weight:inherit;font-style:inherit;margin:0;padding:0;border:0&#125;ul,ol&#123;list-style:none&#125;a img&#123;vertical-align:top;border:none&#125;a&#123;text-decoration:none&#125;button&#123;overflow:visible;margin:0;padding:0;border:0 none;background-color:transparent&#125;button::-moz-focus-inner&#123;padding:0&#125;input[type=password]&#123;-webkit-text-security:disc&#125;textarea:focus,input:focus,button:focus&#123;outline:none&#125;body&#123;word-wrap:break-word&#125;*&#123;-webkit-tap-highlight-color:rgba(0,0,0,0)&#125;.icon&#123;display:inline-block;zoom:1;vertical-align:middle;background-repeat:no-repeat;background-position:left top&#125;.btn&#123;display:inline-block;zoom:1;text-align:center;vertical-align:middle&#125;.none&#123;display:none&#125;/*375的iphone6设计稿转化*/html&#123;font-size: 20px;&#125;@media only screen and (max-width: 320px) &#123;html &#123;font-size: 17px;&#125;&#125;@media only screen and (min-width: 321px) and (max-width: 360px) &#123;html &#123;font-size: 19.2px;&#125;&#125;@media only screen and (min-width: 361px) and (max-width: 375px) &#123;html &#123;font-size: 20px;&#125;&#125;@media only screen and (min-width: 376px) and (max-width: 414px) &#123;html &#123;font-size: 22px;&#125;&#125;@media only screen and (min-width: 415px) and (max-width: 479px) &#123;html &#123;font-size: 23px;&#125;&#125;@media only screen and (min-width: 480px) &#123;html &#123;font-size: 25.6px;&#125;&#125;@media only screen and (min-width: 768px) &#123;html &#123;font-size: 27.4px;&#125;&#125;/*320的iphone5设计稿转化*/html&#123;font-size: 20px;&#125;@media only screen and (max-width: 320px) &#123;html &#123;font-size: 20px;&#125;&#125;@media only screen and (min-width: 321px) and (max-width: 360px) &#123;html &#123;font-size: 22.5px;&#125;&#125;@media only screen and (min-width: 361px) and (max-width: 375px) &#123;html &#123;font-size: 23.4px;&#125;&#125;@media only screen and (min-width: 376px) and (max-width: 414px) &#123;html &#123;font-size: 25.8px;&#125;&#125;@media only screen and (min-width: 415px) and (max-width: 479px) &#123;html &#123;font-size: 27px;&#125;&#125;@media only screen and (min-width: 480px) &#123;html &#123;font-size: 30px;&#125;&#125;@media only screen and (min-width: 768px) &#123;html &#123;font-size: 32px;&#125;&#125;/*IE8 兼容*/.bg&#123; /*background-position 不能连写在background内，否则在ie8会不显示*/ background: url(img/border_box.png) no-repeat; background-position: 50% 50%;&#125;.line-height&#123; /*在border-box盒子模型下，如果设置了高度，并且存在border，line-height高度要减去border高度*/ box-sizing: border-box; height: 40px; border: 1px solid #000; line-height: 38px;&#125;]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[怪异盒模型VS标准盒模型]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FCss%2F%E6%80%AA%E5%BC%82%E7%9B%92%E6%A8%A1%E5%9E%8BVS%E6%A0%87%E5%87%86%E7%9B%92%E6%A8%A1%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[#怪异盒模型VS标准盒模型 标准盒模型：W3C标准定义：一个块的总宽度=width+margin(左右)+padding(左右)+border(左右) 怪异盒模型：IE标准盒子模型定义：一个块的总宽度=width+margin（左右）（既width已经包含了padding和border值） 使用怪异盒模型 box-sizing:content-box || border-box || inherit;当设置为box-sizing:border-box时，将采用怪异模式解析计算；好处是便于整体计算，例如一个页面1000px，指定左右各500px，如果采用怪异模式，不需要care宽度和border，padding的影响，因为border,padding都归属于width。 怪异盒子模型.png 标准盒子模型.png]]></content>
      <categories>
        <category>css</category>
      </categories>
      <tags>
        <tag>前端</tag>
        <tag>css</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative与原生交互注意事项]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative%E4%B8%8E%E5%8E%9F%E7%94%9F%E4%BA%A4%E4%BA%92%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9%2F</url>
    <content type="text"><![CDATA[项目的基本配置“react”: “16.0.0-alpha.12”,“react-native”: “0.47.1”,“xcode”: “8.2.1”,“模拟器”: “IOS 10.2”,“mac”: “10.12.2” Podfile创建引入对应模块#target的名字一般与你的项目名字相同target ‘NumberTileGame’ do #’node_modules’目录一般位于根目录中 #但是如果你的结构不同，那你就要根据实际路径修改下面的:path pod ‘React’, :path =&gt; ‘../node_modules/react-native’, :subspecs =&gt; [ ‘Core’, ‘DevSupport’, # 如果RN版本 &gt;= 0.43，则需要加入此行才能开启开发者菜单 ‘RCTText’, ‘RCTNetwork’, ‘RCTWebSocket’, # 这个模块是用于调试功能的 #在这里继续添加你所需要的模块 ] #如果你的RN版本 &gt;= 0.42.0，则加入下面这行 pod “Yoga”, :path =&gt; “../node_modules/react-native/ReactCommon/yoga” end jschelpers/JavaScriptCore.h file not found该问题产生是因为pod的版本低于1.2.0导致的解决办法:1.sudo gem uninstall cocoapods.2.sudo gem install cocoapods.3.pod install.附解决地址: https://github.com/facebook/react-native/issues/13010 Undefined symbols for architecture x86_64:错误如下: /Users/snorreedwin/Code/entur/entur-clients/native/ios/build/Build/Products/Debug-iphonesimulator/React/React.framework/React Undefined symbols for architecture x86_64: "_JSNoBytecodeFileFormatVersion", referenced from: +[RCTJavaScriptLoader loadBundleAtURL:onProgress:onComplete:] in RCTJavaScriptLoader.o +[RCTJavaScriptLoader attemptSynchronousLoadOfBundleAtURL:runtimeBCVersion:sourceLength:error:] in RCTJavaScriptLoader.o "facebook::react::parseTypeFromHeader(facebook::react::BundleHeader const&)", referenced from: +[RCTJavaScriptLoader attemptSynchronousLoadOfBundleAtURL:runtimeBCVersion:sourceLength:error:] in RCTJavaScriptLoader.o "facebook::react::customJSCWrapper()", referenced from: -[RCTDevSettings isJSCSamplingProfilerAvailable] in RCTDevSettings.o -[RCTDevSettings toggleJSCSamplingProfiler] in RCTDevSettings.o _RCTNSErrorFromJSErrorRef in RCTJSCErrorHandling.o -[RCTSamplingProfilerPackagerMethod handleRequest:withResponder:] in RCTSamplingProfilerPackagerMethod.o "facebook::react::systemJSCWrapper()", referenced from: -[RCTDevSettings isJSCSamplingProfilerAvailable] in RCTDevSettings.o -[RCTDevSettings toggleJSCSamplingProfiler] in RCTDevSettings.o _RCTNSErrorFromJSErrorRef in RCTJSCErrorHandling.o -[RCTSamplingProfilerPackagerMethod handleRequest:withResponder:] in RCTSamplingProfilerPackagerMethod.o ld: symbol(s) not found for architecture x86_64 clang: error: linker command failed with exit code 1 (use -v to see invocation) 解决办法:在Podfile的subspecs中添加BatchedBridge字段，然后重新安装即可解决.附解决地址: https://github.com/facebook/react-native/issues/14925]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[ReactNative全面屏适配]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FReactNative%2FReactNative%E5%85%A8%E9%9D%A2%E5%B1%8F%E9%80%82%E9%85%8D%2F</url>
    <content type="text"><![CDATA[IOS适配 SafeAreaView组件自动适配iPhoneX12345678910/*请注意SafeAreaView组件在0.51版本之后才有*/import &#123; SafeAreaView,&#125; from 'react-native';&lt;SafeAreaView style=&#123;&#123;flex: 1, backgroundColor: '#fff'&#125;&#125;&gt; &lt;View style=&#123;&#123;flex: 1, backgroundColor: '#fff'&#125;&#125;&gt; &lt;Text&gt;hello world&lt;/Text&gt; &lt;/View&gt;&lt;/SafeAreaView&gt; Android适配 确保安卓SDK为24以上，RN默认使用23。RN安卓sdk在 /android/app/build.gradle 文件里修改（android:resizeableActivity方法Android7.0以上才可以使用，即SDK≥24） 12compileSdkVersion 24buildToolsVersion &quot;24.0.1&quot; 修改android\app\src\main\AndroidManifest.xml文件中Activity的属性 1android:resizeableActivity=&quot;true&quot; RN0.56.0版本，自动适配了全面屏幕，不需要单独设置了]]></content>
      <categories>
        <category>reactnative</category>
      </categories>
      <tags>
        <tag>app</tag>
        <tag>跨平台app</tag>
        <tag>reactnative</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[apidoc基本使用]]></title>
    <url>%2Fblog%2F2018%2F12%2F07%2FApidoc%2Fapidoc%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[全局安装apidoc npm install -g apidoc 项目内创建apidoc.json1234567891011121314151617181920212223242526272829303132333435363738/** * sampleUrl设置可以全局开启发送请求，即模拟请求 * withGenerator关闭apidoc的文本 * footer 自定义底部DOM */&#123; &quot;name&quot;: &quot;恣意游&quot;, &quot;version&quot;: &quot;1.0.0&quot;, &quot;description&quot;: &quot;恣意游API接口文档&quot;, &quot;title&quot;: &quot;恣意游API&quot;, &quot;url&quot;: &quot;https://api.ziyiu.com/life&quot;, &quot;sampleUrl&quot;: &quot;https://api.ziyiu.com/life&quot;, &quot;template&quot;: &#123; &quot;withGenerator&quot;: false &#125;, &quot;footer&quot;: &#123; &quot;title&quot;: &quot;关于恣意游&quot;, &quot;filename&quot;: &quot;./src/apidoc/footer.md&quot; &#125;&#125;/** * package.json配置命令 * npm run apidoc编译apidoc * npm run bulid 编译apidoc和项目一起执行 * -i src/即编译src目录下api注释, -o view/index指输出目录 */ &quot;scripts&quot;: &#123; &quot;start&quot;: &quot;node development.js&quot;, &quot;test&quot;: &quot;THINK_UNIT_TEST=1 nyc ava test/ &amp;&amp; nyc report --reporter=html&quot;, &quot;compile&quot;: &quot;babel --no-babelrc src/ --presets think-node --out-dir app/&quot;, &quot;lint&quot;: &quot;eslint src/&quot;, &quot;lint-fix&quot;: &quot;eslint --fix src/&quot;, &quot;build&quot;: &quot;npm run apidoc &amp;&amp; npm run compile&quot;, &quot;apidoc&quot;: &quot;apidoc -i src/ -o view/index&quot;&#125; 与thinkjs融合的BUG解决 静态资源目录问题123456789//publicPath: /^\/(static|favicon\.ico)/如果直接注释中间件的publicPath，可以成功访问index.html和静态资源，但是会导致项目get请求报错Access to XMLHttpRequest at &apos;http://127.0.0.1:8084/life/search/searchSuggestion?wd=a&amp;uid=5c097013-3d8a-482f-8131-50a833983175&amp;timestamp=1543596480560&amp;accessToken=141d5a1&apos; from origin &apos;http://127.0.0.1:8080&apos; has been blocked by CORS policy: No &apos;Access-Control-Allow-Origin&apos; header is present on the requested resource.解决办法options: &#123; root: path.join(think.ROOT_PATH, &apos;view/index/&apos;), publicPath: /^\/(main\.js|api_data\.js|api_project\.js|css|fonts|img|utils|vendor|locales|favicon\.ico)/&#125;]]></content>
      <categories>
        <category>apidoc</category>
      </categories>
      <tags>
        <tag>apidoc</tag>
        <tag>接口文档</tag>
      </tags>
  </entry>
</search>
